

Microchip MPLAB XC8 Assembler V2.35 build 20211206165544 
                                                                                               Sat May 20 09:26:05 2023

Microchip MPLAB XC8 C Compiler v2.35 (Free license) build 20211206165544 Og9 
     1                           	processor	16F628A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	psect	text23,local,class=CODE,merge=1,delta=2
    36                           	psect	text24,local,class=CODE,merge=1,delta=2
    37                           	psect	text25,local,class=CODE,merge=1,delta=2
    38                           	psect	text26,local,class=CODE,merge=1,delta=2
    39                           	psect	text27,local,class=CODE,merge=1,delta=2
    40                           	psect	text28,local,class=CODE,merge=1,delta=2
    41                           	psect	text29,local,class=CODE,merge=1,delta=2
    42                           	psect	text30,local,class=CODE,merge=1,delta=2
    43                           	psect	text31,local,class=CODE,merge=1,delta=2
    44                           	psect	text32,local,class=CODE,merge=1,delta=2,group=1
    45                           	psect	text33,local,class=CODE,merge=1,delta=2
    46                           	psect	text34,local,class=CODE,merge=1,delta=2
    47                           	psect	text35,local,class=CODE,merge=1,delta=2
    48                           	psect	text36,local,class=CODE,merge=1,delta=2
    49                           	psect	text37,local,class=CODE,merge=1,delta=2
    50                           	psect	text38,local,class=CODE,merge=1,delta=2
    51                           	psect	text39,local,class=CODE,merge=1,delta=2
    52                           	psect	intentry,global,class=CODE,delta=2
    53                           	psect	text40,local,class=CODE,merge=1,delta=2
    54                           	psect	text41,local,class=CODE,merge=1,delta=2
    55                           	psect	text42,local,class=CODE,merge=1,delta=2
    56                           	psect	text43,local,class=CODE,merge=1,delta=2
    57                           	psect	text44,local,class=CODE,merge=1,delta=2
    58                           	psect	text45,local,class=CODE,merge=1,delta=2
    59                           	psect	text46,local,class=CODE,merge=1,delta=2
    60                           	psect	text47,local,class=CODE,merge=1,delta=2
    61                           	psect	text48,local,class=CODE,merge=1,delta=2
    62                           	psect	text49,local,class=CODE,merge=1,delta=2
    63                           	psect	text50,local,class=CODE,merge=1,delta=2
    64                           	psect	functab,global,class=ENTRY,delta=2
    65                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    66                           	dabs	1,0x7E,2
    67  0000                     
    68                           ; Version 2.40
    69                           ; Generated 17/11/2021 GMT
    70                           ; 
    71                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    72                           ; All rights reserved.
    73                           ; 
    74                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    75                           ; 
    76                           ; Redistribution and use in source and binary forms, with or without modification, are
    77                           ; permitted provided that the following conditions are met:
    78                           ; 
    79                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    80                           ;        conditions and the following disclaimer.
    81                           ; 
    82                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    83                           ;        of conditions and the following disclaimer in the documentation and/or other
    84                           ;        materials provided with the distribution. Publication is not required when
    85                           ;        this file is used in an embedded application.
    86                           ; 
    87                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    88                           ;        software without specific prior written permission.
    89                           ; 
    90                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    91                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    92                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    93                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    94                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    95                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    96                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    97                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    98                           ; 
    99                           ; 
   100                           ; Code-generator required, PIC16F628A Definitions
   101                           ; 
   102                           ; SFR Addresses
   103  0000                     	;# 
   104  0001                     	;# 
   105  0002                     	;# 
   106  0003                     	;# 
   107  0004                     	;# 
   108  0005                     	;# 
   109  0006                     	;# 
   110  000A                     	;# 
   111  000B                     	;# 
   112  000C                     	;# 
   113  000E                     	;# 
   114  000E                     	;# 
   115  000F                     	;# 
   116  0010                     	;# 
   117  0011                     	;# 
   118  0012                     	;# 
   119  0015                     	;# 
   120  0015                     	;# 
   121  0016                     	;# 
   122  0017                     	;# 
   123  0018                     	;# 
   124  0019                     	;# 
   125  001A                     	;# 
   126  001F                     	;# 
   127  0081                     	;# 
   128  0085                     	;# 
   129  0086                     	;# 
   130  008C                     	;# 
   131  008E                     	;# 
   132  0092                     	;# 
   133  0098                     	;# 
   134  0099                     	;# 
   135  009A                     	;# 
   136  009B                     	;# 
   137  009C                     	;# 
   138  009D                     	;# 
   139  009F                     	;# 
   140  0000                     	;# 
   141  0001                     	;# 
   142  0002                     	;# 
   143  0003                     	;# 
   144  0004                     	;# 
   145  0005                     	;# 
   146  0006                     	;# 
   147  000A                     	;# 
   148  000B                     	;# 
   149  000C                     	;# 
   150  000E                     	;# 
   151  000E                     	;# 
   152  000F                     	;# 
   153  0010                     	;# 
   154  0011                     	;# 
   155  0012                     	;# 
   156  0015                     	;# 
   157  0015                     	;# 
   158  0016                     	;# 
   159  0017                     	;# 
   160  0018                     	;# 
   161  0019                     	;# 
   162  001A                     	;# 
   163  001F                     	;# 
   164  0081                     	;# 
   165  0085                     	;# 
   166  0086                     	;# 
   167  008C                     	;# 
   168  008E                     	;# 
   169  0092                     	;# 
   170  0098                     	;# 
   171  0099                     	;# 
   172  009A                     	;# 
   173  009B                     	;# 
   174  009C                     	;# 
   175  009D                     	;# 
   176  009F                     	;# 
   177  0000                     	;# 
   178  0001                     	;# 
   179  0002                     	;# 
   180  0003                     	;# 
   181  0004                     	;# 
   182  0005                     	;# 
   183  0006                     	;# 
   184  000A                     	;# 
   185  000B                     	;# 
   186  000C                     	;# 
   187  000E                     	;# 
   188  000E                     	;# 
   189  000F                     	;# 
   190  0010                     	;# 
   191  0011                     	;# 
   192  0012                     	;# 
   193  0015                     	;# 
   194  0015                     	;# 
   195  0016                     	;# 
   196  0017                     	;# 
   197  0018                     	;# 
   198  0019                     	;# 
   199  001A                     	;# 
   200  001F                     	;# 
   201  0081                     	;# 
   202  0085                     	;# 
   203  0086                     	;# 
   204  008C                     	;# 
   205  008E                     	;# 
   206  0092                     	;# 
   207  0098                     	;# 
   208  0099                     	;# 
   209  009A                     	;# 
   210  009B                     	;# 
   211  009C                     	;# 
   212  009D                     	;# 
   213  009F                     	;# 
   214  0000                     	;# 
   215  0001                     	;# 
   216  0002                     	;# 
   217  0003                     	;# 
   218  0004                     	;# 
   219  0005                     	;# 
   220  0006                     	;# 
   221  000A                     	;# 
   222  000B                     	;# 
   223  000C                     	;# 
   224  000E                     	;# 
   225  000E                     	;# 
   226  000F                     	;# 
   227  0010                     	;# 
   228  0011                     	;# 
   229  0012                     	;# 
   230  0015                     	;# 
   231  0015                     	;# 
   232  0016                     	;# 
   233  0017                     	;# 
   234  0018                     	;# 
   235  0019                     	;# 
   236  001A                     	;# 
   237  001F                     	;# 
   238  0081                     	;# 
   239  0085                     	;# 
   240  0086                     	;# 
   241  008C                     	;# 
   242  008E                     	;# 
   243  0092                     	;# 
   244  0098                     	;# 
   245  0099                     	;# 
   246  009A                     	;# 
   247  009B                     	;# 
   248  009C                     	;# 
   249  009D                     	;# 
   250  009F                     	;# 
   251  0000                     	;# 
   252  0001                     	;# 
   253  0002                     	;# 
   254  0003                     	;# 
   255  0004                     	;# 
   256  0005                     	;# 
   257  0006                     	;# 
   258  000A                     	;# 
   259  000B                     	;# 
   260  000C                     	;# 
   261  000E                     	;# 
   262  000E                     	;# 
   263  000F                     	;# 
   264  0010                     	;# 
   265  0011                     	;# 
   266  0012                     	;# 
   267  0015                     	;# 
   268  0015                     	;# 
   269  0016                     	;# 
   270  0017                     	;# 
   271  0018                     	;# 
   272  0019                     	;# 
   273  001A                     	;# 
   274  001F                     	;# 
   275  0081                     	;# 
   276  0085                     	;# 
   277  0086                     	;# 
   278  008C                     	;# 
   279  008E                     	;# 
   280  0092                     	;# 
   281  0098                     	;# 
   282  0099                     	;# 
   283  009A                     	;# 
   284  009B                     	;# 
   285  009C                     	;# 
   286  009D                     	;# 
   287  009F                     	;# 
   288  0000                     	;# 
   289  0001                     	;# 
   290  0002                     	;# 
   291  0003                     	;# 
   292  0004                     	;# 
   293  0005                     	;# 
   294  0006                     	;# 
   295  000A                     	;# 
   296  000B                     	;# 
   297  000C                     	;# 
   298  000E                     	;# 
   299  000E                     	;# 
   300  000F                     	;# 
   301  0010                     	;# 
   302  0011                     	;# 
   303  0012                     	;# 
   304  0015                     	;# 
   305  0015                     	;# 
   306  0016                     	;# 
   307  0017                     	;# 
   308  0018                     	;# 
   309  0019                     	;# 
   310  001A                     	;# 
   311  001F                     	;# 
   312  0081                     	;# 
   313  0085                     	;# 
   314  0086                     	;# 
   315  008C                     	;# 
   316  008E                     	;# 
   317  0092                     	;# 
   318  0098                     	;# 
   319  0099                     	;# 
   320  009A                     	;# 
   321  009B                     	;# 
   322  009C                     	;# 
   323  009D                     	;# 
   324  009F                     	;# 
   325  0000                     	;# 
   326  0001                     	;# 
   327  0002                     	;# 
   328  0003                     	;# 
   329  0004                     	;# 
   330  0005                     	;# 
   331  0006                     	;# 
   332  000A                     	;# 
   333  000B                     	;# 
   334  000C                     	;# 
   335  000E                     	;# 
   336  000E                     	;# 
   337  000F                     	;# 
   338  0010                     	;# 
   339  0011                     	;# 
   340  0012                     	;# 
   341  0015                     	;# 
   342  0015                     	;# 
   343  0016                     	;# 
   344  0017                     	;# 
   345  0018                     	;# 
   346  0019                     	;# 
   347  001A                     	;# 
   348  001F                     	;# 
   349  0081                     	;# 
   350  0085                     	;# 
   351  0086                     	;# 
   352  008C                     	;# 
   353  008E                     	;# 
   354  0092                     	;# 
   355  0098                     	;# 
   356  0099                     	;# 
   357  009A                     	;# 
   358  009B                     	;# 
   359  009C                     	;# 
   360  009D                     	;# 
   361  009F                     	;# 
   362  0000                     	;# 
   363  0001                     	;# 
   364  0002                     	;# 
   365  0003                     	;# 
   366  0004                     	;# 
   367  0005                     	;# 
   368  0006                     	;# 
   369  000A                     	;# 
   370  000B                     	;# 
   371  000C                     	;# 
   372  000E                     	;# 
   373  000E                     	;# 
   374  000F                     	;# 
   375  0010                     	;# 
   376  0011                     	;# 
   377  0012                     	;# 
   378  0015                     	;# 
   379  0015                     	;# 
   380  0016                     	;# 
   381  0017                     	;# 
   382  0018                     	;# 
   383  0019                     	;# 
   384  001A                     	;# 
   385  001F                     	;# 
   386  0081                     	;# 
   387  0085                     	;# 
   388  0086                     	;# 
   389  008C                     	;# 
   390  008E                     	;# 
   391  0092                     	;# 
   392  0098                     	;# 
   393  0099                     	;# 
   394  009A                     	;# 
   395  009B                     	;# 
   396  009C                     	;# 
   397  009D                     	;# 
   398  009F                     	;# 
   399  0000                     	;# 
   400  0001                     	;# 
   401  0002                     	;# 
   402  0003                     	;# 
   403  0004                     	;# 
   404  0005                     	;# 
   405  0006                     	;# 
   406  000A                     	;# 
   407  000B                     	;# 
   408  000C                     	;# 
   409  000E                     	;# 
   410  000E                     	;# 
   411  000F                     	;# 
   412  0010                     	;# 
   413  0011                     	;# 
   414  0012                     	;# 
   415  0015                     	;# 
   416  0015                     	;# 
   417  0016                     	;# 
   418  0017                     	;# 
   419  0018                     	;# 
   420  0019                     	;# 
   421  001A                     	;# 
   422  001F                     	;# 
   423  0081                     	;# 
   424  0085                     	;# 
   425  0086                     	;# 
   426  008C                     	;# 
   427  008E                     	;# 
   428  0092                     	;# 
   429  0098                     	;# 
   430  0099                     	;# 
   431  009A                     	;# 
   432  009B                     	;# 
   433  009C                     	;# 
   434  009D                     	;# 
   435  009F                     	;# 
   436  0000                     	;# 
   437  0001                     	;# 
   438  0002                     	;# 
   439  0003                     	;# 
   440  0004                     	;# 
   441  0005                     	;# 
   442  0006                     	;# 
   443  000A                     	;# 
   444  000B                     	;# 
   445  000C                     	;# 
   446  000E                     	;# 
   447  000E                     	;# 
   448  000F                     	;# 
   449  0010                     	;# 
   450  0011                     	;# 
   451  0012                     	;# 
   452  0015                     	;# 
   453  0015                     	;# 
   454  0016                     	;# 
   455  0017                     	;# 
   456  0018                     	;# 
   457  0019                     	;# 
   458  001A                     	;# 
   459  001F                     	;# 
   460  0081                     	;# 
   461  0085                     	;# 
   462  0086                     	;# 
   463  008C                     	;# 
   464  008E                     	;# 
   465  0092                     	;# 
   466  0098                     	;# 
   467  0099                     	;# 
   468  009A                     	;# 
   469  009B                     	;# 
   470  009C                     	;# 
   471  009D                     	;# 
   472  009F                     	;# 
   473                           
   474                           	psect	idataBANK0
   475  074D                     __pidataBANK0:
   476                           
   477                           ;initializer for ISR@tmpPORTB
   478  074D  34FF               	retlw	255
   479  000E                     _TMR1	set	14
   480  0003                     _STATUSbits	set	3
   481  0010                     _T1CONbits	set	16
   482  0019                     _TXREG	set	25
   483  0006                     _PORTB	set	6
   484  001A                     _RCREG	set	26
   485  0001                     _TMR0	set	1
   486  0018                     _RCSTAbits	set	24
   487  000C                     _PIR1bits	set	12
   488  000B                     _INTCONbits	set	11
   489  001F                     _CMCONbits	set	31
   490  0006                     _PORTBbits	set	6
   491  0005                     _PORTAbits	set	5
   492  009D                     _EECON2	set	157
   493  009A                     _EEDATA	set	154
   494  009C                     _EECON1	set	156
   495  009B                     _EEADR	set	155
   496  009C                     _EECON1bits	set	156
   497  0099                     _SPBRG	set	153
   498  0098                     _TXSTAbits	set	152
   499  0086                     _TRISB	set	134
   500  0086                     _TRISBbits	set	134
   501  008C                     _PIE1bits	set	140
   502  0081                     _OPTION_REGbits	set	129
   503  0085                     _TRISAbits	set	133
   504                           
   505                           	psect	cinit
   506  0011                     start_initialization:	
   507                           ; #config settings
   508                           
   509  0011                     __initialization:
   510                           
   511                           ; Initialize objects allocated to BANK0
   512  0011  274D               	fcall	__pidataBANK0	;fetch initializer
   513  0012  00DE               	movwf	__pdataBANK0& (0+127)
   514                           
   515                           ; Clear objects allocated to BANK1
   516  0013  1383               	bcf	3,7	;select IRP bank0
   517  0014  30A0               	movlw	low __pbssBANK1
   518  0015  0084               	movwf	4
   519  0016  30DA               	movlw	low (__pbssBANK1+58)
   520  0017  2722               	fcall	clear_ram0
   521                           
   522                           ; Clear objects allocated to BANK0
   523  0018  304E               	movlw	low __pbssBANK0
   524  0019  0084               	movwf	4
   525  001A  305E               	movlw	low (__pbssBANK0+16)
   526  001B  2722               	fcall	clear_ram0
   527  001C                     end_of_initialization:	
   528                           ;End of C runtime variable initialization code
   529                           
   530  001C                     __end_of__initialization:
   531  001C  0183               	clrf	3
   532  001D  28E0               	ljmp	_main	;jump to C main() function
   533                           
   534                           	psect	bssBANK0
   535  004E                     __pbssBANK0:
   536  004E                     _last_cmd_rcv:
   537  004E                     	ds	2
   538  0050                     znp_frame_parser@rcv_index:
   539  0050                     	ds	1
   540  0051                     znp_frame_parser@znp_fcs:
   541  0051                     	ds	1
   542  0052                     _znp_state:
   543  0052                     	ds	1
   544  0053                     __zb_znp_cb:
   545  0053                     	ds	1
   546  0054                     _led_blink_handle:
   547  0054                     	ds	1
   548  0055                     __ioc_rb5_isr:
   549  0055                     	ds	1
   550  0056                     __ioc_rb4_isr:
   551  0056                     	ds	1
   552  0057                     __ex_int_isr:
   553  0057                     	ds	1
   554  0058                     __tmr2_isr:
   555  0058                     	ds	1
   556  0059                     __tmr1_isr:
   557  0059                     	ds	1
   558  005A                     __usart_rx_isr:
   559  005A                     	ds	1
   560  005B                     _uxBits:
   561  005B                     	ds	1
   562  005C                     _relay_data:
   563  005C                     	ds	2
   564                           
   565                           	psect	dataBANK0
   566  005E                     __pdataBANK0:
   567  005E                     ISR@tmpPORTB:
   568  005E                     	ds	1
   569                           
   570                           	psect	bssBANK1
   571  00A0                     __pbssBANK1:
   572  00A0                     __sys_tick:
   573  00A0                     	ds	25
   574  00B9                     _znp_recv_msg:
   575  00B9                     	ds	33
   576                           
   577                           	psect	clrtext
   578  0722                     clear_ram0:	
   579                           ;	Called with FSR containing the base address, and
   580                           ;	W with the last address+1
   581                           
   582  0722  0064               	clrwdt	;clear the watchdog before getting into this loop
   583  0723                     clrloop0:
   584  0723  0180               	clrf	0	;clear RAM location pointed to by FSR
   585  0724  0A84               	incf	4,f	;increment pointer
   586  0725  0604               	xorwf	4,w	;XOR with final address
   587  0726  1903               	btfsc	3,2	;have we reached the end yet?
   588  0727  3400               	retlw	0	;all done for this memory range, return
   589  0728  0604               	xorwf	4,w	;XOR again to restore value
   590  0729  2F23               	goto	clrloop0	;do the next byte
   591                           
   592                           	psect	cstackCOMMON
   593  0070                     __pcstackCOMMON:
   594  0070                     ?_xEventGroupClearBits:
   595  0070                     ?_xEventGroupSetBits:	
   596                           ; 1 bytes @ 0x0
   597                           
   598  0070                     ??_xEventGroupSetBits:	
   599                           ; 1 bytes @ 0x0
   600                           
   601  0070                     ?_ioc_rb5_add_isr_handler:	
   602                           ; 1 bytes @ 0x0
   603                           
   604  0070                     ?_ioc_rb4_add_isr_handler:	
   605                           ; 1 bytes @ 0x0
   606                           
   607  0070                     ?_ex_int_add_isr_handler:	
   608                           ; 1 bytes @ 0x0
   609                           
   610  0070                     ?_sys_tick_init:	
   611                           ; 1 bytes @ 0x0
   612                           
   613  0070                     ?_xEventGroupCreate:	
   614                           ; 1 bytes @ 0x0
   615                           
   616  0070                     ?_led_ind_init:	
   617                           ; 1 bytes @ 0x0
   618                           
   619  0070                     ?_led_ind_blink_start:	
   620                           ; 1 bytes @ 0x0
   621                           
   622  0070                     ?_znp_init:	
   623                           ; 1 bytes @ 0x0
   624                           
   625  0070                     ?_eeprom_read:	
   626                           ; 1 bytes @ 0x0
   627                           
   628  0070                     ?_znp_router_start:	
   629                           ; 1 bytes @ 0x0
   630                           
   631  0070                     ?_led_ind_blink_stop:	
   632                           ; 1 bytes @ 0x0
   633                           
   634  0070                     ?_xEventGroupGetBits:	
   635                           ; 1 bytes @ 0x0
   636                           
   637  0070                     ?_led_ind_on:	
   638                           ; 1 bytes @ 0x0
   639                           
   640  0070                     ?_led_ind_off:	
   641                           ; 1 bytes @ 0x0
   642                           
   643  0070                     ?_led_ind_toggle:	
   644                           ; 1 bytes @ 0x0
   645                           
   646  0070                     ??_led_ind_toggle:	
   647                           ; 1 bytes @ 0x0
   648                           
   649  0070                     ?_sys_tick_register_callback_handler:	
   650                           ; 1 bytes @ 0x0
   651                           
   652  0070                     ?_sys_tick_stop:	
   653                           ; 1 bytes @ 0x0
   654                           
   655  0070                     ?_znp_hard_reset:	
   656                           ; 1 bytes @ 0x0
   657                           
   658  0070                     ?_relay_init:	
   659                           ; 1 bytes @ 0x0
   660                           
   661  0070                     ?_button1_handler:	
   662                           ; 1 bytes @ 0x0
   663                           
   664  0070                     ?_button2_handler:	
   665                           ; 1 bytes @ 0x0
   666                           
   667  0070                     ?_button3_handler:	
   668                           ; 1 bytes @ 0x0
   669                           
   670  0070                     ?_button_init:	
   671                           ; 1 bytes @ 0x0
   672                           
   673  0070                     ?_main:	
   674                           ; 1 bytes @ 0x0
   675                           
   676  0070                     ?_usart_add_isr_handler:	
   677                           ; 1 bytes @ 0x0
   678                           
   679  0070                     ?_timer1_add_isr_handler:	
   680                           ; 1 bytes @ 0x0
   681                           
   682  0070                     ?_ISR:	
   683                           ; 1 bytes @ 0x0
   684                           
   685  0070                     ?__blink_handler:	
   686                           ; 1 bytes @ 0x0
   687                           
   688  0070                     ?_usart_init:	
   689                           ; 1 bytes @ 0x0
   690                           
   691  0070                     ?_usart_send:	
   692                           ; 1 bytes @ 0x0
   693                           
   694  0070                     ?_znp_frame_parser:	
   695                           ; 1 bytes @ 0x0
   696                           
   697  0070                     ?_znp_set_startopt:	
   698                           ; 1 bytes @ 0x0
   699                           
   700  0070                     ?_znp_set_logical_type:	
   701                           ; 1 bytes @ 0x0
   702                           
   703  0070                     ?_znp_set_channels:	
   704                           ; 1 bytes @ 0x0
   705                           
   706  0070                     ?_znp_af_register:	
   707                           ; 1 bytes @ 0x0
   708                           
   709  0070                     ?_znp_zdo_startup_from_app:	
   710                           ; 1 bytes @ 0x0
   711                           
   712  0070                     ?_sys_tick_handler:	
   713                           ; 1 bytes @ 0x0
   714                           
   715  0070                     ?i1___bmul:	
   716                           ; 1 bytes @ 0x0
   717                           
   718  0070                     i1___bmul@multiplicand:	
   719                           ; 1 bytes @ 0x0
   720                           
   721                           
   722                           ; 1 bytes @ 0x0
   723  0070                     	ds	1
   724  0071                     ??__blink_handler:
   725  0071                     ??i1___bmul:	
   726                           ; 1 bytes @ 0x1
   727                           
   728  0071                     xEventGroupSetBits@uxBitsToSet:	
   729                           ; 1 bytes @ 0x1
   730                           
   731                           
   732                           ; 1 bytes @ 0x1
   733  0071                     	ds	1
   734  0072                     ??_button1_handler:
   735  0072                     ??_button2_handler:	
   736                           ; 1 bytes @ 0x2
   737                           
   738  0072                     ??_button3_handler:	
   739                           ; 1 bytes @ 0x2
   740                           
   741  0072                     ?_znp_msg_handler:	
   742                           ; 1 bytes @ 0x2
   743                           
   744  0072                     i1___bmul@product:	
   745                           ; 1 bytes @ 0x2
   746                           
   747  0072                     znp_msg_handler@cmd:	
   748                           ; 1 bytes @ 0x2
   749                           
   750                           
   751                           ; 2 bytes @ 0x2
   752  0072                     	ds	1
   753  0073                     i1___bmul@multiplier:
   754                           
   755                           ; 1 bytes @ 0x3
   756  0073                     	ds	1
   757  0074                     ??_sys_tick_handler:
   758  0074                     znp_msg_handler@data:	
   759                           ; 1 bytes @ 0x4
   760                           
   761                           
   762                           ; 1 bytes @ 0x4
   763  0074                     	ds	1
   764  0075                     znp_msg_handler@len:
   765                           
   766                           ; 1 bytes @ 0x5
   767  0075                     	ds	1
   768  0076                     ??_znp_msg_handler:
   769                           
   770                           ; 1 bytes @ 0x6
   771  0076                     	ds	1
   772  0077                     znp_msg_handler@endpoint:
   773                           
   774                           ; 1 bytes @ 0x7
   775  0077                     	ds	1
   776  0078                     ??_znp_frame_parser:
   777                           
   778                           ; 1 bytes @ 0x8
   779  0078                     	ds	2
   780  007A                     znp_frame_parser@ch:
   781                           
   782                           ; 1 bytes @ 0xA
   783  007A                     	ds	1
   784  007B                     ?_znp_usart_event_handler:
   785  007B                     znp_usart_event_handler@rx_event:	
   786                           ; 1 bytes @ 0xB
   787                           
   788                           
   789                           ; 1 bytes @ 0xB
   790  007B                     	ds	1
   791  007C                     znp_usart_event_handler@event_data:
   792                           
   793                           ; 1 bytes @ 0xC
   794  007C                     	ds	2
   795                           
   796                           	psect	cstackBANK0
   797  0020                     __pcstackBANK0:
   798  0020                     ??_znp_usart_event_handler:
   799  0020                     sys_tick_handler@i:	
   800                           ; 1 bytes @ 0x0
   801                           
   802                           
   803                           ; 1 bytes @ 0x0
   804  0020                     	ds	2
   805  0022                     ??_ISR:
   806                           
   807                           ; 1 bytes @ 0x2
   808  0022                     	ds	5
   809  0027                     ISR@c:
   810                           
   811                           ; 1 bytes @ 0x7
   812  0027                     	ds	1
   813  0028                     ISR@newPORTB:
   814                           
   815                           ; 1 bytes @ 0x8
   816  0028                     	ds	1
   817  0029                     ISR@iocMask:
   818                           
   819                           ; 1 bytes @ 0x9
   820  0029                     	ds	1
   821  002A                     ??_xEventGroupClearBits:
   822  002A                     ??_ioc_rb5_add_isr_handler:	
   823                           ; 1 bytes @ 0xA
   824                           
   825  002A                     ??_ioc_rb4_add_isr_handler:	
   826                           ; 1 bytes @ 0xA
   827                           
   828  002A                     ??_ex_int_add_isr_handler:	
   829                           ; 1 bytes @ 0xA
   830                           
   831  002A                     ?_eeprom_write:	
   832                           ; 1 bytes @ 0xA
   833                           
   834  002A                     ??_xEventGroupCreate:	
   835                           ; 1 bytes @ 0xA
   836                           
   837  002A                     ??_eeprom_read:	
   838                           ; 1 bytes @ 0xA
   839                           
   840  002A                     ??_xEventGroupGetBits:	
   841                           ; 1 bytes @ 0xA
   842                           
   843  002A                     ??_led_ind_on:	
   844                           ; 1 bytes @ 0xA
   845                           
   846  002A                     ??_led_ind_off:	
   847                           ; 1 bytes @ 0xA
   848                           
   849  002A                     ??_usart_add_isr_handler:	
   850                           ; 1 bytes @ 0xA
   851                           
   852  002A                     ??_timer1_add_isr_handler:	
   853                           ; 1 bytes @ 0xA
   854                           
   855  002A                     ??_usart_init:	
   856                           ; 1 bytes @ 0xA
   857                           
   858  002A                     ??_usart_send:	
   859                           ; 1 bytes @ 0xA
   860                           
   861  002A                     ?_wait_for_msg:	
   862                           ; 1 bytes @ 0xA
   863                           
   864  002A                     ?___bmul:	
   865                           ; 1 bytes @ 0xA
   866                           
   867  002A                     ?_sys_tick_get_tick:	
   868                           ; 1 bytes @ 0xA
   869                           
   870  002A                     usart_send@c:	
   871                           ; 4 bytes @ 0xA
   872                           
   873  002A                     eeprom_write@value:	
   874                           ; 1 bytes @ 0xA
   875                           
   876  002A                     ___bmul@multiplicand:	
   877                           ; 1 bytes @ 0xA
   878                           
   879  002A                     wait_for_msg@cmd:	
   880                           ; 1 bytes @ 0xA
   881                           
   882                           
   883                           ; 2 bytes @ 0xA
   884  002A                     	ds	1
   885  002B                     ??_eeprom_write:
   886  002B                     ??___bmul:	
   887                           ; 1 bytes @ 0xB
   888                           
   889  002B                     usart_add_isr_handler@handler:	
   890                           ; 1 bytes @ 0xB
   891                           
   892  002B                     timer1_add_isr_handler@handler:	
   893                           ; 1 bytes @ 0xB
   894                           
   895  002B                     ex_int_add_isr_handler@handler:	
   896                           ; 1 bytes @ 0xB
   897                           
   898  002B                     ioc_rb4_add_isr_handler@handler:	
   899                           ; 1 bytes @ 0xB
   900                           
   901  002B                     ioc_rb5_add_isr_handler@handler:	
   902                           ; 1 bytes @ 0xB
   903                           
   904  002B                     xEventGroupClearBits@uxBitsToClear:	
   905                           ; 1 bytes @ 0xB
   906                           
   907  002B                     eeprom_read@addr:	
   908                           ; 1 bytes @ 0xB
   909                           
   910                           
   911                           ; 1 bytes @ 0xB
   912  002B                     	ds	1
   913  002C                     ??_sys_tick_init:
   914  002C                     ??_znp_init:	
   915                           ; 1 bytes @ 0xC
   916                           
   917  002C                     ??_znp_hard_reset:	
   918                           ; 1 bytes @ 0xC
   919                           
   920  002C                     ??_relay_init:	
   921                           ; 1 bytes @ 0xC
   922                           
   923  002C                     ??_button_init:	
   924                           ; 1 bytes @ 0xC
   925                           
   926  002C                     ??_wait_for_msg:	
   927                           ; 1 bytes @ 0xC
   928                           
   929  002C                     ?_wait_for_status:	
   930                           ; 1 bytes @ 0xC
   931                           
   932  002C                     ??_znp_zdo_startup_from_app:	
   933                           ; 1 bytes @ 0xC
   934                           
   935  002C                     eeprom_write@addr:	
   936                           ; 1 bytes @ 0xC
   937                           
   938  002C                     ___bmul@product:	
   939                           ; 1 bytes @ 0xC
   940                           
   941  002C                     wait_for_status@cmd:	
   942                           ; 1 bytes @ 0xC
   943                           
   944                           
   945                           ; 2 bytes @ 0xC
   946  002C                     	ds	1
   947  002D                     znp_init@callback:
   948  002D                     ___bmul@multiplier:	
   949                           ; 1 bytes @ 0xD
   950                           
   951                           
   952                           ; 1 bytes @ 0xD
   953  002D                     	ds	1
   954  002E                     ?_xEventGroupWaitBits:
   955  002E                     ??_sys_tick_get_tick:	
   956                           ; 1 bytes @ 0xE
   957                           
   958  002E                     ??_sys_tick_register_callback_handler:	
   959                           ; 1 bytes @ 0xE
   960                           
   961  002E                     ?_sys_tick_start_periodic:	
   962                           ; 1 bytes @ 0xE
   963                           
   964  002E                     ??_sys_tick_stop:	
   965                           ; 1 bytes @ 0xE
   966                           
   967  002E                     wait_for_status@offset:	
   968                           ; 1 bytes @ 0xE
   969                           
   970  002E                     xEventGroupWaitBits@ticks_to_wait:	
   971                           ; 1 bytes @ 0xE
   972                           
   973  002E                     sys_tick_start_periodic@tick:	
   974                           ; 4 bytes @ 0xE
   975                           
   976                           
   977                           ; 4 bytes @ 0xE
   978  002E                     	ds	1
   979  002F                     wait_for_status@status_to_wait:
   980                           
   981                           ; 1 bytes @ 0xF
   982  002F                     	ds	1
   983  0030                     ?_znp_af_data_request:
   984  0030                     ??_wait_for_status:	
   985                           ; 1 bytes @ 0x10
   986                           
   987  0030                     ??_znp_set_startopt:	
   988                           ; 1 bytes @ 0x10
   989                           
   990  0030                     ??_znp_set_logical_type:	
   991                           ; 1 bytes @ 0x10
   992                           
   993  0030                     ??_znp_set_channels:	
   994                           ; 1 bytes @ 0x10
   995                           
   996  0030                     ??_znp_af_register:	
   997                           ; 1 bytes @ 0x10
   998                           
   999  0030                     znp_set_startopt@startopt:	
  1000                           ; 1 bytes @ 0x10
  1001                           
  1002  0030                     znp_af_register@endpoint:	
  1003                           ; 1 bytes @ 0x10
  1004                           
  1005  0030                     sys_tick_register_callback_handler@cb:	
  1006                           ; 1 bytes @ 0x10
  1007                           
  1008  0030                     sys_tick_stop@handle:	
  1009                           ; 1 bytes @ 0x10
  1010                           
  1011  0030                     znp_af_data_request@dst_addr:	
  1012                           ; 1 bytes @ 0x10
  1013                           
  1014                           
  1015                           ; 2 bytes @ 0x10
  1016  0030                     	ds	1
  1017  0031                     ??_znp_router_start:
  1018  0031                     sys_tick_register_callback_handler@_handler_index:	
  1019                           ; 1 bytes @ 0x11
  1020                           
  1021  0031                     sys_tick_stop@i:	
  1022                           ; 1 bytes @ 0x11
  1023                           
  1024                           
  1025                           ; 1 bytes @ 0x11
  1026  0031                     	ds	1
  1027  0032                     ??_led_ind_init:
  1028  0032                     ??_xEventGroupWaitBits:	
  1029                           ; 1 bytes @ 0x12
  1030                           
  1031  0032                     ??_led_ind_blink_stop:	
  1032                           ; 1 bytes @ 0x12
  1033                           
  1034  0032                     ??_sys_tick_start_periodic:	
  1035                           ; 1 bytes @ 0x12
  1036                           
  1037  0032                     znp_af_data_request@endpoint:	
  1038                           ; 1 bytes @ 0x12
  1039                           
  1040                           
  1041                           ; 1 bytes @ 0x12
  1042  0032                     	ds	1
  1043  0033                     znp_router_start@start_opt:
  1044  0033                     znp_af_data_request@cluster_id:	
  1045                           ; 1 bytes @ 0x13
  1046                           
  1047                           
  1048                           ; 2 bytes @ 0x13
  1049  0033                     	ds	1
  1050  0034                     sys_tick_start_periodic@handle:
  1051                           
  1052                           ; 1 bytes @ 0x14
  1053  0034                     	ds	1
  1054  0035                     znp_af_data_request@data:
  1055  0035                     sys_tick_start_periodic@i:	
  1056                           ; 1 bytes @ 0x15
  1057                           
  1058                           
  1059                           ; 1 bytes @ 0x15
  1060  0035                     	ds	1
  1061  0036                     ??_led_ind_blink_start:
  1062  0036                     znp_af_data_request@len:	
  1063                           ; 1 bytes @ 0x16
  1064                           
  1065  0036                     xEventGroupWaitBits@last_tick:	
  1066                           ; 1 bytes @ 0x16
  1067                           
  1068                           
  1069                           ; 4 bytes @ 0x16
  1070  0036                     	ds	1
  1071  0037                     znp_af_data_request@wait_for_rsps:
  1072                           
  1073                           ; 1 bytes @ 0x17
  1074  0037                     	ds	1
  1075  0038                     ??_znp_af_data_request:
  1076                           
  1077                           ; 1 bytes @ 0x18
  1078  0038                     	ds	2
  1079  003A                     znp_af_data_request@fcs_calc:
  1080  003A                     xEventGroupWaitBits@uxBitsToWaitFor:	
  1081                           ; 1 bytes @ 0x1A
  1082                           
  1083                           
  1084                           ; 1 bytes @ 0x1A
  1085  003A                     	ds	1
  1086  003B                     znp_af_data_request@i:
  1087                           
  1088                           ; 1 bytes @ 0x1B
  1089  003B                     	ds	1
  1090  003C                     ?_znp_send_msg:
  1091  003C                     znp_send_msg@dst_addr:	
  1092                           ; 1 bytes @ 0x1C
  1093                           
  1094                           
  1095                           ; 2 bytes @ 0x1C
  1096  003C                     	ds	2
  1097  003E                     znp_send_msg@endpoint:
  1098                           
  1099                           ; 1 bytes @ 0x1E
  1100  003E                     	ds	1
  1101  003F                     znp_send_msg@wait_for_rsps:
  1102                           
  1103                           ; 1 bytes @ 0x1F
  1104  003F                     	ds	1
  1105  0040                     ??_znp_send_msg:
  1106                           
  1107                           ; 1 bytes @ 0x20
  1108  0040                     	ds	4
  1109  0044                     znp_send_msg@data:
  1110                           
  1111                           ; 1 bytes @ 0x24
  1112  0044                     	ds	1
  1113  0045                     znp_send_msg@len:
  1114                           
  1115                           ; 1 bytes @ 0x25
  1116  0045                     	ds	1
  1117  0046                     ??_main:
  1118                           
  1119                           ; 1 bytes @ 0x26
  1120  0046                     	ds	4
  1121  004A                     main@keepalive_tick:
  1122                           
  1123                           ; 4 bytes @ 0x2A
  1124  004A                     	ds	4
  1125                           
  1126                           	psect	maintext
  1127  00E0                     __pmaintext:	
  1128 ;;
  1129 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  1130 ;;
  1131 ;; *************** function _main *****************
  1132 ;; Defined at:
  1133 ;;		line 148 in file "main.c"
  1134 ;; Parameters:    Size  Location     Type
  1135 ;;		None
  1136 ;; Auto vars:     Size  Location     Type
  1137 ;;  keepalive_ti    4   42[BANK0 ] unsigned long 
  1138 ;; Return value:  Size  Location     Type
  1139 ;;                  1    wreg      void 
  1140 ;; Registers used:
  1141 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1142 ;; Tracked objects:
  1143 ;;		On entry : B00/0
  1144 ;;		On exit  : 300/0
  1145 ;;		Unchanged: 0/0
  1146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1147 ;;      Params:         0       0       0       0
  1148 ;;      Locals:         0       4       0       0
  1149 ;;      Temps:          0       4       0       0
  1150 ;;      Totals:         0       8       0       0
  1151 ;;Total ram usage:        8 bytes
  1152 ;; Hardware stack levels required when called: 9
  1153 ;; This function calls:
  1154 ;;		_button_init
  1155 ;;		_eeprom_read
  1156 ;;		_eeprom_write
  1157 ;;		_led_ind_blink_start
  1158 ;;		_led_ind_blink_stop
  1159 ;;		_led_ind_init
  1160 ;;		_led_ind_off
  1161 ;;		_led_ind_on
  1162 ;;		_relay_init
  1163 ;;		_sys_tick_get_tick
  1164 ;;		_sys_tick_init
  1165 ;;		_xEventGroupClearBits
  1166 ;;		_xEventGroupCreate
  1167 ;;		_xEventGroupGetBits
  1168 ;;		_xEventGroupWaitBits
  1169 ;;		_znp_init
  1170 ;;		_znp_router_start
  1171 ;;		_znp_send_msg
  1172 ;; This function is called by:
  1173 ;;		Startup code after reset
  1174 ;; This function uses a non-reentrant model
  1175 ;;
  1176                           
  1177  00E0                     _main:	
  1178                           ;psect for function _main
  1179                           
  1180                           
  1181                           ;main.c: 149:     CMCONbits.CM = 0b111;
  1182                           
  1183                           ;incstack = 0
  1184 ;; hardware stack exceeded
  1185                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1186  00E0  3007               	movlw	7
  1187  00E1  049F               	iorwf	31,f	;volatile
  1188                           
  1189                           ;main.c: 150:     INTCONbits.GIE = 1;
  1190  00E2  178B               	bsf	11,7	;volatile
  1191                           
  1192                           ;main.c: 151:     INTCONbits.PEIE = 1;
  1193  00E3  170B               	bsf	11,6	;volatile
  1194                           
  1195                           ;main.c: 152:     OPTION_REGbits.nRBPU = 0;
  1196  00E4  1683               	bsf	3,5	;RP0=1, select bank1
  1197  00E5  1381               	bcf	1,7	;volatile
  1198                           
  1199                           ;main.c: 154:     if (!PORTBbits.RB7) eeprom_write(0, 0x00);
  1200  00E6  1283               	bcf	3,5	;RP0=0, select bank0
  1201  00E7  1B86               	btfsc	6,7	;volatile
  1202  00E8  28EC               	goto	l2313
  1203  00E9  01AA               	clrf	eeprom_write@value
  1204  00EA  3000               	movlw	0
  1205  00EB  2541               	fcall	_eeprom_write
  1206  00EC                     l2313:
  1207                           
  1208                           ;main.c: 156:     relay_data.raw[1] |= 0xE0;
  1209  00EC  30E0               	movlw	224
  1210  00ED  1283               	bcf	3,5	;RP0=0, select bank0
  1211  00EE  00C6               	movwf	??_main
  1212  00EF  0846               	movf	??_main,w
  1213  00F0  04DD               	iorwf	_relay_data+1,f
  1214                           
  1215                           ;main.c: 158:     sys_tick_init();
  1216  00F1  25B7               	fcall	_sys_tick_init
  1217                           
  1218                           ;main.c: 159:     xEventGroupCreate();
  1219  00F2  2746               	fcall	_xEventGroupCreate
  1220                           
  1221                           ;main.c: 160:     _delay((unsigned long)((100)*(4000000/4000.0)));
  1222  00F3  3082               	movlw	130
  1223  00F4  1283               	bcf	3,5	;RP0=0, select bank0
  1224  00F5  1303               	bcf	3,6	;RP1=0, select bank0
  1225  00F6  00C7               	movwf	??_main+1
  1226  00F7  30DD               	movlw	221
  1227  00F8  00C6               	movwf	??_main
  1228  00F9                     u1317:
  1229  00F9  0BC6               	decfsz	??_main,f
  1230  00FA  28F9               	goto	u1317
  1231  00FB  0BC7               	decfsz	??_main+1,f
  1232  00FC  28F9               	goto	u1317
  1233  00FD  0000               	nop
  1234                           
  1235                           ;main.c: 162:     led_ind_init();
  1236  00FE  270F               	fcall	_led_ind_init
  1237                           
  1238                           ;main.c: 163:     relay_init();
  1239  00FF  2661               	fcall	_relay_init
  1240                           
  1241                           ;main.c: 164:     button_init();
  1242  0100  2719               	fcall	_button_init
  1243                           
  1244                           ;main.c: 166:     led_ind_blink_start();
  1245  0101  26DA               	fcall	_led_ind_blink_start
  1246                           
  1247                           ;main.c: 167:     znp_init(znp_msg_handler);
  1248  0102  3006               	movlw	(low (fp__znp_msg_handler-i1fpbase))& (0+255)
  1249  0103  26AA               	fcall	_znp_init
  1250  0104                     l2331:
  1251                           
  1252                           ;main.c: 169:         if (eeprom_read(0) == 0xFE)
  1253  0104  3000               	movlw	0
  1254  0105  25E5               	fcall	_eeprom_read
  1255  0106  3AFE               	xorlw	254
  1256  0107  1D03               	skipz
  1257  0108  290B               	goto	l2335
  1258                           
  1259                           ;main.c: 170:             znp_router_start(ROUTER_START_REJOIN);
  1260  0109  3001               	movlw	1
  1261  010A  290C               	goto	L1
  1262  010B                     l2335:
  1263  010B  3000               	movlw	0
  1264  010C                     L1:
  1265  010C  251E               	fcall	_znp_router_start
  1266                           
  1267                           ;main.c: 173:         uxBits = xEventGroupWaitBits((1 << 0), 100);
  1268  010D  3000               	movlw	0
  1269  010E  00B1               	movwf	xEventGroupWaitBits@ticks_to_wait+3
  1270  010F  3000               	movlw	0
  1271  0110  00B0               	movwf	xEventGroupWaitBits@ticks_to_wait+2
  1272  0111  3000               	movlw	0
  1273  0112  00AF               	movwf	xEventGroupWaitBits@ticks_to_wait+1
  1274  0113  3064               	movlw	100
  1275  0114  00AE               	movwf	xEventGroupWaitBits@ticks_to_wait
  1276  0115  3001               	movlw	1
  1277  0116  2417               	fcall	_xEventGroupWaitBits
  1278  0117  00C6               	movwf	??_main
  1279  0118  0846               	movf	??_main,w
  1280  0119  00DB               	movwf	_uxBits
  1281                           
  1282                           ;main.c: 174:     } while (!(uxBits & (1 << 0)));
  1283  011A  1C5B               	btfss	_uxBits,0
  1284  011B  2904               	goto	l2331
  1285                           
  1286                           ;main.c: 176:     eeprom_write(0, 0xFE);
  1287  011C  30FE               	movlw	254
  1288  011D  00C6               	movwf	??_main
  1289  011E  0846               	movf	??_main,w
  1290  011F  00AA               	movwf	eeprom_write@value
  1291  0120  3000               	movlw	0
  1292  0121  2541               	fcall	_eeprom_write
  1293                           
  1294                           ;main.c: 177:     znp_send_msg(0x0000, 0x01, 1);
  1295  0122  3000               	movlw	0
  1296  0123  1283               	bcf	3,5	;RP0=0, select bank0
  1297  0124  00BC               	movwf	znp_send_msg@dst_addr
  1298  0125  00BD               	movwf	znp_send_msg@dst_addr+1
  1299  0126  01BE               	clrf	znp_send_msg@endpoint
  1300  0127  0ABE               	incf	znp_send_msg@endpoint,f
  1301  0128  01BF               	clrf	znp_send_msg@wait_for_rsps
  1302  0129  0ABF               	incf	znp_send_msg@wait_for_rsps,f
  1303  012A  2458               	fcall	_znp_send_msg
  1304                           
  1305                           ;main.c: 178:     led_ind_blink_stop();
  1306  012B  273E               	fcall	_led_ind_blink_stop
  1307                           
  1308                           ;main.c: 180:     sys_tick_t keepalive_tick = sys_tick_get_tick();
  1309  012C  260C               	fcall	_sys_tick_get_tick
  1310  012D  082D               	movf	?_sys_tick_get_tick+3,w
  1311  012E  00CD               	movwf	main@keepalive_tick+3
  1312  012F  082C               	movf	?_sys_tick_get_tick+2,w
  1313  0130  00CC               	movwf	main@keepalive_tick+2
  1314  0131  082B               	movf	?_sys_tick_get_tick+1,w
  1315  0132  00CB               	movwf	main@keepalive_tick+1
  1316  0133  082A               	movf	?_sys_tick_get_tick,w
  1317  0134  00CA               	movwf	main@keepalive_tick
  1318  0135                     l2347:
  1319                           
  1320                           ;main.c: 183:         uxBits = xEventGroupGetBits();
  1321  0135  273A               	fcall	_xEventGroupGetBits
  1322  0136  00C6               	movwf	??_main
  1323  0137  0846               	movf	??_main,w
  1324  0138  00DB               	movwf	_uxBits
  1325                           
  1326                           ;main.c: 184:         if (uxBits & (1 << 1)) {
  1327  0139  1CDB               	btfss	_uxBits,1
  1328  013A  2947               	goto	l2355
  1329                           
  1330                           ;main.c: 185:             znp_send_msg(0x0000, 0x02, 1);
  1331  013B  3000               	movlw	0
  1332  013C  00BC               	movwf	znp_send_msg@dst_addr
  1333  013D  00BD               	movwf	znp_send_msg@dst_addr+1
  1334  013E  3002               	movlw	2
  1335  013F  00C6               	movwf	??_main
  1336  0140  0846               	movf	??_main,w
  1337  0141  00BE               	movwf	znp_send_msg@endpoint
  1338  0142  01BF               	clrf	znp_send_msg@wait_for_rsps
  1339  0143  0ABF               	incf	znp_send_msg@wait_for_rsps,f
  1340  0144  2458               	fcall	_znp_send_msg
  1341                           
  1342                           ;main.c: 186:             xEventGroupClearBits((1 << 1));
  1343  0145  3002               	movlw	2
  1344  0146  2705               	fcall	_xEventGroupClearBits
  1345  0147                     l2355:
  1346                           
  1347                           ;main.c: 189:         if (sys_tick_get_tick() - keepalive_tick >= 20) {
  1348  0147  260C               	fcall	_sys_tick_get_tick
  1349  0148  082A               	movf	?_sys_tick_get_tick,w
  1350  0149  00C6               	movwf	??_main
  1351  014A  082B               	movf	?_sys_tick_get_tick+1,w
  1352  014B  00C7               	movwf	??_main+1
  1353  014C  082C               	movf	?_sys_tick_get_tick+2,w
  1354  014D  00C8               	movwf	??_main+2
  1355  014E  082D               	movf	?_sys_tick_get_tick+3,w
  1356  014F  00C9               	movwf	??_main+3
  1357  0150  084A               	movf	main@keepalive_tick,w
  1358  0151  02C6               	subwf	??_main,f
  1359  0152  084B               	movf	main@keepalive_tick+1,w
  1360  0153  1C03               	skipc
  1361  0154  0F4B               	incfsz	main@keepalive_tick+1,w
  1362  0155  2957               	goto	u1141
  1363  0156  2958               	goto	u1142
  1364  0157                     u1141:
  1365  0157  02C7               	subwf	??_main+1,f
  1366  0158                     u1142:
  1367  0158  084C               	movf	main@keepalive_tick+2,w
  1368  0159  1C03               	skipc
  1369  015A  0F4C               	incfsz	main@keepalive_tick+2,w
  1370  015B  295D               	goto	u1143
  1371  015C  295E               	goto	u1144
  1372  015D                     u1143:
  1373  015D  02C8               	subwf	??_main+2,f
  1374  015E                     u1144:
  1375  015E  084D               	movf	main@keepalive_tick+3,w
  1376  015F  1C03               	skipc
  1377  0160  0F4D               	incfsz	main@keepalive_tick+3,w
  1378  0161  2963               	goto	u1145
  1379  0162  2964               	goto	u1146
  1380  0163                     u1145:
  1381  0163  02C9               	subwf	??_main+3,f
  1382  0164                     u1146:
  1383  0164  0849               	movf	??_main+3,w
  1384  0165  1D03               	btfss	3,2
  1385  0166  2973               	goto	l2357
  1386  0167  0848               	movf	??_main+2,w
  1387  0168  1D03               	btfss	3,2
  1388  0169  2973               	goto	l2357
  1389  016A  0847               	movf	??_main+1,w
  1390  016B  1D03               	btfss	3,2
  1391  016C  2973               	goto	l2357
  1392  016D  3014               	movlw	20
  1393  016E  0246               	subwf	??_main,w
  1394  016F  1D03               	skipz
  1395  0170  2971               	goto	u1153
  1396  0171                     u1153:
  1397  0171  1C03               	btfss	3,0
  1398  0172  2935               	goto	l2347
  1399  0173                     l2357:
  1400                           
  1401                           ;main.c: 190:             keepalive_tick = sys_tick_get_tick();
  1402  0173  260C               	fcall	_sys_tick_get_tick
  1403  0174  082D               	movf	?_sys_tick_get_tick+3,w
  1404  0175  00CD               	movwf	main@keepalive_tick+3
  1405  0176  082C               	movf	?_sys_tick_get_tick+2,w
  1406  0177  00CC               	movwf	main@keepalive_tick+2
  1407  0178  082B               	movf	?_sys_tick_get_tick+1,w
  1408  0179  00CB               	movwf	main@keepalive_tick+1
  1409  017A  082A               	movf	?_sys_tick_get_tick,w
  1410  017B  00CA               	movwf	main@keepalive_tick
  1411                           
  1412                           ;main.c: 191:             znp_send_msg(0x0000, 0x04, 0);
  1413  017C  3000               	movlw	0
  1414  017D  00BC               	movwf	znp_send_msg@dst_addr
  1415  017E  00BD               	movwf	znp_send_msg@dst_addr+1
  1416  017F  3004               	movlw	4
  1417  0180  00C6               	movwf	??_main
  1418  0181  0846               	movf	??_main,w
  1419  0182  00BE               	movwf	znp_send_msg@endpoint
  1420  0183  01BF               	clrf	znp_send_msg@wait_for_rsps
  1421  0184  2458               	fcall	_znp_send_msg
  1422                           
  1423                           ;main.c: 192:             led_ind_on();
  1424  0185  2749               	fcall	_led_ind_on
  1425                           
  1426                           ;main.c: 193:             _delay((unsigned long)((10)*(4000000/4000.0)));
  1427  0186  300D               	movlw	13
  1428  0187  1283               	bcf	3,5	;RP0=0, select bank0
  1429  0188  1303               	bcf	3,6	;RP1=0, select bank0
  1430  0189  00C7               	movwf	??_main+1
  1431  018A  30FB               	movlw	251
  1432  018B  00C6               	movwf	??_main
  1433  018C                     u1327:
  1434  018C  0BC6               	decfsz	??_main,f
  1435  018D  298C               	goto	u1327
  1436  018E  0BC7               	decfsz	??_main+1,f
  1437  018F  298C               	goto	u1327
  1438  0190  0000               	nop
  1439                           
  1440                           ;main.c: 194:             led_ind_off();
  1441  0191  2742               	fcall	_led_ind_off
  1442  0192  2935               	goto	l2347
  1443  0193                     __end_of_main:
  1444                           
  1445                           	psect	text1
  1446  0458                     __ptext1:	
  1447 ;; *************** function _znp_send_msg *****************
  1448 ;; Defined at:
  1449 ;;		line 129 in file "main.c"
  1450 ;; Parameters:    Size  Location     Type
  1451 ;;  dst_addr        2   28[BANK0 ] unsigned int 
  1452 ;;  endpoint        1   30[BANK0 ] unsigned char 
  1453 ;;  wait_for_rsp    1   31[BANK0 ] _Bool 
  1454 ;; Auto vars:     Size  Location     Type
  1455 ;;  len             1   37[BANK0 ] unsigned char 
  1456 ;;  data            1   36[BANK0 ] PTR unsigned char 
  1457 ;;		 -> NULL(0), relay_data(2), 
  1458 ;; Return value:  Size  Location     Type
  1459 ;;                  1    wreg      void 
  1460 ;; Registers used:
  1461 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1462 ;; Tracked objects:
  1463 ;;		On entry : 300/0
  1464 ;;		On exit  : 300/0
  1465 ;;		Unchanged: 0/0
  1466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1467 ;;      Params:         0       4       0       0
  1468 ;;      Locals:         0       2       0       0
  1469 ;;      Temps:          0       4       0       0
  1470 ;;      Totals:         0      10       0       0
  1471 ;;Total ram usage:       10 bytes
  1472 ;; Hardware stack levels used: 1
  1473 ;; Hardware stack levels required when called: 8
  1474 ;; This function calls:
  1475 ;;		_znp_af_data_request
  1476 ;; This function is called by:
  1477 ;;		_main
  1478 ;; This function uses a non-reentrant model
  1479 ;;
  1480                           
  1481  0458                     _znp_send_msg:	
  1482                           ;psect for function _znp_send_msg
  1483                           
  1484                           
  1485                           ;main.c: 130:     uint8_t* data = (0);
  1486                           
  1487                           ;incstack = 0
  1488 ;; hardware stack exceeded
  1489                           ; Regs used in _znp_send_msg: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1490  0458  01C4               	clrf	znp_send_msg@data
  1491                           
  1492                           ;main.c: 131:     uint8_t len = 0;
  1493  0459  01C5               	clrf	znp_send_msg@len
  1494                           
  1495                           ;main.c: 132:     if (endpoint == 0x02) {
  1496  045A  3002               	movlw	2
  1497  045B  063E               	xorwf	znp_send_msg@endpoint,w
  1498  045C  1D03               	btfss	3,2
  1499  045D  2C7E               	goto	l2171
  1500                           
  1501                           ;main.c: 133:         relay_data.relay1 = !PORTAbits.RA7;
  1502  045E  1003               	clrc
  1503  045F  1F85               	btfss	5,7	;volatile
  1504  0460  1403               	setc
  1505  0461  105D               	bcf	_relay_data+1,0
  1506  0462  1803               	btfsc	3,0
  1507  0463  145D               	bsf	_relay_data+1,0
  1508                           
  1509                           ;main.c: 134:         relay_data.relay2 = !PORTAbits.RA0;
  1510  0464  1003               	clrc
  1511  0465  1283               	bcf	3,5	;RP0=0, select bank0
  1512  0466  1303               	bcf	3,6	;RP1=0, select bank0
  1513  0467  1C05               	btfss	5,0	;volatile
  1514  0468  1403               	setc
  1515  0469  10DD               	bcf	_relay_data+1,1
  1516  046A  1803               	btfsc	3,0
  1517  046B  14DD               	bsf	_relay_data+1,1
  1518                           
  1519                           ;main.c: 135:         relay_data.relay3 = !PORTAbits.RA1;
  1520  046C  1003               	clrc
  1521  046D  1283               	bcf	3,5	;RP0=0, select bank0
  1522  046E  1303               	bcf	3,6	;RP1=0, select bank0
  1523  046F  1C85               	btfss	5,1	;volatile
  1524  0470  1403               	setc
  1525  0471  115D               	bcf	_relay_data+1,2
  1526  0472  1803               	btfsc	3,0
  1527  0473  155D               	bsf	_relay_data+1,2
  1528                           
  1529                           ;main.c: 136:         data = relay_data.raw;
  1530  0474  305C               	movlw	(low (_relay_data| 0))& (0+255)
  1531  0475  1283               	bcf	3,5	;RP0=0, select bank0
  1532  0476  1303               	bcf	3,6	;RP1=0, select bank0
  1533  0477  00C0               	movwf	??_znp_send_msg
  1534  0478  0840               	movf	??_znp_send_msg,w
  1535  0479  00C4               	movwf	znp_send_msg@data
  1536                           
  1537                           ;main.c: 137:         len = sizeof (relay_data.raw);
  1538  047A  3002               	movlw	2
  1539  047B  00C0               	movwf	??_znp_send_msg
  1540  047C  0840               	movf	??_znp_send_msg,w
  1541  047D  00C5               	movwf	znp_send_msg@len
  1542  047E                     l2171:
  1543                           
  1544                           ;main.c: 140:     znp_af_data_request(dst_addr,
  1545  047E  083D               	movf	znp_send_msg@dst_addr+1,w
  1546  047F  00B1               	movwf	znp_af_data_request@dst_addr+1
  1547  0480  083C               	movf	znp_send_msg@dst_addr,w
  1548  0481  00B0               	movwf	znp_af_data_request@dst_addr
  1549  0482  083E               	movf	znp_send_msg@endpoint,w
  1550  0483  00C0               	movwf	??_znp_send_msg
  1551  0484  0840               	movf	??_znp_send_msg,w
  1552  0485  00B2               	movwf	znp_af_data_request@endpoint
  1553  0486  3001               	movlw	1
  1554  0487  00B3               	movwf	znp_af_data_request@cluster_id
  1555  0488  3000               	movlw	0
  1556  0489  00B4               	movwf	znp_af_data_request@cluster_id+1
  1557  048A  0844               	movf	znp_send_msg@data,w
  1558  048B  00C1               	movwf	??_znp_send_msg+1
  1559  048C  0841               	movf	??_znp_send_msg+1,w
  1560  048D  00B5               	movwf	znp_af_data_request@data
  1561  048E  0845               	movf	znp_send_msg@len,w
  1562  048F  00C2               	movwf	??_znp_send_msg+2
  1563  0490  0842               	movf	??_znp_send_msg+2,w
  1564  0491  00B6               	movwf	znp_af_data_request@len
  1565  0492  083F               	movf	znp_send_msg@wait_for_rsps,w
  1566  0493  00C3               	movwf	??_znp_send_msg+3
  1567  0494  0843               	movf	??_znp_send_msg+3,w
  1568  0495  00B7               	movwf	znp_af_data_request@wait_for_rsps
  1569  0496  229E               	fcall	_znp_af_data_request
  1570  0497  0008               	return
  1571  0498                     __end_of_znp_send_msg:
  1572                           
  1573                           	psect	text2
  1574  029E                     __ptext2:	
  1575 ;; *************** function _znp_af_data_request *****************
  1576 ;; Defined at:
  1577 ;;		line 196 in file "zb_znp.c"
  1578 ;; Parameters:    Size  Location     Type
  1579 ;;  dst_addr        2   16[BANK0 ] unsigned int 
  1580 ;;  endpoint        1   18[BANK0 ] unsigned char 
  1581 ;;  cluster_id      2   19[BANK0 ] unsigned int 
  1582 ;;  data            1   21[BANK0 ] PTR unsigned char 
  1583 ;;		 -> NULL(0), relay_data(2), 
  1584 ;;  len             1   22[BANK0 ] unsigned char 
  1585 ;;  wait_for_rsp    1   23[BANK0 ] _Bool 
  1586 ;; Auto vars:     Size  Location     Type
  1587 ;;  i               1   27[BANK0 ] unsigned char 
  1588 ;;  fcs_calc        1   26[BANK0 ] unsigned char 
  1589 ;; Return value:  Size  Location     Type
  1590 ;;                  1    wreg      void 
  1591 ;; Registers used:
  1592 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1593 ;; Tracked objects:
  1594 ;;		On entry : 300/0
  1595 ;;		On exit  : 300/0
  1596 ;;		Unchanged: 0/0
  1597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1598 ;;      Params:         0       8       0       0
  1599 ;;      Locals:         0       2       0       0
  1600 ;;      Temps:          0       2       0       0
  1601 ;;      Totals:         0      12       0       0
  1602 ;;Total ram usage:       12 bytes
  1603 ;; Hardware stack levels used: 1
  1604 ;; Hardware stack levels required when called: 7
  1605 ;; This function calls:
  1606 ;;		_usart_send
  1607 ;;		_wait_for_status
  1608 ;; This function is called by:
  1609 ;;		_znp_send_msg
  1610 ;; This function uses a non-reentrant model
  1611 ;;
  1612                           
  1613  029E                     _znp_af_data_request:	
  1614                           ;psect for function _znp_af_data_request
  1615                           
  1616                           
  1617                           ;zb_znp.c: 196: void znp_af_data_request(uint16_t dst_addr,;zb_znp.c: 197:              
      +                                      uint8_t endpoint,;zb_znp.c: 198:                          uint16_t cluster_i
      +                          d,;zb_znp.c: 199:                          uint8_t* data,;zb_znp.c: 200:                
      +                                    uint8_t len,;zb_znp.c: 201:                          _Bool wait_for_rsps) {;zb
      +                          _znp.c: 202:     uint8_t fcs_calc = 0x2A;
  1618                           
  1619                           ;incstack = 0
  1620 ;; hardware stack exceeded
  1621                           ; Regs used in _znp_af_data_request: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1622  029E  302A               	movlw	42
  1623  029F  00B8               	movwf	??_znp_af_data_request
  1624  02A0  0838               	movf	??_znp_af_data_request,w
  1625  02A1  00BA               	movwf	znp_af_data_request@fcs_calc
  1626                           
  1627                           ;zb_znp.c: 203:     if (data == (0)) len = 0;
  1628  02A2  0835               	movf	znp_af_data_request@data,w
  1629  02A3  1903               	btfsc	3,2
  1630  02A4  01B6               	clrf	znp_af_data_request@len
  1631                           
  1632                           ;zb_znp.c: 204:     fcs_calc ^= 10 + len;
  1633  02A5  0836               	movf	znp_af_data_request@len,w
  1634  02A6  3E0A               	addlw	10
  1635  02A7  00B8               	movwf	??_znp_af_data_request
  1636  02A8  0838               	movf	??_znp_af_data_request,w
  1637  02A9  06BA               	xorwf	znp_af_data_request@fcs_calc,f
  1638                           
  1639                           ;zb_znp.c: 205:     fcs_calc ^= len;
  1640  02AA  0836               	movf	znp_af_data_request@len,w
  1641  02AB  00B8               	movwf	??_znp_af_data_request
  1642  02AC  0838               	movf	??_znp_af_data_request,w
  1643  02AD  06BA               	xorwf	znp_af_data_request@fcs_calc,f
  1644                           
  1645                           ;zb_znp.c: 206:     fcs_calc ^= ((dst_addr) & 0xFF);
  1646  02AE  0830               	movf	znp_af_data_request@dst_addr,w
  1647  02AF  00B8               	movwf	??_znp_af_data_request
  1648  02B0  0838               	movf	??_znp_af_data_request,w
  1649  02B1  06BA               	xorwf	znp_af_data_request@fcs_calc,f
  1650                           
  1651                           ;zb_znp.c: 207:     fcs_calc ^= (((dst_addr) >> 8) & 0xFF);
  1652  02B2  0831               	movf	znp_af_data_request@dst_addr+1,w
  1653  02B3  00B8               	movwf	??_znp_af_data_request
  1654  02B4  0838               	movf	??_znp_af_data_request,w
  1655  02B5  06BA               	xorwf	znp_af_data_request@fcs_calc,f
  1656                           
  1657                           ;zb_znp.c: 208:     fcs_calc ^= ((cluster_id) & 0xFF);
  1658  02B6  0833               	movf	znp_af_data_request@cluster_id,w
  1659  02B7  00B8               	movwf	??_znp_af_data_request
  1660  02B8  0838               	movf	??_znp_af_data_request,w
  1661  02B9  06BA               	xorwf	znp_af_data_request@fcs_calc,f
  1662                           
  1663                           ;zb_znp.c: 209:     fcs_calc ^= (((cluster_id) >> 8) & 0xFF);
  1664  02BA  0834               	movf	znp_af_data_request@cluster_id+1,w
  1665  02BB  00B8               	movwf	??_znp_af_data_request
  1666  02BC  0838               	movf	??_znp_af_data_request,w
  1667  02BD  06BA               	xorwf	znp_af_data_request@fcs_calc,f
  1668                           
  1669                           ;zb_znp.c: 211:     usart_send(0xFE);
  1670  02BE  30FE               	movlw	254
  1671  02BF  272A               	fcall	_usart_send
  1672                           
  1673                           ;zb_znp.c: 212:     usart_send(10 + len);
  1674  02C0  0836               	movf	znp_af_data_request@len,w
  1675  02C1  3E0A               	addlw	10
  1676  02C2  272A               	fcall	_usart_send
  1677                           
  1678                           ;zb_znp.c: 213:     usart_send(0x24);
  1679  02C3  3024               	movlw	36
  1680  02C4  272A               	fcall	_usart_send
  1681                           
  1682                           ;zb_znp.c: 214:     usart_send(0x01);
  1683  02C5  3001               	movlw	1
  1684  02C6  272A               	fcall	_usart_send
  1685                           
  1686                           ;zb_znp.c: 215:     usart_send(((dst_addr) & 0xFF));
  1687  02C7  0830               	movf	znp_af_data_request@dst_addr,w
  1688  02C8  272A               	fcall	_usart_send
  1689                           
  1690                           ;zb_znp.c: 216:     usart_send((((dst_addr) >> 8) & 0xFF));
  1691  02C9  0831               	movf	znp_af_data_request@dst_addr+1,w
  1692  02CA  272A               	fcall	_usart_send
  1693                           
  1694                           ;zb_znp.c: 217:     usart_send(endpoint);
  1695  02CB  0832               	movf	znp_af_data_request@endpoint,w
  1696  02CC  272A               	fcall	_usart_send
  1697                           
  1698                           ;zb_znp.c: 218:     usart_send(endpoint);
  1699  02CD  0832               	movf	znp_af_data_request@endpoint,w
  1700  02CE  272A               	fcall	_usart_send
  1701                           
  1702                           ;zb_znp.c: 219:     usart_send(((cluster_id) & 0xFF));
  1703  02CF  0833               	movf	znp_af_data_request@cluster_id,w
  1704  02D0  272A               	fcall	_usart_send
  1705                           
  1706                           ;zb_znp.c: 220:     usart_send((((cluster_id) >> 8) & 0xFF));
  1707  02D1  0834               	movf	znp_af_data_request@cluster_id+1,w
  1708  02D2  272A               	fcall	_usart_send
  1709                           
  1710                           ;zb_znp.c: 221:     usart_send(0x00);
  1711  02D3  3000               	movlw	0
  1712  02D4  272A               	fcall	_usart_send
  1713                           
  1714                           ;zb_znp.c: 222:     usart_send(0x00);
  1715  02D5  3000               	movlw	0
  1716  02D6  272A               	fcall	_usart_send
  1717                           
  1718                           ;zb_znp.c: 223:     usart_send(0x0F);
  1719  02D7  300F               	movlw	15
  1720  02D8  272A               	fcall	_usart_send
  1721                           
  1722                           ;zb_znp.c: 224:     usart_send(len);
  1723  02D9  0836               	movf	znp_af_data_request@len,w
  1724  02DA  272A               	fcall	_usart_send
  1725                           
  1726                           ;zb_znp.c: 225:     for (uint8_t i = 0; i < len; i++) {
  1727  02DB  01BB               	clrf	znp_af_data_request@i
  1728  02DC                     l1935:
  1729  02DC  0836               	movf	znp_af_data_request@len,w
  1730  02DD  023B               	subwf	znp_af_data_request@i,w
  1731  02DE  1803               	btfsc	3,0
  1732  02DF  2AF7               	goto	l1937
  1733                           
  1734                           ;zb_znp.c: 226:         usart_send(data[i]);
  1735  02E0  083B               	movf	znp_af_data_request@i,w
  1736  02E1  0735               	addwf	znp_af_data_request@data,w
  1737  02E2  00B8               	movwf	??_znp_af_data_request
  1738  02E3  0838               	movf	??_znp_af_data_request,w
  1739  02E4  0084               	movwf	4
  1740  02E5  1383               	bcf	3,7	;select IRP bank0
  1741  02E6  0800               	movf	0,w
  1742  02E7  272A               	fcall	_usart_send
  1743                           
  1744                           ;zb_znp.c: 227:         fcs_calc ^= data[i];
  1745  02E8  083B               	movf	znp_af_data_request@i,w
  1746  02E9  0735               	addwf	znp_af_data_request@data,w
  1747  02EA  00B8               	movwf	??_znp_af_data_request
  1748  02EB  0838               	movf	??_znp_af_data_request,w
  1749  02EC  0084               	movwf	4
  1750  02ED  1383               	bcf	3,7	;select IRP bank0
  1751  02EE  0800               	movf	0,w
  1752  02EF  00B9               	movwf	??_znp_af_data_request+1
  1753  02F0  0839               	movf	??_znp_af_data_request+1,w
  1754  02F1  06BA               	xorwf	znp_af_data_request@fcs_calc,f
  1755                           
  1756                           ;zb_znp.c: 228:     }
  1757  02F2  3001               	movlw	1
  1758  02F3  00B8               	movwf	??_znp_af_data_request
  1759  02F4  0838               	movf	??_znp_af_data_request,w
  1760  02F5  07BB               	addwf	znp_af_data_request@i,f
  1761  02F6  2ADC               	goto	l1935
  1762  02F7                     l1937:
  1763                           
  1764                           ;zb_znp.c: 229:     usart_send(fcs_calc);
  1765  02F7  083A               	movf	znp_af_data_request@fcs_calc,w
  1766  02F8  272A               	fcall	_usart_send
  1767                           
  1768                           ;zb_znp.c: 231:     if (wait_for_rsps)
  1769  02F9  0837               	movf	znp_af_data_request@wait_for_rsps,w
  1770  02FA  1903               	btfsc	3,2
  1771  02FB  0008               	return
  1772                           
  1773                           ;zb_znp.c: 232:         wait_for_status(0x6401, 0, 0x00);
  1774  02FC  3001               	movlw	1
  1775  02FD  00AC               	movwf	wait_for_status@cmd
  1776  02FE  3064               	movlw	100
  1777  02FF  00AD               	movwf	wait_for_status@cmd+1
  1778  0300  01AE               	clrf	wait_for_status@offset
  1779  0301  01AF               	clrf	wait_for_status@status_to_wait
  1780  0302  268E               	fcall	_wait_for_status
  1781  0303  0008               	return
  1782  0304                     __end_of_znp_af_data_request:
  1783                           
  1784                           	psect	text3
  1785  051E                     __ptext3:	
  1786 ;; *************** function _znp_router_start *****************
  1787 ;; Defined at:
  1788 ;;		line 235 in file "zb_znp.c"
  1789 ;; Parameters:    Size  Location     Type
  1790 ;;  start_opt       1    wreg     enum E716
  1791 ;; Auto vars:     Size  Location     Type
  1792 ;;  start_opt       1   19[BANK0 ] enum E716
  1793 ;; Return value:  Size  Location     Type
  1794 ;;                  1    wreg      void 
  1795 ;; Registers used:
  1796 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1797 ;; Tracked objects:
  1798 ;;		On entry : 300/100
  1799 ;;		On exit  : B00/0
  1800 ;;		Unchanged: 0/0
  1801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1802 ;;      Params:         0       0       0       0
  1803 ;;      Locals:         0       1       0       0
  1804 ;;      Temps:          0       2       0       0
  1805 ;;      Totals:         0       3       0       0
  1806 ;;Total ram usage:        3 bytes
  1807 ;; Hardware stack levels used: 1
  1808 ;; Hardware stack levels required when called: 8
  1809 ;; This function calls:
  1810 ;;		_znp_af_register
  1811 ;;		_znp_hard_reset
  1812 ;;		_znp_set_channels
  1813 ;;		_znp_set_logical_type
  1814 ;;		_znp_set_startopt
  1815 ;;		_znp_zdo_startup_from_app
  1816 ;; This function is called by:
  1817 ;;		_main
  1818 ;; This function uses a non-reentrant model
  1819 ;;
  1820                           
  1821  051E                     _znp_router_start:	
  1822                           ;psect for function _znp_router_start
  1823                           
  1824                           
  1825                           ;incstack = 0
  1826 ;; hardware stack exceeded
  1827                           ; Regs used in _znp_router_start: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1828                           ;znp_router_start@start_opt stored from wreg
  1829  051E  1283               	bcf	3,5	;RP0=0, select bank0
  1830  051F  00B3               	movwf	znp_router_start@start_opt
  1831                           
  1832                           ;zb_znp.c: 236:     znp_hard_reset();
  1833  0520  25D0               	fcall	_znp_hard_reset
  1834                           
  1835                           ;zb_znp.c: 237:     switch (start_opt) {
  1836  0521  2D28               	goto	l2239
  1837  0522                     l2233:
  1838                           
  1839                           ;zb_znp.c: 239:             znp_set_startopt(((1 << 0) | (1 << 1)));
  1840  0522  3003               	movlw	3
  1841  0523  2562               	fcall	_znp_set_startopt
  1842                           
  1843                           ;zb_znp.c: 240:             znp_set_logical_type();
  1844  0524  2581               	fcall	_znp_set_logical_type
  1845                           
  1846                           ;zb_znp.c: 241:             znp_set_channels();
  1847  0525  2498               	fcall	_znp_set_channels
  1848  0526                     l2235:
  1849                           
  1850                           ;zb_znp.c: 243:             znp_zdo_startup_from_app();
  1851  0526  25FA               	fcall	_znp_zdo_startup_from_app
  1852                           
  1853                           ;zb_znp.c: 244:             break;
  1854  0527  2D38               	goto	l2241
  1855  0528                     l2239:
  1856  0528  0833               	movf	znp_router_start@start_opt,w
  1857  0529  00B1               	movwf	??_znp_router_start
  1858  052A  01B2               	clrf	??_znp_router_start+1
  1859                           
  1860                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1861                           ; Switch size 1, requested type "simple"
  1862                           ; Number of cases is 1, Range of values is 0 to 0
  1863                           ; switch strategies available:
  1864                           ; Name         Instructions Cycles
  1865                           ; simple_byte            4     3 (average)
  1866                           ; direct_byte            7     6 (fixed)
  1867                           ; jumptable            260     6 (fixed)
  1868                           ;	Chosen strategy is simple_byte
  1869  052B  0832               	movf	??_znp_router_start+1,w
  1870  052C  3A00               	xorlw	0	; case 0
  1871  052D  1903               	skipnz
  1872  052E  2D30               	goto	l2523
  1873  052F  2D38               	goto	l2241
  1874  0530                     l2523:
  1875                           
  1876                           ; Switch size 1, requested type "simple"
  1877                           ; Number of cases is 2, Range of values is 0 to 1
  1878                           ; switch strategies available:
  1879                           ; Name         Instructions Cycles
  1880                           ; simple_byte            7     4 (average)
  1881                           ; direct_byte            8     6 (fixed)
  1882                           ; jumptable            260     6 (fixed)
  1883                           ;	Chosen strategy is simple_byte
  1884  0530  0831               	movf	??_znp_router_start,w
  1885  0531  3A00               	xorlw	0	; case 0
  1886  0532  1903               	skipnz
  1887  0533  2D22               	goto	l2233
  1888  0534  3A01               	xorlw	1	; case 1
  1889  0535  1903               	skipnz
  1890  0536  2D26               	goto	l2235
  1891  0537  2D38               	goto	l2241
  1892  0538                     l2241:
  1893                           
  1894                           ;zb_znp.c: 248:     znp_af_register(0x01);
  1895  0538  3001               	movlw	1
  1896  0539  24F8               	fcall	_znp_af_register
  1897                           
  1898                           ;zb_znp.c: 249:     znp_af_register(0x02);
  1899  053A  3002               	movlw	2
  1900  053B  24F8               	fcall	_znp_af_register
  1901                           
  1902                           ;zb_znp.c: 250:     znp_af_register(0x03);
  1903  053C  3003               	movlw	3
  1904  053D  24F8               	fcall	_znp_af_register
  1905                           
  1906                           ;zb_znp.c: 251:     znp_af_register(0x04);
  1907  053E  3004               	movlw	4
  1908  053F  24F8               	fcall	_znp_af_register
  1909  0540  0008               	return
  1910  0541                     __end_of_znp_router_start:
  1911                           
  1912                           	psect	text4
  1913  05FA                     __ptext4:	
  1914 ;; *************** function _znp_zdo_startup_from_app *****************
  1915 ;; Defined at:
  1916 ;;		line 186 in file "zb_znp.c"
  1917 ;; Parameters:    Size  Location     Type
  1918 ;;		None
  1919 ;; Auto vars:     Size  Location     Type
  1920 ;;		None
  1921 ;; Return value:  Size  Location     Type
  1922 ;;                  1    wreg      void 
  1923 ;; Registers used:
  1924 ;;		wreg, status,2, status,0, pclath, cstack
  1925 ;; Tracked objects:
  1926 ;;		On entry : 300/0
  1927 ;;		On exit  : 300/0
  1928 ;;		Unchanged: 0/0
  1929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1930 ;;      Params:         0       0       0       0
  1931 ;;      Locals:         0       0       0       0
  1932 ;;      Temps:          0       0       0       0
  1933 ;;      Totals:         0       0       0       0
  1934 ;;Total ram usage:        0 bytes
  1935 ;; Hardware stack levels used: 1
  1936 ;; Hardware stack levels required when called: 6
  1937 ;; This function calls:
  1938 ;;		_usart_send
  1939 ;;		_wait_for_msg
  1940 ;; This function is called by:
  1941 ;;		_znp_router_start
  1942 ;; This function uses a non-reentrant model
  1943 ;;
  1944                           
  1945  05FA                     _znp_zdo_startup_from_app:	
  1946                           ;psect for function _znp_zdo_startup_from_app
  1947                           
  1948                           
  1949                           ;zb_znp.c: 187:     usart_send(0xFE);
  1950                           
  1951                           ;incstack = 0
  1952                           ; Regs used in _znp_zdo_startup_from_app: [wreg+status,2+status,0+pclath+cstack]
  1953  05FA  30FE               	movlw	254
  1954  05FB  272A               	fcall	_usart_send
  1955                           
  1956                           ;zb_znp.c: 188:     usart_send(0x01);
  1957  05FC  3001               	movlw	1
  1958  05FD  272A               	fcall	_usart_send
  1959                           
  1960                           ;zb_znp.c: 189:     usart_send(0x25);
  1961  05FE  3025               	movlw	37
  1962  05FF  272A               	fcall	_usart_send
  1963                           
  1964                           ;zb_znp.c: 190:     usart_send(0x40);
  1965  0600  3040               	movlw	64
  1966  0601  272A               	fcall	_usart_send
  1967                           
  1968                           ;zb_znp.c: 191:     usart_send(0x00);
  1969  0602  3000               	movlw	0
  1970  0603  272A               	fcall	_usart_send
  1971                           
  1972                           ;zb_znp.c: 192:     usart_send(0x64);
  1973  0604  3064               	movlw	100
  1974  0605  272A               	fcall	_usart_send
  1975                           
  1976                           ;zb_znp.c: 193:     wait_for_msg(0x4F80);
  1977  0606  3080               	movlw	128
  1978  0607  00AA               	movwf	wait_for_msg@cmd
  1979  0608  304F               	movlw	79
  1980  0609  00AB               	movwf	wait_for_msg@cmd+1
  1981  060A  26CF               	fcall	_wait_for_msg
  1982  060B  0008               	return
  1983  060C                     __end_of_znp_zdo_startup_from_app:
  1984                           
  1985                           	psect	text5
  1986  0562                     __ptext5:	
  1987 ;; *************** function _znp_set_startopt *****************
  1988 ;; Defined at:
  1989 ;;		line 94 in file "zb_znp.c"
  1990 ;; Parameters:    Size  Location     Type
  1991 ;;  startopt        1    wreg     unsigned char 
  1992 ;; Auto vars:     Size  Location     Type
  1993 ;;  startopt        1   16[BANK0 ] unsigned char 
  1994 ;; Return value:  Size  Location     Type
  1995 ;;                  1    wreg      void 
  1996 ;; Registers used:
  1997 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1998 ;; Tracked objects:
  1999 ;;		On entry : 300/0
  2000 ;;		On exit  : 300/0
  2001 ;;		Unchanged: 0/0
  2002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2003 ;;      Params:         0       0       0       0
  2004 ;;      Locals:         0       1       0       0
  2005 ;;      Temps:          0       0       0       0
  2006 ;;      Totals:         0       1       0       0
  2007 ;;Total ram usage:        1 bytes
  2008 ;; Hardware stack levels used: 1
  2009 ;; Hardware stack levels required when called: 7
  2010 ;; This function calls:
  2011 ;;		_usart_send
  2012 ;;		_wait_for_status
  2013 ;;		_znp_hard_reset
  2014 ;; This function is called by:
  2015 ;;		_znp_router_start
  2016 ;; This function uses a non-reentrant model
  2017 ;;
  2018                           
  2019  0562                     _znp_set_startopt:	
  2020                           ;psect for function _znp_set_startopt
  2021                           
  2022                           
  2023                           ;incstack = 0
  2024 ;; hardware stack exceeded
  2025                           ; Regs used in _znp_set_startopt: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2026                           ;znp_set_startopt@startopt stored from wreg
  2027  0562  00B0               	movwf	znp_set_startopt@startopt
  2028                           
  2029                           ;zb_znp.c: 95:     usart_send(0xFE);
  2030  0563  30FE               	movlw	254
  2031  0564  272A               	fcall	_usart_send
  2032                           
  2033                           ;zb_znp.c: 96:     usart_send(0x05);
  2034  0565  3005               	movlw	5
  2035  0566  272A               	fcall	_usart_send
  2036                           
  2037                           ;zb_znp.c: 97:     usart_send(0x21);
  2038  0567  3021               	movlw	33
  2039  0568  272A               	fcall	_usart_send
  2040                           
  2041                           ;zb_znp.c: 98:     usart_send(0x09);
  2042  0569  3009               	movlw	9
  2043  056A  272A               	fcall	_usart_send
  2044                           
  2045                           ;zb_znp.c: 99:     usart_send(0x03);
  2046  056B  3003               	movlw	3
  2047  056C  272A               	fcall	_usart_send
  2048                           
  2049                           ;zb_znp.c: 100:     usart_send(0x00);
  2050  056D  3000               	movlw	0
  2051  056E  272A               	fcall	_usart_send
  2052                           
  2053                           ;zb_znp.c: 101:     usart_send(0x00);
  2054  056F  3000               	movlw	0
  2055  0570  272A               	fcall	_usart_send
  2056                           
  2057                           ;zb_znp.c: 102:     usart_send(0x01);
  2058  0571  3001               	movlw	1
  2059  0572  272A               	fcall	_usart_send
  2060                           
  2061                           ;zb_znp.c: 103:     usart_send(startopt);
  2062  0573  0830               	movf	znp_set_startopt@startopt,w
  2063  0574  272A               	fcall	_usart_send
  2064                           
  2065                           ;zb_znp.c: 104:     usart_send(0x2F ^ startopt);
  2066  0575  0830               	movf	znp_set_startopt@startopt,w
  2067  0576  3A2F               	xorlw	47
  2068  0577  272A               	fcall	_usart_send
  2069                           
  2070                           ;zb_znp.c: 105:     wait_for_status(0x6109, 0, 0x00);
  2071  0578  3009               	movlw	9
  2072  0579  00AC               	movwf	wait_for_status@cmd
  2073  057A  3061               	movlw	97
  2074  057B  00AD               	movwf	wait_for_status@cmd+1
  2075  057C  01AE               	clrf	wait_for_status@offset
  2076  057D  01AF               	clrf	wait_for_status@status_to_wait
  2077  057E  268E               	fcall	_wait_for_status
  2078                           
  2079                           ;zb_znp.c: 107:     znp_hard_reset();
  2080  057F  25D0               	fcall	_znp_hard_reset
  2081  0580  0008               	return
  2082  0581                     __end_of_znp_set_startopt:
  2083                           
  2084                           	psect	text6
  2085  05D0                     __ptext6:	
  2086 ;; *************** function _znp_hard_reset *****************
  2087 ;; Defined at:
  2088 ;;		line 161 in file "zb_znp.c"
  2089 ;; Parameters:    Size  Location     Type
  2090 ;;		None
  2091 ;; Auto vars:     Size  Location     Type
  2092 ;;		None
  2093 ;; Return value:  Size  Location     Type
  2094 ;;                  1    wreg      void 
  2095 ;; Registers used:
  2096 ;;		wreg, status,2, status,0, pclath, cstack
  2097 ;; Tracked objects:
  2098 ;;		On entry : 300/0
  2099 ;;		On exit  : 300/0
  2100 ;;		Unchanged: 0/0
  2101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2102 ;;      Params:         0       0       0       0
  2103 ;;      Locals:         0       0       0       0
  2104 ;;      Temps:          0       2       0       0
  2105 ;;      Totals:         0       2       0       0
  2106 ;;Total ram usage:        2 bytes
  2107 ;; Hardware stack levels used: 1
  2108 ;; Hardware stack levels required when called: 6
  2109 ;; This function calls:
  2110 ;;		_wait_for_msg
  2111 ;; This function is called by:
  2112 ;;		_znp_set_startopt
  2113 ;;		_znp_router_start
  2114 ;; This function uses a non-reentrant model
  2115 ;;
  2116                           
  2117  05D0                     _znp_hard_reset:	
  2118                           ;psect for function _znp_hard_reset
  2119                           
  2120                           
  2121                           ;zb_znp.c: 162:     PORTBbits.RB3 = 0;
  2122                           
  2123                           ;incstack = 0
  2124 ;; hardware stack exceeded
  2125                           ; Regs used in _znp_hard_reset: [wreg+status,2+status,0+pclath+cstack]
  2126  05D0  1186               	bcf	6,3	;volatile
  2127                           
  2128                           ;zb_znp.c: 163:     _delay((unsigned long)((10)*(4000000/4000.0)));
  2129  05D1  300D               	movlw	13
  2130  05D2  1283               	bcf	3,5	;RP0=0, select bank0
  2131  05D3  1303               	bcf	3,6	;RP1=0, select bank0
  2132  05D4  00AD               	movwf	??_znp_hard_reset+1
  2133  05D5  30FB               	movlw	251
  2134  05D6  00AC               	movwf	??_znp_hard_reset
  2135  05D7                     u1337:
  2136  05D7  0BAC               	decfsz	??_znp_hard_reset,f
  2137  05D8  2DD7               	goto	u1337
  2138  05D9  0BAD               	decfsz	??_znp_hard_reset+1,f
  2139  05DA  2DD7               	goto	u1337
  2140  05DB  0000               	nop
  2141                           
  2142                           ;zb_znp.c: 164:     PORTBbits.RB3 = 1;
  2143  05DC  1283               	bcf	3,5	;RP0=0, select bank0
  2144  05DD  1303               	bcf	3,6	;RP1=0, select bank0
  2145  05DE  1586               	bsf	6,3	;volatile
  2146                           
  2147                           ;zb_znp.c: 165:     wait_for_msg(0x4180);
  2148  05DF  3080               	movlw	128
  2149  05E0  00AA               	movwf	wait_for_msg@cmd
  2150  05E1  3041               	movlw	65
  2151  05E2  00AB               	movwf	wait_for_msg@cmd+1
  2152  05E3  26CF               	fcall	_wait_for_msg
  2153  05E4  0008               	return
  2154  05E5                     __end_of_znp_hard_reset:
  2155                           
  2156                           	psect	text7
  2157  0581                     __ptext7:	
  2158 ;; *************** function _znp_set_logical_type *****************
  2159 ;; Defined at:
  2160 ;;		line 110 in file "zb_znp.c"
  2161 ;; Parameters:    Size  Location     Type
  2162 ;;		None
  2163 ;; Auto vars:     Size  Location     Type
  2164 ;;		None
  2165 ;; Return value:  Size  Location     Type
  2166 ;;                  1    wreg      void 
  2167 ;; Registers used:
  2168 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2169 ;; Tracked objects:
  2170 ;;		On entry : 300/0
  2171 ;;		On exit  : B00/0
  2172 ;;		Unchanged: 0/0
  2173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2174 ;;      Params:         0       0       0       0
  2175 ;;      Locals:         0       0       0       0
  2176 ;;      Temps:          0       0       0       0
  2177 ;;      Totals:         0       0       0       0
  2178 ;;Total ram usage:        0 bytes
  2179 ;; Hardware stack levels used: 1
  2180 ;; Hardware stack levels required when called: 7
  2181 ;; This function calls:
  2182 ;;		_usart_send
  2183 ;;		_wait_for_status
  2184 ;; This function is called by:
  2185 ;;		_znp_router_start
  2186 ;; This function uses a non-reentrant model
  2187 ;;
  2188                           
  2189  0581                     _znp_set_logical_type:	
  2190                           ;psect for function _znp_set_logical_type
  2191                           
  2192                           
  2193                           ;zb_znp.c: 111:     usart_send(0xFE);
  2194                           
  2195                           ;incstack = 0
  2196 ;; hardware stack exceeded
  2197                           ; Regs used in _znp_set_logical_type: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2198  0581  30FE               	movlw	254
  2199  0582  272A               	fcall	_usart_send
  2200                           
  2201                           ;zb_znp.c: 112:     usart_send(0x05);
  2202  0583  3005               	movlw	5
  2203  0584  272A               	fcall	_usart_send
  2204                           
  2205                           ;zb_znp.c: 113:     usart_send(0x21);
  2206  0585  3021               	movlw	33
  2207  0586  272A               	fcall	_usart_send
  2208                           
  2209                           ;zb_znp.c: 114:     usart_send(0x09);
  2210  0587  3009               	movlw	9
  2211  0588  272A               	fcall	_usart_send
  2212                           
  2213                           ;zb_znp.c: 115:     usart_send(0x87);
  2214  0589  3087               	movlw	135
  2215  058A  272A               	fcall	_usart_send
  2216                           
  2217                           ;zb_znp.c: 116:     usart_send(0x00);
  2218  058B  3000               	movlw	0
  2219  058C  272A               	fcall	_usart_send
  2220                           
  2221                           ;zb_znp.c: 117:     usart_send(0x00);
  2222  058D  3000               	movlw	0
  2223  058E  272A               	fcall	_usart_send
  2224                           
  2225                           ;zb_znp.c: 118:     usart_send(0x01);
  2226  058F  3001               	movlw	1
  2227  0590  272A               	fcall	_usart_send
  2228                           
  2229                           ;zb_znp.c: 119:     usart_send(0x01);
  2230  0591  3001               	movlw	1
  2231  0592  272A               	fcall	_usart_send
  2232                           
  2233                           ;zb_znp.c: 120:     usart_send(0xAA);
  2234  0593  30AA               	movlw	170
  2235  0594  272A               	fcall	_usart_send
  2236                           
  2237                           ;zb_znp.c: 121:     wait_for_status(0x6109, 0, 0x00);
  2238  0595  3009               	movlw	9
  2239  0596  00AC               	movwf	wait_for_status@cmd
  2240  0597  3061               	movlw	97
  2241  0598  00AD               	movwf	wait_for_status@cmd+1
  2242  0599  01AE               	clrf	wait_for_status@offset
  2243  059A  01AF               	clrf	wait_for_status@status_to_wait
  2244  059B  268E               	fcall	_wait_for_status
  2245  059C  0008               	return
  2246  059D                     __end_of_znp_set_logical_type:
  2247                           
  2248                           	psect	text8
  2249  0498                     __ptext8:	
  2250 ;; *************** function _znp_set_channels *****************
  2251 ;; Defined at:
  2252 ;;		line 124 in file "zb_znp.c"
  2253 ;; Parameters:    Size  Location     Type
  2254 ;;		None
  2255 ;; Auto vars:     Size  Location     Type
  2256 ;;		None
  2257 ;; Return value:  Size  Location     Type
  2258 ;;                  1    wreg      void 
  2259 ;; Registers used:
  2260 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2261 ;; Tracked objects:
  2262 ;;		On entry : B00/0
  2263 ;;		On exit  : B00/0
  2264 ;;		Unchanged: 0/0
  2265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2266 ;;      Params:         0       0       0       0
  2267 ;;      Locals:         0       0       0       0
  2268 ;;      Temps:          0       0       0       0
  2269 ;;      Totals:         0       0       0       0
  2270 ;;Total ram usage:        0 bytes
  2271 ;; Hardware stack levels used: 1
  2272 ;; Hardware stack levels required when called: 7
  2273 ;; This function calls:
  2274 ;;		_usart_send
  2275 ;;		_wait_for_status
  2276 ;; This function is called by:
  2277 ;;		_znp_router_start
  2278 ;; This function uses a non-reentrant model
  2279 ;;
  2280                           
  2281  0498                     _znp_set_channels:	
  2282                           ;psect for function _znp_set_channels
  2283                           
  2284                           
  2285                           ;zb_znp.c: 125:     usart_send(0xFE);
  2286                           
  2287                           ;incstack = 0
  2288 ;; hardware stack exceeded
  2289                           ; Regs used in _znp_set_channels: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2290  0498  30FE               	movlw	254
  2291  0499  272A               	fcall	_usart_send
  2292                           
  2293                           ;zb_znp.c: 126:     usart_send(0x05);
  2294  049A  3005               	movlw	5
  2295  049B  272A               	fcall	_usart_send
  2296                           
  2297                           ;zb_znp.c: 127:     usart_send(0x2F);
  2298  049C  302F               	movlw	47
  2299  049D  272A               	fcall	_usart_send
  2300                           
  2301                           ;zb_znp.c: 128:     usart_send(0x08);
  2302  049E  3008               	movlw	8
  2303  049F  272A               	fcall	_usart_send
  2304                           
  2305                           ;zb_znp.c: 129:     usart_send(0x01);
  2306  04A0  3001               	movlw	1
  2307  04A1  272A               	fcall	_usart_send
  2308                           
  2309                           ;zb_znp.c: 130:     usart_send(0x00);
  2310  04A2  3000               	movlw	0
  2311  04A3  272A               	fcall	_usart_send
  2312                           
  2313                           ;zb_znp.c: 131:     usart_send(0x20);
  2314  04A4  3020               	movlw	32
  2315  04A5  272A               	fcall	_usart_send
  2316                           
  2317                           ;zb_znp.c: 132:     usart_send(0x00);
  2318  04A6  3000               	movlw	0
  2319  04A7  272A               	fcall	_usart_send
  2320                           
  2321                           ;zb_znp.c: 133:     usart_send(0x00);
  2322  04A8  3000               	movlw	0
  2323  04A9  272A               	fcall	_usart_send
  2324                           
  2325                           ;zb_znp.c: 134:     usart_send(0x03);
  2326  04AA  3003               	movlw	3
  2327  04AB  272A               	fcall	_usart_send
  2328                           
  2329                           ;zb_znp.c: 135:     wait_for_status(0x6F08, 0, 0x00);
  2330  04AC  3008               	movlw	8
  2331  04AD  00AC               	movwf	wait_for_status@cmd
  2332  04AE  306F               	movlw	111
  2333  04AF  00AD               	movwf	wait_for_status@cmd+1
  2334  04B0  01AE               	clrf	wait_for_status@offset
  2335  04B1  01AF               	clrf	wait_for_status@status_to_wait
  2336  04B2  268E               	fcall	_wait_for_status
  2337                           
  2338                           ;zb_znp.c: 137:     usart_send(0xFE);
  2339  04B3  30FE               	movlw	254
  2340  04B4  272A               	fcall	_usart_send
  2341                           
  2342                           ;zb_znp.c: 138:     usart_send(0x05);
  2343  04B5  3005               	movlw	5
  2344  04B6  272A               	fcall	_usart_send
  2345                           
  2346                           ;zb_znp.c: 139:     usart_send(0x2F);
  2347  04B7  302F               	movlw	47
  2348  04B8  272A               	fcall	_usart_send
  2349                           
  2350                           ;zb_znp.c: 140:     usart_send(0x08);
  2351  04B9  3008               	movlw	8
  2352  04BA  272A               	fcall	_usart_send
  2353                           
  2354                           ;zb_znp.c: 141:     usart_send(0x00);
  2355  04BB  3000               	movlw	0
  2356  04BC  272A               	fcall	_usart_send
  2357                           
  2358                           ;zb_znp.c: 142:     usart_send(0x00);
  2359  04BD  3000               	movlw	0
  2360  04BE  272A               	fcall	_usart_send
  2361                           
  2362                           ;zb_znp.c: 143:     usart_send(0x00);
  2363  04BF  3000               	movlw	0
  2364  04C0  272A               	fcall	_usart_send
  2365                           
  2366                           ;zb_znp.c: 144:     usart_send(0x00);
  2367  04C1  3000               	movlw	0
  2368  04C2  272A               	fcall	_usart_send
  2369                           
  2370                           ;zb_znp.c: 145:     usart_send(0x00);
  2371  04C3  3000               	movlw	0
  2372  04C4  272A               	fcall	_usart_send
  2373                           
  2374                           ;zb_znp.c: 146:     usart_send(0x22);
  2375  04C5  3022               	movlw	34
  2376  04C6  272A               	fcall	_usart_send
  2377                           
  2378                           ;zb_znp.c: 147:     wait_for_status(0x6F08, 0, 0x00);
  2379  04C7  3008               	movlw	8
  2380  04C8  00AC               	movwf	wait_for_status@cmd
  2381  04C9  306F               	movlw	111
  2382  04CA  00AD               	movwf	wait_for_status@cmd+1
  2383  04CB  01AE               	clrf	wait_for_status@offset
  2384  04CC  01AF               	clrf	wait_for_status@status_to_wait
  2385  04CD  268E               	fcall	_wait_for_status
  2386  04CE  0008               	return
  2387  04CF                     __end_of_znp_set_channels:
  2388                           
  2389                           	psect	text9
  2390  04F8                     __ptext9:	
  2391 ;; *************** function _znp_af_register *****************
  2392 ;; Defined at:
  2393 ;;		line 168 in file "zb_znp.c"
  2394 ;; Parameters:    Size  Location     Type
  2395 ;;  endpoint        1    wreg     unsigned char 
  2396 ;; Auto vars:     Size  Location     Type
  2397 ;;  endpoint        1   16[BANK0 ] unsigned char 
  2398 ;; Return value:  Size  Location     Type
  2399 ;;                  1    wreg      void 
  2400 ;; Registers used:
  2401 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2402 ;; Tracked objects:
  2403 ;;		On entry : 300/0
  2404 ;;		On exit  : B00/0
  2405 ;;		Unchanged: 0/0
  2406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2407 ;;      Params:         0       0       0       0
  2408 ;;      Locals:         0       1       0       0
  2409 ;;      Temps:          0       0       0       0
  2410 ;;      Totals:         0       1       0       0
  2411 ;;Total ram usage:        1 bytes
  2412 ;; Hardware stack levels used: 1
  2413 ;; Hardware stack levels required when called: 7
  2414 ;; This function calls:
  2415 ;;		_usart_send
  2416 ;;		_wait_for_status
  2417 ;; This function is called by:
  2418 ;;		_znp_router_start
  2419 ;; This function uses a non-reentrant model
  2420 ;;
  2421                           
  2422  04F8                     _znp_af_register:	
  2423                           ;psect for function _znp_af_register
  2424                           
  2425                           
  2426                           ;incstack = 0
  2427 ;; hardware stack exceeded
  2428                           ; Regs used in _znp_af_register: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2429                           ;znp_af_register@endpoint stored from wreg
  2430  04F8  00B0               	movwf	znp_af_register@endpoint
  2431                           
  2432                           ;zb_znp.c: 169:     usart_send(0xFE);
  2433  04F9  30FE               	movlw	254
  2434  04FA  272A               	fcall	_usart_send
  2435                           
  2436                           ;zb_znp.c: 170:     usart_send(0x09);
  2437  04FB  3009               	movlw	9
  2438  04FC  272A               	fcall	_usart_send
  2439                           
  2440                           ;zb_znp.c: 171:     usart_send(0x24);
  2441  04FD  3024               	movlw	36
  2442  04FE  272A               	fcall	_usart_send
  2443                           
  2444                           ;zb_znp.c: 172:     usart_send(0x00);
  2445  04FF  3000               	movlw	0
  2446  0500  272A               	fcall	_usart_send
  2447                           
  2448                           ;zb_znp.c: 173:     usart_send(endpoint);
  2449  0501  0830               	movf	znp_af_register@endpoint,w
  2450  0502  272A               	fcall	_usart_send
  2451                           
  2452                           ;zb_znp.c: 174:     usart_send(0x04);
  2453  0503  3004               	movlw	4
  2454  0504  272A               	fcall	_usart_send
  2455                           
  2456                           ;zb_znp.c: 175:     usart_send(0x01);
  2457  0505  3001               	movlw	1
  2458  0506  272A               	fcall	_usart_send
  2459                           
  2460                           ;zb_znp.c: 176:     usart_send(0x23);
  2461  0507  3023               	movlw	35
  2462  0508  272A               	fcall	_usart_send
  2463                           
  2464                           ;zb_znp.c: 177:     usart_send(0x01);
  2465  0509  3001               	movlw	1
  2466  050A  272A               	fcall	_usart_send
  2467                           
  2468                           ;zb_znp.c: 178:     usart_send(0x89);
  2469  050B  3089               	movlw	137
  2470  050C  272A               	fcall	_usart_send
  2471                           
  2472                           ;zb_znp.c: 179:     usart_send(0x00);
  2473  050D  3000               	movlw	0
  2474  050E  272A               	fcall	_usart_send
  2475                           
  2476                           ;zb_znp.c: 180:     usart_send(0x00);
  2477  050F  3000               	movlw	0
  2478  0510  272A               	fcall	_usart_send
  2479                           
  2480                           ;zb_znp.c: 181:     usart_send(0x00);
  2481  0511  3000               	movlw	0
  2482  0512  272A               	fcall	_usart_send
  2483                           
  2484                           ;zb_znp.c: 182:     usart_send(0x83 ^ endpoint);
  2485  0513  0830               	movf	znp_af_register@endpoint,w
  2486  0514  3A83               	xorlw	131
  2487  0515  272A               	fcall	_usart_send
  2488                           
  2489                           ;zb_znp.c: 183:     wait_for_status(0x6400, 0, 0x00);
  2490  0516  3000               	movlw	0
  2491  0517  00AC               	movwf	wait_for_status@cmd
  2492  0518  3064               	movlw	100
  2493  0519  00AD               	movwf	wait_for_status@cmd+1
  2494  051A  01AE               	clrf	wait_for_status@offset
  2495  051B  01AF               	clrf	wait_for_status@status_to_wait
  2496  051C  268E               	fcall	_wait_for_status
  2497  051D  0008               	return
  2498  051E                     __end_of_znp_af_register:
  2499                           
  2500                           	psect	text10
  2501  068E                     __ptext10:	
  2502 ;; *************** function _wait_for_status *****************
  2503 ;; Defined at:
  2504 ;;		line 26 in file "zb_znp.c"
  2505 ;; Parameters:    Size  Location     Type
  2506 ;;  cmd             2   12[BANK0 ] unsigned int 
  2507 ;;  offset          1   14[BANK0 ] unsigned char 
  2508 ;;  status_to_wa    1   15[BANK0 ] unsigned char 
  2509 ;; Auto vars:     Size  Location     Type
  2510 ;;		None
  2511 ;; Return value:  Size  Location     Type
  2512 ;;                  1    wreg      void 
  2513 ;; Registers used:
  2514 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2515 ;; Tracked objects:
  2516 ;;		On entry : 300/0
  2517 ;;		On exit  : B00/0
  2518 ;;		Unchanged: 0/0
  2519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2520 ;;      Params:         0       4       0       0
  2521 ;;      Locals:         0       0       0       0
  2522 ;;      Temps:          0       0       0       0
  2523 ;;      Totals:         0       4       0       0
  2524 ;;Total ram usage:        4 bytes
  2525 ;; Hardware stack levels used: 1
  2526 ;; Hardware stack levels required when called: 6
  2527 ;; This function calls:
  2528 ;;		_wait_for_msg
  2529 ;; This function is called by:
  2530 ;;		_znp_set_startopt
  2531 ;;		_znp_set_logical_type
  2532 ;;		_znp_set_channels
  2533 ;;		_znp_af_register
  2534 ;;		_znp_af_data_request
  2535 ;; This function uses a non-reentrant model
  2536 ;;
  2537                           
  2538  068E                     _wait_for_status:	
  2539                           ;psect for function _wait_for_status
  2540                           
  2541  068E                     l274:	
  2542                           ;incstack = 0
  2543 ;; hardware stack exceeded
  2544                           ; Regs used in _wait_for_status: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2545                           ;zb_znp.c: 27:     do {
  2546                           
  2547                           
  2548                           ;zb_znp.c: 28:         wait_for_msg(cmd);
  2549  068E  082D               	movf	wait_for_status@cmd+1,w
  2550  068F  00AB               	movwf	wait_for_msg@cmd+1
  2551  0690  082C               	movf	wait_for_status@cmd,w
  2552  0691  00AA               	movwf	wait_for_msg@cmd
  2553  0692  26CF               	fcall	_wait_for_msg
  2554                           
  2555                           ;zb_znp.c: 29:     } while (znp_recv_msg.data[offset] != status_to_wait);
  2556  0693  082E               	movf	wait_for_status@offset,w
  2557  0694  3EBC               	addlw	(low ((_znp_recv_msg| 0+3)))& (0+255)
  2558  0695  0084               	movwf	4
  2559  0696  1383               	bcf	3,7	;select IRP bank1
  2560  0697  0800               	movf	0,w
  2561  0698  062F               	xorwf	wait_for_status@status_to_wait,w
  2562  0699  1903               	btfsc	3,2
  2563  069A  0008               	return
  2564  069B  2E8E               	goto	l274
  2565  069C                     __end_of_wait_for_status:
  2566                           
  2567                           	psect	text11
  2568  06CF                     __ptext11:	
  2569 ;; *************** function _wait_for_msg *****************
  2570 ;; Defined at:
  2571 ;;		line 21 in file "zb_znp.c"
  2572 ;; Parameters:    Size  Location     Type
  2573 ;;  cmd             2   10[BANK0 ] unsigned int 
  2574 ;; Auto vars:     Size  Location     Type
  2575 ;;		None
  2576 ;; Return value:  Size  Location     Type
  2577 ;;                  1    wreg      void 
  2578 ;; Registers used:
  2579 ;;		wreg, status,2
  2580 ;; Tracked objects:
  2581 ;;		On entry : 300/0
  2582 ;;		On exit  : 300/0
  2583 ;;		Unchanged: 0/0
  2584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2585 ;;      Params:         0       2       0       0
  2586 ;;      Locals:         0       0       0       0
  2587 ;;      Temps:          0       0       0       0
  2588 ;;      Totals:         0       2       0       0
  2589 ;;Total ram usage:        2 bytes
  2590 ;; Hardware stack levels used: 1
  2591 ;; Hardware stack levels required when called: 5
  2592 ;; This function calls:
  2593 ;;		Nothing
  2594 ;; This function is called by:
  2595 ;;		_wait_for_status
  2596 ;;		_znp_hard_reset
  2597 ;;		_znp_zdo_startup_from_app
  2598 ;; This function uses a non-reentrant model
  2599 ;;
  2600                           
  2601  06CF                     _wait_for_msg:	
  2602                           ;psect for function _wait_for_msg
  2603                           
  2604  06CF                     l1795:	
  2605                           ;zb_znp.c: 22:     while (last_cmd_rcv != cmd);
  2606                           
  2607                           ;incstack = 0
  2608 ;; hardware stack exceeded
  2609                           ; Regs used in _wait_for_msg: [wreg+status,2]
  2610                           
  2611  06CF  082B               	movf	wait_for_msg@cmd+1,w
  2612  06D0  064F               	xorwf	_last_cmd_rcv+1,w
  2613  06D1  1D03               	skipz
  2614  06D2  2ED5               	goto	u675
  2615  06D3  082A               	movf	wait_for_msg@cmd,w
  2616  06D4  064E               	xorwf	_last_cmd_rcv,w
  2617  06D5                     u675:
  2618  06D5  1D03               	skipz
  2619  06D6  2ECF               	goto	l1795
  2620                           
  2621                           ;zb_znp.c: 23:     last_cmd_rcv = 0x00;
  2622  06D7  01CE               	clrf	_last_cmd_rcv
  2623  06D8  01CF               	clrf	_last_cmd_rcv+1
  2624  06D9  0008               	return
  2625  06DA                     __end_of_wait_for_msg:
  2626                           
  2627                           	psect	text12
  2628  072A                     __ptext12:	
  2629 ;; *************** function _usart_send *****************
  2630 ;; Defined at:
  2631 ;;		line 16 in file "usart.c"
  2632 ;; Parameters:    Size  Location     Type
  2633 ;;  c               1    wreg     unsigned char 
  2634 ;; Auto vars:     Size  Location     Type
  2635 ;;  c               1   10[BANK0 ] unsigned char 
  2636 ;; Return value:  Size  Location     Type
  2637 ;;                  1    wreg      void 
  2638 ;; Registers used:
  2639 ;;		wreg
  2640 ;; Tracked objects:
  2641 ;;		On entry : 300/0
  2642 ;;		On exit  : 300/0
  2643 ;;		Unchanged: 0/0
  2644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2645 ;;      Params:         0       0       0       0
  2646 ;;      Locals:         0       1       0       0
  2647 ;;      Temps:          0       0       0       0
  2648 ;;      Totals:         0       1       0       0
  2649 ;;Total ram usage:        1 bytes
  2650 ;; Hardware stack levels used: 1
  2651 ;; Hardware stack levels required when called: 5
  2652 ;; This function calls:
  2653 ;;		Nothing
  2654 ;; This function is called by:
  2655 ;;		_znp_set_startopt
  2656 ;;		_znp_set_logical_type
  2657 ;;		_znp_set_channels
  2658 ;;		_znp_af_register
  2659 ;;		_znp_zdo_startup_from_app
  2660 ;;		_znp_af_data_request
  2661 ;; This function uses a non-reentrant model
  2662 ;;
  2663                           
  2664  072A                     _usart_send:	
  2665                           ;psect for function _usart_send
  2666                           
  2667                           
  2668                           ;incstack = 0
  2669                           ; Regs used in _usart_send: [wreg]
  2670                           ;usart_send@c stored from wreg
  2671  072A  00AA               	movwf	usart_send@c
  2672  072B                     l240:	
  2673                           ;usart.c: 17:     while (!TXSTAbits.TRMT);
  2674                           
  2675  072B  1683               	bsf	3,5	;RP0=1, select bank1
  2676  072C  1C98               	btfss	24,1	;volatile
  2677  072D  2F2B               	goto	l240
  2678                           
  2679                           ;usart.c: 18:     TXREG = c;
  2680  072E  1283               	bcf	3,5	;RP0=0, select bank0
  2681  072F  082A               	movf	usart_send@c,w
  2682  0730  0099               	movwf	25	;volatile
  2683  0731  0008               	return
  2684  0732                     __end_of_usart_send:
  2685                           
  2686                           	psect	text13
  2687  06AA                     __ptext13:	
  2688 ;; *************** function _znp_init *****************
  2689 ;; Defined at:
  2690 ;;		line 150 in file "zb_znp.c"
  2691 ;; Parameters:    Size  Location     Type
  2692 ;;  callback        1    wreg     PTR FTN(unsigned int ,PT
  2693 ;;		 -> znp_msg_handler(1), 
  2694 ;; Auto vars:     Size  Location     Type
  2695 ;;  callback        1   13[BANK0 ] PTR FTN(unsigned int ,PT
  2696 ;;		 -> znp_msg_handler(1), 
  2697 ;; Return value:  Size  Location     Type
  2698 ;;                  1    wreg      void 
  2699 ;; Registers used:
  2700 ;;		wreg, status,2, status,0, pclath, cstack
  2701 ;; Tracked objects:
  2702 ;;		On entry : 300/0
  2703 ;;		On exit  : 300/0
  2704 ;;		Unchanged: 0/0
  2705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2706 ;;      Params:         0       0       0       0
  2707 ;;      Locals:         0       1       0       0
  2708 ;;      Temps:          0       1       0       0
  2709 ;;      Totals:         0       2       0       0
  2710 ;;Total ram usage:        2 bytes
  2711 ;; Hardware stack levels used: 1
  2712 ;; Hardware stack levels required when called: 6
  2713 ;; This function calls:
  2714 ;;		_usart_add_isr_handler
  2715 ;;		_usart_init
  2716 ;; This function is called by:
  2717 ;;		_main
  2718 ;; This function uses a non-reentrant model
  2719 ;;
  2720                           
  2721  06AA                     _znp_init:	
  2722                           ;psect for function _znp_init
  2723                           
  2724                           
  2725                           ;incstack = 0
  2726                           ; Regs used in _znp_init: [wreg+status,2+status,0+pclath+cstack]
  2727                           ;znp_init@callback stored from wreg
  2728  06AA  00AD               	movwf	znp_init@callback
  2729                           
  2730                           ;zb_znp.c: 151:     _zb_znp_cb = callback;
  2731  06AB  082D               	movf	znp_init@callback,w
  2732  06AC  00AC               	movwf	??_znp_init
  2733  06AD  082C               	movf	??_znp_init,w
  2734  06AE  00D3               	movwf	__zb_znp_cb
  2735                           
  2736                           ;zb_znp.c: 154:     TRISBbits.TRISB3 = 0;
  2737  06AF  1683               	bsf	3,5	;RP0=1, select bank1
  2738  06B0  1186               	bcf	6,3	;volatile
  2739                           
  2740                           ;zb_znp.c: 155:     PORTBbits.RB3 = 0;
  2741  06B1  1283               	bcf	3,5	;RP0=0, select bank0
  2742  06B2  1186               	bcf	6,3	;volatile
  2743                           
  2744                           ;zb_znp.c: 157:     usart_init();
  2745  06B3  26B7               	fcall	_usart_init
  2746                           
  2747                           ;zb_znp.c: 158:     usart_add_isr_handler(znp_usart_event_handler);
  2748  06B4  3007               	movlw	(low (fp__znp_usart_event_handler-i1fpbase))& (0+255)
  2749  06B5  2652               	fcall	_usart_add_isr_handler
  2750  06B6  0008               	return
  2751  06B7                     __end_of_znp_init:
  2752                           
  2753                           	psect	text14
  2754  06B7                     __ptext14:	
  2755 ;; *************** function _usart_init *****************
  2756 ;; Defined at:
  2757 ;;		line 3 in file "usart.c"
  2758 ;; Parameters:    Size  Location     Type
  2759 ;;		None
  2760 ;; Auto vars:     Size  Location     Type
  2761 ;;		None
  2762 ;; Return value:  Size  Location     Type
  2763 ;;                  1    wreg      void 
  2764 ;; Registers used:
  2765 ;;		wreg
  2766 ;; Tracked objects:
  2767 ;;		On entry : 300/0
  2768 ;;		On exit  : 300/0
  2769 ;;		Unchanged: 0/0
  2770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2771 ;;      Params:         0       0       0       0
  2772 ;;      Locals:         0       0       0       0
  2773 ;;      Temps:          0       0       0       0
  2774 ;;      Totals:         0       0       0       0
  2775 ;;Total ram usage:        0 bytes
  2776 ;; Hardware stack levels used: 1
  2777 ;; Hardware stack levels required when called: 5
  2778 ;; This function calls:
  2779 ;;		Nothing
  2780 ;; This function is called by:
  2781 ;;		_znp_init
  2782 ;; This function uses a non-reentrant model
  2783 ;;
  2784                           
  2785  06B7                     _usart_init:	
  2786                           ;psect for function _usart_init
  2787                           
  2788                           
  2789                           ;usart.c: 4:     TRISBbits.TRISB1 = 1;
  2790                           
  2791                           ;incstack = 0
  2792                           ; Regs used in _usart_init: [wreg]
  2793  06B7  1683               	bsf	3,5	;RP0=1, select bank1
  2794  06B8  1486               	bsf	6,1	;volatile
  2795                           
  2796                           ;usart.c: 5:     TRISBbits.TRISB2 = 1;
  2797  06B9  1506               	bsf	6,2	;volatile
  2798                           
  2799                           ;usart.c: 7:     TXSTAbits.BRGH = 1;
  2800  06BA  1518               	bsf	24,2	;volatile
  2801                           
  2802                           ;usart.c: 8:     TXSTAbits.SYNC = 0;
  2803  06BB  1218               	bcf	24,4	;volatile
  2804                           
  2805                           ;usart.c: 9:     TXSTAbits.TXEN = 1;
  2806  06BC  1698               	bsf	24,5	;volatile
  2807                           
  2808                           ;usart.c: 10:     SPBRG = 12;
  2809  06BD  300C               	movlw	12
  2810  06BE  0099               	movwf	25	;volatile
  2811                           
  2812                           ;usart.c: 12:     RCSTAbits.SPEN = 1;
  2813  06BF  1283               	bcf	3,5	;RP0=0, select bank0
  2814  06C0  1798               	bsf	24,7	;volatile
  2815                           
  2816                           ;usart.c: 13:     RCSTAbits.CREN = 1;
  2817  06C1  1618               	bsf	24,4	;volatile
  2818  06C2  0008               	return
  2819  06C3                     __end_of_usart_init:
  2820                           
  2821                           	psect	text15
  2822  0652                     __ptext15:	
  2823 ;; *************** function _usart_add_isr_handler *****************
  2824 ;; Defined at:
  2825 ;;		line 10 in file "it_handle.c"
  2826 ;; Parameters:    Size  Location     Type
  2827 ;;  handler         1    wreg     PTR FTN(enum E707,PTR vo
  2828 ;;		 -> znp_usart_event_handler(1), 
  2829 ;; Auto vars:     Size  Location     Type
  2830 ;;  handler         1   11[BANK0 ] PTR FTN(enum E707,PTR vo
  2831 ;;		 -> znp_usart_event_handler(1), 
  2832 ;; Return value:  Size  Location     Type
  2833 ;;                  1    wreg      void 
  2834 ;; Registers used:
  2835 ;;		wreg, status,2, status,0
  2836 ;; Tracked objects:
  2837 ;;		On entry : 300/0
  2838 ;;		On exit  : 300/0
  2839 ;;		Unchanged: 0/0
  2840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2841 ;;      Params:         0       0       0       0
  2842 ;;      Locals:         0       1       0       0
  2843 ;;      Temps:          0       1       0       0
  2844 ;;      Totals:         0       2       0       0
  2845 ;;Total ram usage:        2 bytes
  2846 ;; Hardware stack levels used: 1
  2847 ;; Hardware stack levels required when called: 5
  2848 ;; This function calls:
  2849 ;;		Nothing
  2850 ;; This function is called by:
  2851 ;;		_znp_init
  2852 ;; This function uses a non-reentrant model
  2853 ;;
  2854                           
  2855  0652                     _usart_add_isr_handler:	
  2856                           ;psect for function _usart_add_isr_handler
  2857                           
  2858                           
  2859                           ;incstack = 0
  2860                           ; Regs used in _usart_add_isr_handler: [wreg+status,2+status,0]
  2861                           ;usart_add_isr_handler@handler stored from wreg
  2862  0652  00AB               	movwf	usart_add_isr_handler@handler
  2863                           
  2864                           ;it_handle.c: 11:     PIE1bits.RCIE = 1;
  2865  0653  1683               	bsf	3,5	;RP0=1, select bank1
  2866  0654  168C               	bsf	12,5	;volatile
  2867                           
  2868                           ;it_handle.c: 12:     OPTION_REGbits.T0CS = 0;
  2869  0655  1281               	bcf	1,5	;volatile
  2870                           
  2871                           ;it_handle.c: 13:     OPTION_REGbits.PS = 0b011;
  2872  0656  0801               	movf	1,w	;volatile
  2873  0657  39F8               	andlw	-8
  2874  0658  3803               	iorlw	3
  2875  0659  0081               	movwf	1	;volatile
  2876                           
  2877                           ;it_handle.c: 14:     OPTION_REGbits.PSA = 0;
  2878  065A  1181               	bcf	1,3	;volatile
  2879                           
  2880                           ;it_handle.c: 15:     _usart_rx_isr = handler;
  2881  065B  1283               	bcf	3,5	;RP0=0, select bank0
  2882  065C  082B               	movf	usart_add_isr_handler@handler,w
  2883  065D  00AA               	movwf	??_usart_add_isr_handler
  2884  065E  082A               	movf	??_usart_add_isr_handler,w
  2885  065F  00DA               	movwf	__usart_rx_isr
  2886  0660  0008               	return
  2887  0661                     __end_of_usart_add_isr_handler:
  2888                           
  2889                           	psect	text16
  2890  0417                     __ptext16:	
  2891 ;; *************** function _xEventGroupWaitBits *****************
  2892 ;; Defined at:
  2893 ;;		line 10 in file "event_groups.c"
  2894 ;; Parameters:    Size  Location     Type
  2895 ;;  uxBitsToWait    1    wreg     const unsigned char 
  2896 ;;  ticks_to_wai    4   14[BANK0 ] const unsigned long 
  2897 ;; Auto vars:     Size  Location     Type
  2898 ;;  uxBitsToWait    1   26[BANK0 ] const unsigned char 
  2899 ;;  last_tick       4   22[BANK0 ] unsigned long 
  2900 ;; Return value:  Size  Location     Type
  2901 ;;                  1    wreg      unsigned char 
  2902 ;; Registers used:
  2903 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2904 ;; Tracked objects:
  2905 ;;		On entry : B00/0
  2906 ;;		On exit  : B00/0
  2907 ;;		Unchanged: 0/0
  2908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2909 ;;      Params:         0       4       0       0
  2910 ;;      Locals:         0       5       0       0
  2911 ;;      Temps:          0       4       0       0
  2912 ;;      Totals:         0      13       0       0
  2913 ;;Total ram usage:       13 bytes
  2914 ;; Hardware stack levels used: 1
  2915 ;; Hardware stack levels required when called: 6
  2916 ;; This function calls:
  2917 ;;		_sys_tick_get_tick
  2918 ;; This function is called by:
  2919 ;;		_main
  2920 ;; This function uses a non-reentrant model
  2921 ;;
  2922                           
  2923  0417                     _xEventGroupWaitBits:	
  2924                           ;psect for function _xEventGroupWaitBits
  2925                           
  2926                           
  2927                           ;incstack = 0
  2928                           ; Regs used in _xEventGroupWaitBits: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2929                           ;xEventGroupWaitBits@uxBitsToWaitFor stored from wreg
  2930  0417  00BA               	movwf	xEventGroupWaitBits@uxBitsToWaitFor
  2931                           
  2932                           ;event_groups.c: 10: EventBits_t xEventGroupWaitBits(const EventBits_t uxBitsToWaitFor,;
      +                          event_groups.c: 11:                                 const sys_tick_t ticks_to_wait) {;ev
      +                          ent_groups.c: 13:     sys_tick_t last_tick = sys_tick_get_tick();
  2933  0418  260C               	fcall	_sys_tick_get_tick
  2934  0419  082D               	movf	?_sys_tick_get_tick+3,w
  2935  041A  00B9               	movwf	xEventGroupWaitBits@last_tick+3
  2936  041B  082C               	movf	?_sys_tick_get_tick+2,w
  2937  041C  00B8               	movwf	xEventGroupWaitBits@last_tick+2
  2938  041D  082B               	movf	?_sys_tick_get_tick+1,w
  2939  041E  00B7               	movwf	xEventGroupWaitBits@last_tick+1
  2940  041F  082A               	movf	?_sys_tick_get_tick,w
  2941  0420  00B6               	movwf	xEventGroupWaitBits@last_tick
  2942                           
  2943                           ;event_groups.c: 14:     while (sys_tick_get_tick() - last_tick <= ticks_to_wait)
  2944  0421  2C29               	goto	l2255
  2945  0422                     l2249:
  2946                           
  2947                           ;event_groups.c: 15:         if (uxBits & uxBitsToWaitFor) return uxBits & uxBitsToWaitF
      +                          or;
  2948  0422  085B               	movf	_uxBits,w
  2949  0423  053A               	andwf	xEventGroupWaitBits@uxBitsToWaitFor,w
  2950  0424  1903               	btfsc	3,2
  2951  0425  2C29               	goto	l2255
  2952  0426  085B               	movf	_uxBits,w
  2953  0427  053A               	andwf	xEventGroupWaitBits@uxBitsToWaitFor,w
  2954  0428  0008               	return
  2955  0429                     l2255:
  2956                           
  2957                           ;event_groups.c: 14:     while (sys_tick_get_tick() - last_tick <= ticks_to_wait)
  2958  0429  260C               	fcall	_sys_tick_get_tick
  2959  042A  082A               	movf	?_sys_tick_get_tick,w
  2960  042B  00B2               	movwf	??_xEventGroupWaitBits
  2961  042C  082B               	movf	?_sys_tick_get_tick+1,w
  2962  042D  00B3               	movwf	??_xEventGroupWaitBits+1
  2963  042E  082C               	movf	?_sys_tick_get_tick+2,w
  2964  042F  00B4               	movwf	??_xEventGroupWaitBits+2
  2965  0430  082D               	movf	?_sys_tick_get_tick+3,w
  2966  0431  00B5               	movwf	??_xEventGroupWaitBits+3
  2967  0432  0836               	movf	xEventGroupWaitBits@last_tick,w
  2968  0433  02B2               	subwf	??_xEventGroupWaitBits,f
  2969  0434  0837               	movf	xEventGroupWaitBits@last_tick+1,w
  2970  0435  1C03               	skipc
  2971  0436  0F37               	incfsz	xEventGroupWaitBits@last_tick+1,w
  2972  0437  2C39               	goto	u1041
  2973  0438  2C3A               	goto	u1042
  2974  0439                     u1041:
  2975  0439  02B3               	subwf	??_xEventGroupWaitBits+1,f
  2976  043A                     u1042:
  2977  043A  0838               	movf	xEventGroupWaitBits@last_tick+2,w
  2978  043B  1C03               	skipc
  2979  043C  0F38               	incfsz	xEventGroupWaitBits@last_tick+2,w
  2980  043D  2C3F               	goto	u1043
  2981  043E  2C40               	goto	u1044
  2982  043F                     u1043:
  2983  043F  02B4               	subwf	??_xEventGroupWaitBits+2,f
  2984  0440                     u1044:
  2985  0440  0839               	movf	xEventGroupWaitBits@last_tick+3,w
  2986  0441  1C03               	skipc
  2987  0442  0F39               	incfsz	xEventGroupWaitBits@last_tick+3,w
  2988  0443  2C45               	goto	u1045
  2989  0444  2C46               	goto	u1046
  2990  0445                     u1045:
  2991  0445  02B5               	subwf	??_xEventGroupWaitBits+3,f
  2992  0446                     u1046:
  2993  0446  0835               	movf	??_xEventGroupWaitBits+3,w
  2994  0447  0231               	subwf	xEventGroupWaitBits@ticks_to_wait+3,w
  2995  0448  1D03               	skipz
  2996  0449  2C54               	goto	u1055
  2997  044A  0834               	movf	??_xEventGroupWaitBits+2,w
  2998  044B  0230               	subwf	xEventGroupWaitBits@ticks_to_wait+2,w
  2999  044C  1D03               	skipz
  3000  044D  2C54               	goto	u1055
  3001  044E  0833               	movf	??_xEventGroupWaitBits+1,w
  3002  044F  022F               	subwf	xEventGroupWaitBits@ticks_to_wait+1,w
  3003  0450  1D03               	skipz
  3004  0451  2C54               	goto	u1055
  3005  0452  0832               	movf	??_xEventGroupWaitBits,w
  3006  0453  022E               	subwf	xEventGroupWaitBits@ticks_to_wait,w
  3007  0454                     u1055:
  3008  0454  1803               	skipnc
  3009  0455  2C22               	goto	l2249
  3010                           
  3011                           ;event_groups.c: 16:     return uxBits;
  3012  0456  085B               	movf	_uxBits,w
  3013  0457  0008               	return
  3014  0458                     __end_of_xEventGroupWaitBits:
  3015                           
  3016                           	psect	text17
  3017  060C                     __ptext17:	
  3018 ;; *************** function _sys_tick_get_tick *****************
  3019 ;; Defined at:
  3020 ;;		line 62 in file "sys_tick.c"
  3021 ;; Parameters:    Size  Location     Type
  3022 ;;		None
  3023 ;; Auto vars:     Size  Location     Type
  3024 ;;		None
  3025 ;; Return value:  Size  Location     Type
  3026 ;;                  4   10[BANK0 ] unsigned long 
  3027 ;; Registers used:
  3028 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3029 ;; Tracked objects:
  3030 ;;		On entry : 0/0
  3031 ;;		On exit  : B00/0
  3032 ;;		Unchanged: 0/0
  3033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3034 ;;      Params:         0       4       0       0
  3035 ;;      Locals:         0       0       0       0
  3036 ;;      Temps:          0       0       0       0
  3037 ;;      Totals:         0       4       0       0
  3038 ;;Total ram usage:        4 bytes
  3039 ;; Hardware stack levels used: 1
  3040 ;; Hardware stack levels required when called: 5
  3041 ;; This function calls:
  3042 ;;		Nothing
  3043 ;; This function is called by:
  3044 ;;		_main
  3045 ;;		_xEventGroupWaitBits
  3046 ;; This function uses a non-reentrant model
  3047 ;;
  3048                           
  3049  060C                     _sys_tick_get_tick:	
  3050                           ;psect for function _sys_tick_get_tick
  3051                           
  3052                           
  3053                           ;sys_tick.c: 63:     return _sys_tick.tick;
  3054                           
  3055                           ;incstack = 0
  3056                           ; Regs used in _sys_tick_get_tick: [wreg-fsr0h+status,2+status,0]
  3057  060C  3015               	movlw	21
  3058  060D  3EA0               	addlw	(low (__sys_tick| 0))& (0+255)
  3059  060E  0084               	movwf	4
  3060  060F  1383               	bcf	3,7	;select IRP bank1
  3061  0610  0800               	movf	0,w
  3062  0611  1283               	bcf	3,5	;RP0=0, select bank0
  3063  0612  1303               	bcf	3,6	;RP1=0, select bank0
  3064  0613  00AA               	movwf	?_sys_tick_get_tick
  3065  0614  0A84               	incf	4,f
  3066  0615  0800               	movf	0,w
  3067  0616  00AB               	movwf	?_sys_tick_get_tick+1
  3068  0617  0A84               	incf	4,f
  3069  0618  0800               	movf	0,w
  3070  0619  00AC               	movwf	?_sys_tick_get_tick+2
  3071  061A  0A84               	incf	4,f
  3072  061B  0800               	movf	0,w
  3073  061C  00AD               	movwf	?_sys_tick_get_tick+3
  3074  061D  0008               	return
  3075  061E                     __end_of_sys_tick_get_tick:
  3076                           
  3077                           	psect	text18
  3078  073A                     __ptext18:	
  3079 ;; *************** function _xEventGroupGetBits *****************
  3080 ;; Defined at:
  3081 ;;		line 33 in file "event_groups.c"
  3082 ;; Parameters:    Size  Location     Type
  3083 ;;		None
  3084 ;; Auto vars:     Size  Location     Type
  3085 ;;		None
  3086 ;; Return value:  Size  Location     Type
  3087 ;;                  1    wreg      unsigned char 
  3088 ;; Registers used:
  3089 ;;		wreg
  3090 ;; Tracked objects:
  3091 ;;		On entry : 0/0
  3092 ;;		On exit  : 300/0
  3093 ;;		Unchanged: 0/0
  3094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3095 ;;      Params:         0       0       0       0
  3096 ;;      Locals:         0       0       0       0
  3097 ;;      Temps:          0       0       0       0
  3098 ;;      Totals:         0       0       0       0
  3099 ;;Total ram usage:        0 bytes
  3100 ;; Hardware stack levels used: 1
  3101 ;; Hardware stack levels required when called: 5
  3102 ;; This function calls:
  3103 ;;		Nothing
  3104 ;; This function is called by:
  3105 ;;		_main
  3106 ;; This function uses a non-reentrant model
  3107 ;;
  3108                           
  3109  073A                     _xEventGroupGetBits:	
  3110                           ;psect for function _xEventGroupGetBits
  3111                           
  3112                           
  3113                           ;event_groups.c: 34:     return uxBits;
  3114                           
  3115                           ;incstack = 0
  3116                           ; Regs used in _xEventGroupGetBits: [wreg]
  3117  073A  1283               	bcf	3,5	;RP0=0, select bank0
  3118  073B  1303               	bcf	3,6	;RP1=0, select bank0
  3119  073C  085B               	movf	_uxBits,w
  3120  073D  0008               	return
  3121  073E                     __end_of_xEventGroupGetBits:
  3122                           
  3123                           	psect	text19
  3124  0746                     __ptext19:	
  3125 ;; *************** function _xEventGroupCreate *****************
  3126 ;; Defined at:
  3127 ;;		line 6 in file "event_groups.c"
  3128 ;; Parameters:    Size  Location     Type
  3129 ;;		None
  3130 ;; Auto vars:     Size  Location     Type
  3131 ;;		None
  3132 ;; Return value:  Size  Location     Type
  3133 ;;                  1    wreg      void 
  3134 ;; Registers used:
  3135 ;;		status,2
  3136 ;; Tracked objects:
  3137 ;;		On entry : B00/100
  3138 ;;		On exit  : B00/0
  3139 ;;		Unchanged: 800/0
  3140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3141 ;;      Params:         0       0       0       0
  3142 ;;      Locals:         0       0       0       0
  3143 ;;      Temps:          0       0       0       0
  3144 ;;      Totals:         0       0       0       0
  3145 ;;Total ram usage:        0 bytes
  3146 ;; Hardware stack levels used: 1
  3147 ;; Hardware stack levels required when called: 5
  3148 ;; This function calls:
  3149 ;;		Nothing
  3150 ;; This function is called by:
  3151 ;;		_main
  3152 ;; This function uses a non-reentrant model
  3153 ;;
  3154                           
  3155  0746                     _xEventGroupCreate:	
  3156                           ;psect for function _xEventGroupCreate
  3157                           
  3158                           
  3159                           ;event_groups.c: 7:     uxBits = 0;
  3160                           
  3161                           ;incstack = 0
  3162                           ; Regs used in _xEventGroupCreate: [status,2]
  3163  0746  1283               	bcf	3,5	;RP0=0, select bank0
  3164  0747  01DB               	clrf	_uxBits
  3165  0748  0008               	return
  3166  0749                     __end_of_xEventGroupCreate:
  3167                           
  3168                           	psect	text20
  3169  05B7                     __ptext20:	
  3170 ;; *************** function _sys_tick_init *****************
  3171 ;; Defined at:
  3172 ;;		line 46 in file "sys_tick.c"
  3173 ;; Parameters:    Size  Location     Type
  3174 ;;		None
  3175 ;; Auto vars:     Size  Location     Type
  3176 ;;		None
  3177 ;; Return value:  Size  Location     Type
  3178 ;;                  1    wreg      void 
  3179 ;; Registers used:
  3180 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3181 ;; Tracked objects:
  3182 ;;		On entry : B00/0
  3183 ;;		On exit  : B00/100
  3184 ;;		Unchanged: 0/0
  3185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3186 ;;      Params:         0       0       0       0
  3187 ;;      Locals:         0       0       0       0
  3188 ;;      Temps:          0       0       0       0
  3189 ;;      Totals:         0       0       0       0
  3190 ;;Total ram usage:        0 bytes
  3191 ;; Hardware stack levels used: 1
  3192 ;; Hardware stack levels required when called: 6
  3193 ;; This function calls:
  3194 ;;		_timer1_add_isr_handler
  3195 ;; This function is called by:
  3196 ;;		_main
  3197 ;; This function uses a non-reentrant model
  3198 ;;
  3199                           
  3200  05B7                     _sys_tick_init:	
  3201                           ;psect for function _sys_tick_init
  3202                           
  3203                           
  3204                           ;sys_tick.c: 51:     T1CONbits.T1CKPS = 0b01;
  3205                           
  3206                           ;incstack = 0
  3207                           ; Regs used in _sys_tick_init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3208  05B7  0810               	movf	16,w	;volatile
  3209  05B8  39CF               	andlw	-49
  3210  05B9  3810               	iorlw	16
  3211  05BA  0090               	movwf	16	;volatile
  3212                           
  3213                           ;sys_tick.c: 54:     T1CONbits.TMR1CS = 0;
  3214  05BB  1090               	bcf	16,1	;volatile
  3215                           
  3216                           ;sys_tick.c: 55:     TMR1 = (65535U) - 50000U;
  3217  05BC  303C               	movlw	60
  3218  05BD  008F               	movwf	15	;volatile
  3219  05BE  30AF               	movlw	175
  3220  05BF  008E               	movwf	14	;volatile
  3221                           
  3222                           ;sys_tick.c: 56:     timer1_add_isr_handler(sys_tick_handler);
  3223  05C0  3005               	movlw	(low (fp__sys_tick_handler-i1fpbase))& (0+255)
  3224  05C1  26FB               	fcall	_timer1_add_isr_handler
  3225                           
  3226                           ;sys_tick.c: 57:     T1CONbits.TMR1ON = 1;
  3227  05C2  1410               	bsf	16,0	;volatile
  3228                           
  3229                           ;sys_tick.c: 58:     _sys_tick.tick = 0;
  3230  05C3  30B5               	movlw	low ((__sys_tick| 0+21))
  3231  05C4  0084               	movwf	4
  3232  05C5  0180               	clrf	0
  3233  05C6  0A84               	incf	4,f
  3234  05C7  0180               	clrf	0
  3235  05C8  0A84               	incf	4,f
  3236  05C9  0180               	clrf	0
  3237  05CA  0A84               	incf	4,f
  3238  05CB  0180               	clrf	0
  3239                           
  3240                           ;sys_tick.c: 59:     _sys_tick._handler_index = 0;
  3241  05CC  30F8               	movlw	-8
  3242  05CD  1683               	bsf	3,5	;RP0=1, select bank1
  3243  05CE  05A0               	andwf	__sys_tick^(0+128),f
  3244  05CF  0008               	return
  3245  05D0                     __end_of_sys_tick_init:
  3246                           
  3247                           	psect	text21
  3248  06FB                     __ptext21:	
  3249 ;; *************** function _timer1_add_isr_handler *****************
  3250 ;; Defined at:
  3251 ;;		line 18 in file "it_handle.c"
  3252 ;; Parameters:    Size  Location     Type
  3253 ;;  handler         1    wreg     PTR FTN()void 
  3254 ;;		 -> sys_tick_handler(1), 
  3255 ;; Auto vars:     Size  Location     Type
  3256 ;;  handler         1   11[BANK0 ] PTR FTN()void 
  3257 ;;		 -> sys_tick_handler(1), 
  3258 ;; Return value:  Size  Location     Type
  3259 ;;                  1    wreg      void 
  3260 ;; Registers used:
  3261 ;;		wreg
  3262 ;; Tracked objects:
  3263 ;;		On entry : B00/0
  3264 ;;		On exit  : B00/0
  3265 ;;		Unchanged: 800/0
  3266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3267 ;;      Params:         0       0       0       0
  3268 ;;      Locals:         0       1       0       0
  3269 ;;      Temps:          0       1       0       0
  3270 ;;      Totals:         0       2       0       0
  3271 ;;Total ram usage:        2 bytes
  3272 ;; Hardware stack levels used: 1
  3273 ;; Hardware stack levels required when called: 5
  3274 ;; This function calls:
  3275 ;;		Nothing
  3276 ;; This function is called by:
  3277 ;;		_sys_tick_init
  3278 ;; This function uses a non-reentrant model
  3279 ;;
  3280                           
  3281  06FB                     _timer1_add_isr_handler:	
  3282                           ;psect for function _timer1_add_isr_handler
  3283                           
  3284                           
  3285                           ;incstack = 0
  3286                           ; Regs used in _timer1_add_isr_handler: [wreg]
  3287                           ;timer1_add_isr_handler@handler stored from wreg
  3288  06FB  00AB               	movwf	timer1_add_isr_handler@handler
  3289                           
  3290                           ;it_handle.c: 19:     PIR1bits.TMR1IF = 0;
  3291  06FC  100C               	bcf	12,0	;volatile
  3292                           
  3293                           ;it_handle.c: 20:     PIE1bits.TMR1IE = 1;
  3294  06FD  1683               	bsf	3,5	;RP0=1, select bank1
  3295  06FE  140C               	bsf	12,0	;volatile
  3296                           
  3297                           ;it_handle.c: 21:     _tmr1_isr = handler;
  3298  06FF  1283               	bcf	3,5	;RP0=0, select bank0
  3299  0700  082B               	movf	timer1_add_isr_handler@handler,w
  3300  0701  00AA               	movwf	??_timer1_add_isr_handler
  3301  0702  082A               	movf	??_timer1_add_isr_handler,w
  3302  0703  00D9               	movwf	__tmr1_isr
  3303  0704  0008               	return
  3304  0705                     __end_of_timer1_add_isr_handler:
  3305                           
  3306                           	psect	text22
  3307  0661                     __ptext22:	
  3308 ;; *************** function _relay_init *****************
  3309 ;; Defined at:
  3310 ;;		line 56 in file "main.c"
  3311 ;; Parameters:    Size  Location     Type
  3312 ;;		None
  3313 ;; Auto vars:     Size  Location     Type
  3314 ;;		None
  3315 ;; Return value:  Size  Location     Type
  3316 ;;                  1    wreg      void 
  3317 ;; Registers used:
  3318 ;;		wreg, status,2, status,0, pclath, cstack
  3319 ;; Tracked objects:
  3320 ;;		On entry : 300/0
  3321 ;;		On exit  : 300/0
  3322 ;;		Unchanged: 0/0
  3323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3324 ;;      Params:         0       0       0       0
  3325 ;;      Locals:         0       0       0       0
  3326 ;;      Temps:          0       1       0       0
  3327 ;;      Totals:         0       1       0       0
  3328 ;;Total ram usage:        1 bytes
  3329 ;; Hardware stack levels used: 1
  3330 ;; Hardware stack levels required when called: 6
  3331 ;; This function calls:
  3332 ;;		_xEventGroupClearBits
  3333 ;; This function is called by:
  3334 ;;		_main
  3335 ;; This function uses a non-reentrant model
  3336 ;;
  3337                           
  3338  0661                     _relay_init:	
  3339                           ;psect for function _relay_init
  3340                           
  3341                           
  3342                           ;main.c: 57:     relay_data.channels_num = 3;
  3343                           
  3344                           ;incstack = 0
  3345                           ; Regs used in _relay_init: [wreg+status,2+status,0+pclath+cstack]
  3346  0661  3003               	movlw	3
  3347  0662  00AC               	movwf	??_relay_init
  3348  0663  082C               	movf	??_relay_init,w
  3349  0664  00DC               	movwf	_relay_data
  3350                           
  3351                           ;main.c: 59:     TRISAbits.TRISA7 = 0;
  3352  0665  1683               	bsf	3,5	;RP0=1, select bank1
  3353  0666  1385               	bcf	5,7	;volatile
  3354                           
  3355                           ;main.c: 60:     TRISAbits.TRISA0 = 0;
  3356  0667  1005               	bcf	5,0	;volatile
  3357                           
  3358                           ;main.c: 61:     TRISAbits.TRISA1 = 0;
  3359  0668  1085               	bcf	5,1	;volatile
  3360                           
  3361                           ;main.c: 63:     PORTAbits.RA7 = 1;
  3362  0669  1283               	bcf	3,5	;RP0=0, select bank0
  3363  066A  1785               	bsf	5,7	;volatile
  3364                           
  3365                           ;main.c: 64:     PORTAbits.RA0 = 1;
  3366  066B  1405               	bsf	5,0	;volatile
  3367                           
  3368                           ;main.c: 65:     PORTAbits.RA1 = 1;
  3369  066C  1485               	bsf	5,1	;volatile
  3370                           
  3371                           ;main.c: 66:     xEventGroupClearBits((1 << 1));
  3372  066D  3002               	movlw	2
  3373  066E  2705               	fcall	_xEventGroupClearBits
  3374  066F  0008               	return
  3375  0670                     __end_of_relay_init:
  3376                           
  3377                           	psect	text23
  3378  0705                     __ptext23:	
  3379 ;; *************** function _xEventGroupClearBits *****************
  3380 ;; Defined at:
  3381 ;;		line 26 in file "event_groups.c"
  3382 ;; Parameters:    Size  Location     Type
  3383 ;;  uxBitsToClea    1    wreg     const unsigned char 
  3384 ;; Auto vars:     Size  Location     Type
  3385 ;;  uxBitsToClea    1   11[BANK0 ] const unsigned char 
  3386 ;; Return value:  Size  Location     Type
  3387 ;;                  1    wreg      unsigned char 
  3388 ;; Registers used:
  3389 ;;		wreg, status,2, status,0
  3390 ;; Tracked objects:
  3391 ;;		On entry : 300/0
  3392 ;;		On exit  : 300/0
  3393 ;;		Unchanged: 0/0
  3394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3395 ;;      Params:         0       0       0       0
  3396 ;;      Locals:         0       1       0       0
  3397 ;;      Temps:          0       1       0       0
  3398 ;;      Totals:         0       2       0       0
  3399 ;;Total ram usage:        2 bytes
  3400 ;; Hardware stack levels used: 1
  3401 ;; Hardware stack levels required when called: 5
  3402 ;; This function calls:
  3403 ;;		Nothing
  3404 ;; This function is called by:
  3405 ;;		_relay_init
  3406 ;;		_main
  3407 ;; This function uses a non-reentrant model
  3408 ;;
  3409                           
  3410  0705                     _xEventGroupClearBits:	
  3411                           ;psect for function _xEventGroupClearBits
  3412                           
  3413                           
  3414                           ;incstack = 0
  3415                           ; Regs used in _xEventGroupClearBits: [wreg+status,2+status,0]
  3416                           ;xEventGroupClearBits@uxBitsToClear stored from wreg
  3417  0705  00AB               	movwf	xEventGroupClearBits@uxBitsToClear
  3418  0706                     l366:	
  3419                           ;event_groups.c: 27:     do {
  3420                           
  3421                           
  3422                           ;event_groups.c: 28:         uxBits &= ~uxBitsToClear;
  3423  0706  092B               	comf	xEventGroupClearBits@uxBitsToClear,w
  3424  0707  00AA               	movwf	??_xEventGroupClearBits
  3425  0708  082A               	movf	??_xEventGroupClearBits,w
  3426  0709  05DB               	andwf	_uxBits,f
  3427                           
  3428                           ;event_groups.c: 29:     } while (uxBits & uxBitsToClear);
  3429  070A  085B               	movf	_uxBits,w
  3430  070B  052B               	andwf	xEventGroupClearBits@uxBitsToClear,w
  3431  070C  1903               	btfsc	3,2
  3432  070D  0008               	return
  3433  070E  2F06               	goto	l366
  3434  070F                     __end_of_xEventGroupClearBits:
  3435                           
  3436                           	psect	text24
  3437  070F                     __ptext24:	
  3438 ;; *************** function _led_ind_init *****************
  3439 ;; Defined at:
  3440 ;;		line 13 in file "led_ind.c"
  3441 ;; Parameters:    Size  Location     Type
  3442 ;;		None
  3443 ;; Auto vars:     Size  Location     Type
  3444 ;;		None
  3445 ;; Return value:  Size  Location     Type
  3446 ;;                  1    wreg      void 
  3447 ;; Registers used:
  3448 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3449 ;; Tracked objects:
  3450 ;;		On entry : 0/0
  3451 ;;		On exit  : 300/0
  3452 ;;		Unchanged: 0/0
  3453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3454 ;;      Params:         0       0       0       0
  3455 ;;      Locals:         0       0       0       0
  3456 ;;      Temps:          0       1       0       0
  3457 ;;      Totals:         0       1       0       0
  3458 ;;Total ram usage:        1 bytes
  3459 ;; Hardware stack levels used: 1
  3460 ;; Hardware stack levels required when called: 7
  3461 ;; This function calls:
  3462 ;;		_led_ind_on
  3463 ;;		_sys_tick_register_callback_handler
  3464 ;; This function is called by:
  3465 ;;		_main
  3466 ;; This function uses a non-reentrant model
  3467 ;;
  3468                           
  3469  070F                     _led_ind_init:	
  3470                           ;psect for function _led_ind_init
  3471                           
  3472                           
  3473                           ;led_ind.c: 14:     TRISAbits.TRISA2 = 0;
  3474                           
  3475                           ;incstack = 0
  3476                           ; Regs used in _led_ind_init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3477  070F  1683               	bsf	3,5	;RP0=1, select bank1
  3478  0710  1303               	bcf	3,6	;RP1=0, select bank1
  3479  0711  1105               	bcf	5,2	;volatile
  3480                           
  3481                           ;led_ind.c: 15:     led_blink_handle = sys_tick_register_callback_handler(_blink_handler
      +                          );
  3482  0712  3004               	movlw	(low (fp___blink_handler-i1fpbase))& (0+255)
  3483  0713  23C2               	fcall	_sys_tick_register_callback_handler
  3484  0714  00B2               	movwf	??_led_ind_init
  3485  0715  0832               	movf	??_led_ind_init,w
  3486  0716  00D4               	movwf	_led_blink_handle
  3487                           
  3488                           ;led_ind.c: 16:     led_ind_on();
  3489  0717  2749               	fcall	_led_ind_on
  3490  0718  0008               	return
  3491  0719                     __end_of_led_ind_init:
  3492                           
  3493                           	psect	text25
  3494  03C2                     __ptext25:	
  3495 ;; *************** function _sys_tick_register_callback_handler *****************
  3496 ;; Defined at:
  3497 ;;		line 66 in file "sys_tick.c"
  3498 ;; Parameters:    Size  Location     Type
  3499 ;;  cb              1    wreg     PTR FTN()void 
  3500 ;;		 -> _blink_handler(1), 
  3501 ;; Auto vars:     Size  Location     Type
  3502 ;;  cb              1   16[BANK0 ] PTR FTN()void 
  3503 ;;		 -> _blink_handler(1), 
  3504 ;;  _handler_ind    1   17[BANK0 ] unsigned char 
  3505 ;; Return value:  Size  Location     Type
  3506 ;;                  1    wreg      unsigned char 
  3507 ;; Registers used:
  3508 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3509 ;; Tracked objects:
  3510 ;;		On entry : 300/100
  3511 ;;		On exit  : 300/0
  3512 ;;		Unchanged: 0/0
  3513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3514 ;;      Params:         0       0       0       0
  3515 ;;      Locals:         0       2       0       0
  3516 ;;      Temps:          0       2       0       0
  3517 ;;      Totals:         0       4       0       0
  3518 ;;Total ram usage:        4 bytes
  3519 ;; Hardware stack levels used: 1
  3520 ;; Hardware stack levels required when called: 6
  3521 ;; This function calls:
  3522 ;;		___bmul
  3523 ;; This function is called by:
  3524 ;;		_led_ind_init
  3525 ;; This function uses a non-reentrant model
  3526 ;;
  3527                           
  3528  03C2                     _sys_tick_register_callback_handler:	
  3529                           ;psect for function _sys_tick_register_callback_handler
  3530                           
  3531                           
  3532                           ;incstack = 0
  3533                           ; Regs used in _sys_tick_register_callback_handler: [wreg-fsr0h+status,2+status,0+pclath
      +                          +cstack]
  3534                           ;sys_tick_register_callback_handler@cb stored from wreg
  3535  03C2  1283               	bcf	3,5	;RP0=0, select bank0
  3536  03C3  00B0               	movwf	sys_tick_register_callback_handler@cb
  3537                           
  3538                           ;sys_tick.c: 67:     uint8_t _handler_index = _sys_tick._handler_index;
  3539  03C4  1683               	bsf	3,5	;RP0=1, select bank1
  3540  03C5  0820               	movf	__sys_tick^(0+128),w
  3541  03C6  3907               	andlw	7
  3542  03C7  1283               	bcf	3,5	;RP0=0, select bank0
  3543  03C8  00AE               	movwf	??_sys_tick_register_callback_handler
  3544  03C9  082E               	movf	??_sys_tick_register_callback_handler,w
  3545  03CA  00B1               	movwf	sys_tick_register_callback_handler@_handler_index
  3546                           
  3547                           ;sys_tick.c: 68:     if (_handler_index < 2) {
  3548  03CB  3002               	movlw	2
  3549  03CC  0231               	subwf	sys_tick_register_callback_handler@_handler_index,w
  3550  03CD  1803               	skipnc
  3551  03CE  2C15               	goto	l1979
  3552                           
  3553                           ;sys_tick.c: 69:         _sys_tick._handle[_handler_index].cb = cb;
  3554  03CF  0830               	movf	sys_tick_register_callback_handler@cb,w
  3555  03D0  00AE               	movwf	??_sys_tick_register_callback_handler
  3556  03D1  300A               	movlw	10
  3557  03D2  00AF               	movwf	??_sys_tick_register_callback_handler+1
  3558  03D3  082F               	movf	??_sys_tick_register_callback_handler+1,w
  3559  03D4  00AA               	movwf	___bmul@multiplicand
  3560  03D5  0831               	movf	sys_tick_register_callback_handler@_handler_index,w
  3561  03D6  2630               	fcall	___bmul
  3562  03D7  3EAA               	addlw	(low ((__sys_tick| 0+10)))& (0+255)
  3563  03D8  0084               	movwf	4
  3564  03D9  082E               	movf	??_sys_tick_register_callback_handler,w
  3565  03DA  1383               	bcf	3,7	;select IRP bank1
  3566  03DB  0080               	movwf	0
  3567                           
  3568                           ;sys_tick.c: 70:         _sys_tick._handle[_handler_index]._en = 0;
  3569  03DC  300A               	movlw	10
  3570  03DD  00AE               	movwf	??_sys_tick_register_callback_handler
  3571  03DE  082E               	movf	??_sys_tick_register_callback_handler,w
  3572  03DF  00AA               	movwf	___bmul@multiplicand
  3573  03E0  0831               	movf	sys_tick_register_callback_handler@_handler_index,w
  3574  03E1  2630               	fcall	___bmul
  3575  03E2  3EA1               	addlw	(low ((__sys_tick| 0+1)))& (0+255)
  3576  03E3  0084               	movwf	4
  3577  03E4  1383               	bcf	3,7	;select IRP bank1
  3578  03E5  1000               	bcf	0,0
  3579                           
  3580                           ;sys_tick.c: 71:         _sys_tick._handle[_handler_index]._handle = _handler_index;
  3581  03E6  0831               	movf	sys_tick_register_callback_handler@_handler_index,w
  3582  03E7  00AE               	movwf	??_sys_tick_register_callback_handler
  3583  03E8  300A               	movlw	10
  3584  03E9  00AF               	movwf	??_sys_tick_register_callback_handler+1
  3585  03EA  082F               	movf	??_sys_tick_register_callback_handler+1,w
  3586  03EB  00AA               	movwf	___bmul@multiplicand
  3587  03EC  0831               	movf	sys_tick_register_callback_handler@_handler_index,w
  3588  03ED  2630               	fcall	___bmul
  3589  03EE  3EA1               	addlw	(low ((__sys_tick| 0+1)))& (0+255)
  3590  03EF  0084               	movwf	4
  3591  03F0  0DAE               	rlf	??_sys_tick_register_callback_handler,f
  3592  03F1  0DAE               	rlf	??_sys_tick_register_callback_handler,f
  3593  03F2  1383               	bcf	3,7	;select IRP bank1
  3594  03F3  0800               	movf	0,w
  3595  03F4  062E               	xorwf	??_sys_tick_register_callback_handler,w
  3596  03F5  39E3               	andlw	-29
  3597  03F6  062E               	xorwf	??_sys_tick_register_callback_handler,w
  3598  03F7  0080               	movwf	0
  3599                           
  3600                           ;sys_tick.c: 72:         _sys_tick._handler_index++;
  3601  03F8  1683               	bsf	3,5	;RP0=1, select bank1
  3602  03F9  0820               	movf	__sys_tick^(0+128),w
  3603  03FA  3907               	andlw	7
  3604  03FB  1283               	bcf	3,5	;RP0=0, select bank0
  3605  03FC  00AE               	movwf	??_sys_tick_register_callback_handler
  3606  03FD  0AAE               	incf	??_sys_tick_register_callback_handler,f
  3607  03FE  1683               	bsf	3,5	;RP0=1, select bank1
  3608  03FF  0820               	movf	__sys_tick^(0+128),w
  3609  0400  1283               	bcf	3,5	;RP0=0, select bank0
  3610  0401  062E               	xorwf	??_sys_tick_register_callback_handler,w
  3611  0402  39F8               	andlw	-8
  3612  0403  062E               	xorwf	??_sys_tick_register_callback_handler,w
  3613  0404  1683               	bsf	3,5	;RP0=1, select bank1
  3614  0405  00A0               	movwf	__sys_tick^(0+128)
  3615                           
  3616                           ;sys_tick.c: 73:         return _sys_tick._handle[_handler_index]._handle;
  3617  0406  300A               	movlw	10
  3618  0407  1283               	bcf	3,5	;RP0=0, select bank0
  3619  0408  00AE               	movwf	??_sys_tick_register_callback_handler
  3620  0409  082E               	movf	??_sys_tick_register_callback_handler,w
  3621  040A  00AA               	movwf	___bmul@multiplicand
  3622  040B  0831               	movf	sys_tick_register_callback_handler@_handler_index,w
  3623  040C  2630               	fcall	___bmul
  3624  040D  3EA1               	addlw	(low ((__sys_tick| 0+1)))& (0+255)
  3625  040E  0084               	movwf	4
  3626  040F  1383               	bcf	3,7	;select IRP bank1
  3627  0410  0C00               	rrf	0,w
  3628  0411  00AF               	movwf	??_sys_tick_register_callback_handler+1
  3629  0412  0C2F               	rrf	??_sys_tick_register_callback_handler+1,w
  3630  0413  3907               	andlw	7
  3631  0414  0008               	return
  3632  0415                     l1979:
  3633  0415  30FF               	movlw	255
  3634  0416  0008               	return
  3635  0417                     __end_of_sys_tick_register_callback_handler:
  3636                           
  3637                           	psect	text26
  3638  0749                     __ptext26:	
  3639 ;; *************** function _led_ind_on *****************
  3640 ;; Defined at:
  3641 ;;		line 28 in file "led_ind.c"
  3642 ;; Parameters:    Size  Location     Type
  3643 ;;		None
  3644 ;; Auto vars:     Size  Location     Type
  3645 ;;		None
  3646 ;; Return value:  Size  Location     Type
  3647 ;;                  1    wreg      void 
  3648 ;; Registers used:
  3649 ;;		None
  3650 ;; Tracked objects:
  3651 ;;		On entry : 300/0
  3652 ;;		On exit  : 300/0
  3653 ;;		Unchanged: 0/0
  3654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3655 ;;      Params:         0       0       0       0
  3656 ;;      Locals:         0       0       0       0
  3657 ;;      Temps:          0       0       0       0
  3658 ;;      Totals:         0       0       0       0
  3659 ;;Total ram usage:        0 bytes
  3660 ;; Hardware stack levels used: 1
  3661 ;; Hardware stack levels required when called: 5
  3662 ;; This function calls:
  3663 ;;		Nothing
  3664 ;; This function is called by:
  3665 ;;		_main
  3666 ;;		_led_ind_init
  3667 ;; This function uses a non-reentrant model
  3668 ;;
  3669                           
  3670  0749                     _led_ind_on:	
  3671                           ;psect for function _led_ind_on
  3672                           
  3673                           
  3674                           ;led_ind.c: 29:     PORTAbits.RA2 = 1;
  3675                           
  3676                           ;incstack = 0
  3677                           ; Regs used in _led_ind_on: []
  3678  0749  1505               	bsf	5,2	;volatile
  3679  074A  0008               	return
  3680  074B                     __end_of_led_ind_on:
  3681                           
  3682                           	psect	text27
  3683  073E                     __ptext27:	
  3684 ;; *************** function _led_ind_blink_stop *****************
  3685 ;; Defined at:
  3686 ;;		line 23 in file "led_ind.c"
  3687 ;; Parameters:    Size  Location     Type
  3688 ;;		None
  3689 ;; Auto vars:     Size  Location     Type
  3690 ;;		None
  3691 ;; Return value:  Size  Location     Type
  3692 ;;                  1    wreg      void 
  3693 ;; Registers used:
  3694 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3695 ;; Tracked objects:
  3696 ;;		On entry : 300/0
  3697 ;;		On exit  : 300/0
  3698 ;;		Unchanged: 0/0
  3699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3700 ;;      Params:         0       0       0       0
  3701 ;;      Locals:         0       0       0       0
  3702 ;;      Temps:          0       0       0       0
  3703 ;;      Totals:         0       0       0       0
  3704 ;;Total ram usage:        0 bytes
  3705 ;; Hardware stack levels used: 1
  3706 ;; Hardware stack levels required when called: 7
  3707 ;; This function calls:
  3708 ;;		_led_ind_off
  3709 ;;		_sys_tick_stop
  3710 ;; This function is called by:
  3711 ;;		_main
  3712 ;; This function uses a non-reentrant model
  3713 ;;
  3714                           
  3715  073E                     _led_ind_blink_stop:	
  3716                           ;psect for function _led_ind_blink_stop
  3717                           
  3718                           
  3719                           ;led_ind.c: 24:     sys_tick_stop(led_blink_handle);
  3720                           
  3721                           ;incstack = 0
  3722                           ; Regs used in _led_ind_blink_stop: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3723  073E  0854               	movf	_led_blink_handle,w
  3724  073F  24CF               	fcall	_sys_tick_stop
  3725                           
  3726                           ;led_ind.c: 25:     led_ind_off();
  3727  0740  2742               	fcall	_led_ind_off
  3728  0741  0008               	return
  3729  0742                     __end_of_led_ind_blink_stop:
  3730                           
  3731                           	psect	text28
  3732  04CF                     __ptext28:	
  3733 ;; *************** function _sys_tick_stop *****************
  3734 ;; Defined at:
  3735 ;;		line 100 in file "sys_tick.c"
  3736 ;; Parameters:    Size  Location     Type
  3737 ;;  handle          1    wreg     unsigned char 
  3738 ;; Auto vars:     Size  Location     Type
  3739 ;;  handle          1   16[BANK0 ] unsigned char 
  3740 ;;  i               1   17[BANK0 ] unsigned char 
  3741 ;; Return value:  Size  Location     Type
  3742 ;;                  1    wreg      void 
  3743 ;; Registers used:
  3744 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3745 ;; Tracked objects:
  3746 ;;		On entry : 300/0
  3747 ;;		On exit  : 300/0
  3748 ;;		Unchanged: 0/0
  3749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3750 ;;      Params:         0       0       0       0
  3751 ;;      Locals:         0       2       0       0
  3752 ;;      Temps:          0       2       0       0
  3753 ;;      Totals:         0       4       0       0
  3754 ;;Total ram usage:        4 bytes
  3755 ;; Hardware stack levels used: 1
  3756 ;; Hardware stack levels required when called: 6
  3757 ;; This function calls:
  3758 ;;		___bmul
  3759 ;; This function is called by:
  3760 ;;		_led_ind_blink_stop
  3761 ;; This function uses a non-reentrant model
  3762 ;;
  3763                           
  3764  04CF                     _sys_tick_stop:	
  3765                           ;psect for function _sys_tick_stop
  3766                           
  3767                           
  3768                           ;incstack = 0
  3769                           ; Regs used in _sys_tick_stop: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3770                           ;sys_tick_stop@handle stored from wreg
  3771  04CF  00B0               	movwf	sys_tick_stop@handle
  3772                           
  3773                           ;sys_tick.c: 101:     for (uint8_t i = 0; i < _sys_tick._handler_index; i++) {
  3774  04D0  01B1               	clrf	sys_tick_stop@i
  3775  04D1                     l416:
  3776  04D1  1683               	bsf	3,5	;RP0=1, select bank1
  3777  04D2  0820               	movf	__sys_tick^(0+128),w
  3778  04D3  3907               	andlw	7
  3779  04D4  1283               	bcf	3,5	;RP0=0, select bank0
  3780  04D5  0231               	subwf	sys_tick_stop@i,w
  3781  04D6  1803               	btfsc	3,0
  3782  04D7  0008               	return
  3783                           
  3784                           ;sys_tick.c: 102:         if (_sys_tick._handle[i]._handle == handle) {
  3785  04D8  300A               	movlw	10
  3786  04D9  00AE               	movwf	??_sys_tick_stop
  3787  04DA  082E               	movf	??_sys_tick_stop,w
  3788  04DB  00AA               	movwf	___bmul@multiplicand
  3789  04DC  0831               	movf	sys_tick_stop@i,w
  3790  04DD  2630               	fcall	___bmul
  3791  04DE  3EA1               	addlw	(low ((__sys_tick| 0+1)))& (0+255)
  3792  04DF  0084               	movwf	4
  3793  04E0  1383               	bcf	3,7	;select IRP bank1
  3794  04E1  0C00               	rrf	0,w
  3795  04E2  00AF               	movwf	??_sys_tick_stop+1
  3796  04E3  0C2F               	rrf	??_sys_tick_stop+1,w
  3797  04E4  3907               	andlw	7
  3798  04E5  0630               	xorwf	sys_tick_stop@handle,w
  3799  04E6  1D03               	skipz
  3800  04E7  2CF3               	goto	l2001
  3801                           
  3802                           ;sys_tick.c: 103:             _sys_tick._handle[i]._en = 0;
  3803  04E8  300A               	movlw	10
  3804  04E9  00AE               	movwf	??_sys_tick_stop
  3805  04EA  082E               	movf	??_sys_tick_stop,w
  3806  04EB  00AA               	movwf	___bmul@multiplicand
  3807  04EC  0831               	movf	sys_tick_stop@i,w
  3808  04ED  2630               	fcall	___bmul
  3809  04EE  3EA1               	addlw	(low ((__sys_tick| 0+1)))& (0+255)
  3810  04EF  0084               	movwf	4
  3811  04F0  1383               	bcf	3,7	;select IRP bank1
  3812  04F1  1000               	bcf	0,0
  3813  04F2  0008               	return
  3814  04F3                     l2001:
  3815                           
  3816                           ;sys_tick.c: 106:     }
  3817  04F3  3001               	movlw	1
  3818  04F4  00AE               	movwf	??_sys_tick_stop
  3819  04F5  082E               	movf	??_sys_tick_stop,w
  3820  04F6  07B1               	addwf	sys_tick_stop@i,f
  3821  04F7  2CD1               	goto	l416
  3822  04F8                     __end_of_sys_tick_stop:
  3823                           
  3824                           	psect	text29
  3825  0742                     __ptext29:	
  3826 ;; *************** function _led_ind_off *****************
  3827 ;; Defined at:
  3828 ;;		line 32 in file "led_ind.c"
  3829 ;; Parameters:    Size  Location     Type
  3830 ;;		None
  3831 ;; Auto vars:     Size  Location     Type
  3832 ;;		None
  3833 ;; Return value:  Size  Location     Type
  3834 ;;                  1    wreg      void 
  3835 ;; Registers used:
  3836 ;;		None
  3837 ;; Tracked objects:
  3838 ;;		On entry : 0/0
  3839 ;;		On exit  : 300/0
  3840 ;;		Unchanged: 0/0
  3841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3842 ;;      Params:         0       0       0       0
  3843 ;;      Locals:         0       0       0       0
  3844 ;;      Temps:          0       0       0       0
  3845 ;;      Totals:         0       0       0       0
  3846 ;;Total ram usage:        0 bytes
  3847 ;; Hardware stack levels used: 1
  3848 ;; Hardware stack levels required when called: 5
  3849 ;; This function calls:
  3850 ;;		Nothing
  3851 ;; This function is called by:
  3852 ;;		_main
  3853 ;;		_led_ind_blink_stop
  3854 ;; This function uses a non-reentrant model
  3855 ;;
  3856                           
  3857  0742                     _led_ind_off:	
  3858                           ;psect for function _led_ind_off
  3859                           
  3860                           
  3861                           ;led_ind.c: 33:     PORTAbits.RA2 = 0;
  3862                           
  3863                           ;incstack = 0
  3864                           ; Regs used in _led_ind_off: []
  3865  0742  1283               	bcf	3,5	;RP0=0, select bank0
  3866  0743  1303               	bcf	3,6	;RP1=0, select bank0
  3867  0744  1105               	bcf	5,2	;volatile
  3868  0745  0008               	return
  3869  0746                     __end_of_led_ind_off:
  3870                           
  3871                           	psect	text30
  3872  06DA                     __ptext30:	
  3873 ;; *************** function _led_ind_blink_start *****************
  3874 ;; Defined at:
  3875 ;;		line 19 in file "led_ind.c"
  3876 ;; Parameters:    Size  Location     Type
  3877 ;;		None
  3878 ;; Auto vars:     Size  Location     Type
  3879 ;;		None
  3880 ;; Return value:  Size  Location     Type
  3881 ;;                  1    wreg      void 
  3882 ;; Registers used:
  3883 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3884 ;; Tracked objects:
  3885 ;;		On entry : 300/0
  3886 ;;		On exit  : 300/0
  3887 ;;		Unchanged: 0/0
  3888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3889 ;;      Params:         0       0       0       0
  3890 ;;      Locals:         0       0       0       0
  3891 ;;      Temps:          0       0       0       0
  3892 ;;      Totals:         0       0       0       0
  3893 ;;Total ram usage:        0 bytes
  3894 ;; Hardware stack levels used: 1
  3895 ;; Hardware stack levels required when called: 7
  3896 ;; This function calls:
  3897 ;;		_sys_tick_start_periodic
  3898 ;; This function is called by:
  3899 ;;		_main
  3900 ;; This function uses a non-reentrant model
  3901 ;;
  3902                           
  3903  06DA                     _led_ind_blink_start:	
  3904                           ;psect for function _led_ind_blink_start
  3905                           
  3906                           
  3907                           ;led_ind.c: 20:     sys_tick_start_periodic(led_blink_handle, 3);
  3908                           
  3909                           ;incstack = 0
  3910                           ; Regs used in _led_ind_blink_start: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3911  06DA  3000               	movlw	0
  3912  06DB  00B1               	movwf	sys_tick_start_periodic@tick+3
  3913  06DC  3000               	movlw	0
  3914  06DD  00B0               	movwf	sys_tick_start_periodic@tick+2
  3915  06DE  3000               	movlw	0
  3916  06DF  00AF               	movwf	sys_tick_start_periodic@tick+1
  3917  06E0  3003               	movlw	3
  3918  06E1  00AE               	movwf	sys_tick_start_periodic@tick
  3919  06E2  0854               	movf	_led_blink_handle,w
  3920  06E3  2367               	fcall	_sys_tick_start_periodic
  3921  06E4  0008               	return
  3922  06E5                     __end_of_led_ind_blink_start:
  3923                           
  3924                           	psect	text31
  3925  0367                     __ptext31:	
  3926 ;; *************** function _sys_tick_start_periodic *****************
  3927 ;; Defined at:
  3928 ;;		line 88 in file "sys_tick.c"
  3929 ;; Parameters:    Size  Location     Type
  3930 ;;  handle          1    wreg     unsigned char 
  3931 ;;  tick            4   14[BANK0 ] unsigned long 
  3932 ;; Auto vars:     Size  Location     Type
  3933 ;;  handle          1   20[BANK0 ] unsigned char 
  3934 ;;  i               1   21[BANK0 ] unsigned char 
  3935 ;; Return value:  Size  Location     Type
  3936 ;;                  1    wreg      void 
  3937 ;; Registers used:
  3938 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3939 ;; Tracked objects:
  3940 ;;		On entry : 300/0
  3941 ;;		On exit  : 300/0
  3942 ;;		Unchanged: 0/0
  3943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3944 ;;      Params:         0       4       0       0
  3945 ;;      Locals:         0       2       0       0
  3946 ;;      Temps:          0       2       0       0
  3947 ;;      Totals:         0       8       0       0
  3948 ;;Total ram usage:        8 bytes
  3949 ;; Hardware stack levels used: 1
  3950 ;; Hardware stack levels required when called: 6
  3951 ;; This function calls:
  3952 ;;		___bmul
  3953 ;; This function is called by:
  3954 ;;		_led_ind_blink_start
  3955 ;; This function uses a non-reentrant model
  3956 ;;
  3957                           
  3958  0367                     _sys_tick_start_periodic:	
  3959                           ;psect for function _sys_tick_start_periodic
  3960                           
  3961                           
  3962                           ;incstack = 0
  3963                           ; Regs used in _sys_tick_start_periodic: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3964                           ;sys_tick_start_periodic@handle stored from wreg
  3965  0367  00B4               	movwf	sys_tick_start_periodic@handle
  3966                           
  3967                           ;sys_tick.c: 89:     for (uint8_t i = 0; i < _sys_tick._handler_index; i++) {
  3968  0368  01B5               	clrf	sys_tick_start_periodic@i
  3969  0369                     l409:
  3970  0369  1683               	bsf	3,5	;RP0=1, select bank1
  3971  036A  0820               	movf	__sys_tick^(0+128),w
  3972  036B  3907               	andlw	7
  3973  036C  1283               	bcf	3,5	;RP0=0, select bank0
  3974  036D  0235               	subwf	sys_tick_start_periodic@i,w
  3975  036E  1803               	btfsc	3,0
  3976  036F  0008               	return
  3977                           
  3978                           ;sys_tick.c: 90:         if (_sys_tick._handle[i]._handle == handle) {
  3979  0370  300A               	movlw	10
  3980  0371  00B2               	movwf	??_sys_tick_start_periodic
  3981  0372  0832               	movf	??_sys_tick_start_periodic,w
  3982  0373  00AA               	movwf	___bmul@multiplicand
  3983  0374  0835               	movf	sys_tick_start_periodic@i,w
  3984  0375  2630               	fcall	___bmul
  3985  0376  3EA1               	addlw	(low ((__sys_tick| 0+1)))& (0+255)
  3986  0377  0084               	movwf	4
  3987  0378  1383               	bcf	3,7	;select IRP bank1
  3988  0379  0C00               	rrf	0,w
  3989  037A  00B3               	movwf	??_sys_tick_start_periodic+1
  3990  037B  0C33               	rrf	??_sys_tick_start_periodic+1,w
  3991  037C  3907               	andlw	7
  3992  037D  0634               	xorwf	sys_tick_start_periodic@handle,w
  3993  037E  1D03               	skipz
  3994  037F  2BBD               	goto	l1991
  3995                           
  3996                           ;sys_tick.c: 91:             _sys_tick._handle[i].trigger_tick = tick;
  3997  0380  300A               	movlw	10
  3998  0381  00B2               	movwf	??_sys_tick_start_periodic
  3999  0382  0832               	movf	??_sys_tick_start_periodic,w
  4000  0383  00AA               	movwf	___bmul@multiplicand
  4001  0384  0835               	movf	sys_tick_start_periodic@i,w
  4002  0385  2630               	fcall	___bmul
  4003  0386  3EA2               	addlw	(low ((__sys_tick| 0+2)))& (0+255)
  4004  0387  0084               	movwf	4
  4005  0388  082E               	movf	sys_tick_start_periodic@tick,w
  4006  0389  1383               	bcf	3,7	;select IRP bank1
  4007  038A  0080               	movwf	0
  4008  038B  0A84               	incf	4,f
  4009  038C  082F               	movf	sys_tick_start_periodic@tick+1,w
  4010  038D  0080               	movwf	0
  4011  038E  0A84               	incf	4,f
  4012  038F  0830               	movf	sys_tick_start_periodic@tick+2,w
  4013  0390  0080               	movwf	0
  4014  0391  0A84               	incf	4,f
  4015  0392  0831               	movf	sys_tick_start_periodic@tick+3,w
  4016  0393  0080               	movwf	0
  4017                           
  4018                           ;sys_tick.c: 92:             _sys_tick._handle[i].counter_tick = 0;
  4019  0394  300A               	movlw	10
  4020  0395  00B2               	movwf	??_sys_tick_start_periodic
  4021  0396  0832               	movf	??_sys_tick_start_periodic,w
  4022  0397  00AA               	movwf	___bmul@multiplicand
  4023  0398  0835               	movf	sys_tick_start_periodic@i,w
  4024  0399  2630               	fcall	___bmul
  4025  039A  3EA6               	addlw	(low ((__sys_tick| 0+6)))& (0+255)
  4026  039B  0084               	movwf	4
  4027  039C  3000               	movlw	0
  4028  039D  1383               	bcf	3,7	;select IRP bank1
  4029  039E  0080               	movwf	0
  4030  039F  0A84               	incf	4,f
  4031  03A0  3000               	movlw	0
  4032  03A1  0080               	movwf	0
  4033  03A2  0A84               	incf	4,f
  4034  03A3  3000               	movlw	0
  4035  03A4  0080               	movwf	0
  4036  03A5  0A84               	incf	4,f
  4037  03A6  3000               	movlw	0
  4038  03A7  0080               	movwf	0
  4039                           
  4040                           ;sys_tick.c: 93:             _sys_tick._handle[i]._periodic = 1;
  4041  03A8  300A               	movlw	10
  4042  03A9  00B2               	movwf	??_sys_tick_start_periodic
  4043  03AA  0832               	movf	??_sys_tick_start_periodic,w
  4044  03AB  00AA               	movwf	___bmul@multiplicand
  4045  03AC  0835               	movf	sys_tick_start_periodic@i,w
  4046  03AD  2630               	fcall	___bmul
  4047  03AE  3EA1               	addlw	(low ((__sys_tick| 0+1)))& (0+255)
  4048  03AF  0084               	movwf	4
  4049  03B0  1383               	bcf	3,7	;select IRP bank1
  4050  03B1  1480               	bsf	0,1
  4051                           
  4052                           ;sys_tick.c: 94:             _sys_tick._handle[i]._en = 1;
  4053  03B2  300A               	movlw	10
  4054  03B3  00B2               	movwf	??_sys_tick_start_periodic
  4055  03B4  0832               	movf	??_sys_tick_start_periodic,w
  4056  03B5  00AA               	movwf	___bmul@multiplicand
  4057  03B6  0835               	movf	sys_tick_start_periodic@i,w
  4058  03B7  2630               	fcall	___bmul
  4059  03B8  3EA1               	addlw	(low ((__sys_tick| 0+1)))& (0+255)
  4060  03B9  0084               	movwf	4
  4061  03BA  1383               	bcf	3,7	;select IRP bank1
  4062  03BB  1400               	bsf	0,0
  4063  03BC  0008               	return
  4064  03BD                     l1991:
  4065                           
  4066                           ;sys_tick.c: 97:     }
  4067  03BD  3001               	movlw	1
  4068  03BE  00B2               	movwf	??_sys_tick_start_periodic
  4069  03BF  0832               	movf	??_sys_tick_start_periodic,w
  4070  03C0  07B5               	addwf	sys_tick_start_periodic@i,f
  4071  03C1  2B69               	goto	l409
  4072  03C2                     __end_of_sys_tick_start_periodic:
  4073                           
  4074                           	psect	text32
  4075  0630                     __ptext32:	
  4076 ;; *************** function ___bmul *****************
  4077 ;; Defined at:
  4078 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\Umul8.c"
  4079 ;; Parameters:    Size  Location     Type
  4080 ;;  multiplier      1    wreg     unsigned char 
  4081 ;;  multiplicand    1   10[BANK0 ] unsigned char 
  4082 ;; Auto vars:     Size  Location     Type
  4083 ;;  multiplier      1   13[BANK0 ] unsigned char 
  4084 ;;  product         1   12[BANK0 ] unsigned char 
  4085 ;; Return value:  Size  Location     Type
  4086 ;;                  1    wreg      unsigned char 
  4087 ;; Registers used:
  4088 ;;		wreg, status,2, status,0
  4089 ;; Tracked objects:
  4090 ;;		On entry : 300/0
  4091 ;;		On exit  : 300/0
  4092 ;;		Unchanged: 0/0
  4093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4094 ;;      Params:         0       1       0       0
  4095 ;;      Locals:         0       2       0       0
  4096 ;;      Temps:          0       1       0       0
  4097 ;;      Totals:         0       4       0       0
  4098 ;;Total ram usage:        4 bytes
  4099 ;; Hardware stack levels used: 1
  4100 ;; Hardware stack levels required when called: 5
  4101 ;; This function calls:
  4102 ;;		Nothing
  4103 ;; This function is called by:
  4104 ;;		_sys_tick_handler
  4105 ;;		_sys_tick_register_callback_handler
  4106 ;;		_sys_tick_start_periodic
  4107 ;;		_sys_tick_stop
  4108 ;; This function uses a non-reentrant model
  4109 ;;
  4110                           
  4111  0630                     ___bmul:	
  4112                           ;psect for function ___bmul
  4113                           
  4114                           
  4115                           ;incstack = 0
  4116                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  4117                           ;___bmul@multiplier stored from wreg
  4118  0630  00AD               	movwf	___bmul@multiplier
  4119  0631  01AC               	clrf	___bmul@product
  4120  0632                     l1857:
  4121  0632  1C2D               	btfss	___bmul@multiplier,0
  4122  0633  2E38               	goto	l1861
  4123  0634  082A               	movf	___bmul@multiplicand,w
  4124  0635  00AB               	movwf	??___bmul
  4125  0636  082B               	movf	??___bmul,w
  4126  0637  07AC               	addwf	___bmul@product,f
  4127  0638                     l1861:
  4128  0638  1003               	clrc
  4129  0639  0DAA               	rlf	___bmul@multiplicand,f
  4130  063A  1003               	clrc
  4131  063B  0CAD               	rrf	___bmul@multiplier,f
  4132  063C  082D               	movf	___bmul@multiplier,w
  4133  063D  1D03               	btfss	3,2
  4134  063E  2E32               	goto	l1857
  4135  063F  082C               	movf	___bmul@product,w
  4136  0640  0008               	return
  4137  0641                     __end_of___bmul:
  4138                           
  4139                           	psect	text33
  4140  0541                     __ptext33:	
  4141 ;; *************** function _eeprom_write *****************
  4142 ;; Defined at:
  4143 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\pic\__eewrite.c"
  4144 ;; Parameters:    Size  Location     Type
  4145 ;;  addr            1    wreg     unsigned char 
  4146 ;;  value           1   10[BANK0 ] unsigned char 
  4147 ;; Auto vars:     Size  Location     Type
  4148 ;;  addr            1   12[BANK0 ] unsigned char 
  4149 ;; Return value:  Size  Location     Type
  4150 ;;                  1    wreg      void 
  4151 ;; Registers used:
  4152 ;;		wreg, status,2, status,0
  4153 ;; Tracked objects:
  4154 ;;		On entry : B00/0
  4155 ;;		On exit  : B00/100
  4156 ;;		Unchanged: 800/0
  4157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4158 ;;      Params:         0       1       0       0
  4159 ;;      Locals:         0       1       0       0
  4160 ;;      Temps:          0       1       0       0
  4161 ;;      Totals:         0       3       0       0
  4162 ;;Total ram usage:        3 bytes
  4163 ;; Hardware stack levels used: 1
  4164 ;; Hardware stack levels required when called: 5
  4165 ;; This function calls:
  4166 ;;		Nothing
  4167 ;; This function is called by:
  4168 ;;		_main
  4169 ;; This function uses a non-reentrant model
  4170 ;;
  4171                           
  4172  0541                     _eeprom_write:	
  4173                           ;psect for function _eeprom_write
  4174                           
  4175                           
  4176                           ;incstack = 0
  4177                           ; Regs used in _eeprom_write: [wreg+status,2+status,0]
  4178                           ;eeprom_write@addr stored from wreg
  4179  0541  00AC               	movwf	eeprom_write@addr
  4180  0542                     l533:	
  4181                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\pic\__eewrite.c: 6: eeprom_write(u
      +                          nsigned char addr, unsigned char value);C:\Program Files\Microchip\xc8\v2.35\pic\sources
      +                          \c90\pic\__eewrite.c: 7: {;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\pic\__ee
      +                          write.c: 8:  do{ while (EECON1bits.WR) { continue; } EEADR = (addr); EEDATA = (value); E
      +                          ECON1 &= 0x3F; STATUSbits.CARRY = 0; if (INTCONbits.GIE) { STATUSbits.CARRY = 1; } INTCO
      +                          Nbits.GIE = 0; EECON1bits.WREN = 1; EECON2 = 0x55; EECON2 = 0xAA; EECON1bits.WR = 1; EEC
      +                          ON1bits.WREN = 0; if (STATUSbits.CARRY) { INTCONbits.GIE = 1; } } while (0);
  4182                           
  4183  0542  1683               	bsf	3,5	;RP0=1, select bank1
  4184  0543  189C               	btfsc	28,1	;volsfr
  4185  0544  2D42               	goto	l533
  4186  0545  1283               	bcf	3,5	;RP0=0, select bank0
  4187  0546  082C               	movf	eeprom_write@addr,w
  4188  0547  1683               	bsf	3,5	;RP0=1, select bank1
  4189  0548  009B               	movwf	27	;volatile
  4190  0549  1283               	bcf	3,5	;RP0=0, select bank0
  4191  054A  082A               	movf	eeprom_write@value,w
  4192  054B  1683               	bsf	3,5	;RP0=1, select bank1
  4193  054C  009A               	movwf	26	;volatile
  4194  054D  303F               	movlw	63
  4195  054E  1283               	bcf	3,5	;RP0=0, select bank0
  4196  054F  00AB               	movwf	??_eeprom_write
  4197  0550  082B               	movf	??_eeprom_write,w
  4198  0551  1683               	bsf	3,5	;RP0=1, select bank1
  4199  0552  059C               	andwf	28,f	;volsfr
  4200  0553  1003               	bcf	3,0	;volatile
  4201  0554  1B8B               	btfsc	11,7	;volatile
  4202  0555  1403               	bsf	3,0	;volatile
  4203  0556  138B               	bcf	11,7	;volatile
  4204  0557  151C               	bsf	28,2	;volsfr
  4205  0558  3055               	movlw	85
  4206  0559  009D               	movwf	29	;volsfr
  4207  055A  30AA               	movlw	170
  4208  055B  009D               	movwf	29	;volsfr
  4209  055C  149C               	bsf	28,1	;volsfr
  4210  055D  111C               	bcf	28,2	;volsfr
  4211  055E  1C03               	btfss	3,0	;volatile
  4212  055F  0008               	return
  4213  0560  178B               	bsf	11,7	;volatile
  4214  0561  0008               	return
  4215  0562                     __end_of_eeprom_write:
  4216                           
  4217                           	psect	text34
  4218  05E5                     __ptext34:	
  4219 ;; *************** function _eeprom_read *****************
  4220 ;; Defined at:
  4221 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\pic\__eeread.c"
  4222 ;; Parameters:    Size  Location     Type
  4223 ;;  addr            1    wreg     unsigned char 
  4224 ;; Auto vars:     Size  Location     Type
  4225 ;;  addr            1   11[BANK0 ] unsigned char 
  4226 ;; Return value:  Size  Location     Type
  4227 ;;                  1    wreg      unsigned char 
  4228 ;; Registers used:
  4229 ;;		wreg, status,2, status,0
  4230 ;; Tracked objects:
  4231 ;;		On entry : 300/0
  4232 ;;		On exit  : 300/100
  4233 ;;		Unchanged: 0/0
  4234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4235 ;;      Params:         0       0       0       0
  4236 ;;      Locals:         0       1       0       0
  4237 ;;      Temps:          0       1       0       0
  4238 ;;      Totals:         0       2       0       0
  4239 ;;Total ram usage:        2 bytes
  4240 ;; Hardware stack levels used: 1
  4241 ;; Hardware stack levels required when called: 5
  4242 ;; This function calls:
  4243 ;;		Nothing
  4244 ;; This function is called by:
  4245 ;;		_main
  4246 ;; This function uses a non-reentrant model
  4247 ;;
  4248                           
  4249  05E5                     _eeprom_read:	
  4250                           ;psect for function _eeprom_read
  4251                           
  4252                           
  4253                           ;incstack = 0
  4254                           ; Regs used in _eeprom_read: [wreg+status,2+status,0]
  4255                           ;eeprom_read@addr stored from wreg
  4256  05E5  00AB               	movwf	eeprom_read@addr
  4257  05E6  2DE8               	goto	l513
  4258  05E7                     u1021:
  4259  05E7  1283               	bcf	3,5	;RP0=0, select bank0
  4260  05E8                     l513:	
  4261                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\pic\__eeread.c: 6: eeprom_read(uns
      +                          igned char addr);C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\pic\__eeread.c: 7:
      +                           {;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\pic\__eeread.c: 8:  do
  4262                           
  4263  05E8  0064               	clrwdt	;# 
  4264  05E9  1683               	bsf	3,5	;RP0=1, select bank1
  4265  05EA  1303               	bcf	3,6	;RP1=0, select bank1
  4266  05EB  189C               	btfsc	28,1	;volsfr
  4267  05EC  2DE7               	goto	u1021
  4268                           
  4269                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\pic\__eeread.c: 18:  return ( EEAD
      +                          R = addr, EECON1 &= 0x3F, EECON1bits.RD = 1, EEDATA);
  4270  05ED  1283               	bcf	3,5	;RP0=0, select bank0
  4271  05EE  082B               	movf	eeprom_read@addr,w
  4272  05EF  1683               	bsf	3,5	;RP0=1, select bank1
  4273  05F0  009B               	movwf	27	;volatile
  4274  05F1  303F               	movlw	63
  4275  05F2  1283               	bcf	3,5	;RP0=0, select bank0
  4276  05F3  00AA               	movwf	??_eeprom_read
  4277  05F4  082A               	movf	??_eeprom_read,w
  4278  05F5  1683               	bsf	3,5	;RP0=1, select bank1
  4279  05F6  059C               	andwf	28,f	;volsfr
  4280  05F7  141C               	bsf	28,0	;volsfr
  4281  05F8  081A               	movf	26,w	;volatile
  4282  05F9  0008               	return
  4283  05FA                     __end_of_eeprom_read:
  4284                           
  4285                           	psect	text35
  4286  0719                     __ptext35:	
  4287 ;; *************** function _button_init *****************
  4288 ;; Defined at:
  4289 ;;		line 88 in file "main.c"
  4290 ;; Parameters:    Size  Location     Type
  4291 ;;		None
  4292 ;; Auto vars:     Size  Location     Type
  4293 ;;		None
  4294 ;; Return value:  Size  Location     Type
  4295 ;;                  1    wreg      void 
  4296 ;; Registers used:
  4297 ;;		wreg, status,2, status,0, pclath, cstack
  4298 ;; Tracked objects:
  4299 ;;		On entry : 300/0
  4300 ;;		On exit  : 300/0
  4301 ;;		Unchanged: 0/0
  4302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4303 ;;      Params:         0       0       0       0
  4304 ;;      Locals:         0       0       0       0
  4305 ;;      Temps:          0       0       0       0
  4306 ;;      Totals:         0       0       0       0
  4307 ;;Total ram usage:        0 bytes
  4308 ;; Hardware stack levels used: 1
  4309 ;; Hardware stack levels required when called: 6
  4310 ;; This function calls:
  4311 ;;		_ex_int_add_isr_handler
  4312 ;;		_ioc_rb4_add_isr_handler
  4313 ;;		_ioc_rb5_add_isr_handler
  4314 ;; This function is called by:
  4315 ;;		_main
  4316 ;; This function uses a non-reentrant model
  4317 ;;
  4318                           
  4319  0719                     _button_init:	
  4320                           ;psect for function _button_init
  4321                           
  4322                           
  4323                           ;main.c: 89:     OPTION_REGbits.INTEDG = 0;
  4324                           
  4325                           ;incstack = 0
  4326                           ; Regs used in _button_init: [wreg+status,2+status,0+pclath+cstack]
  4327  0719  1683               	bsf	3,5	;RP0=1, select bank1
  4328  071A  1301               	bcf	1,6	;volatile
  4329                           
  4330                           ;main.c: 90:     ioc_rb5_add_isr_handler(button1_handler);
  4331  071B  3001               	movlw	(low (fp__button1_handler-i1fpbase))& (0+255)
  4332  071C  26C3               	fcall	_ioc_rb5_add_isr_handler
  4333                           
  4334                           ;main.c: 91:     ioc_rb4_add_isr_handler(button2_handler);
  4335  071D  3002               	movlw	(low (fp__button2_handler-i1fpbase))& (0+255)
  4336  071E  26E5               	fcall	_ioc_rb4_add_isr_handler
  4337                           
  4338                           ;main.c: 92:     ex_int_add_isr_handler(button3_handler);
  4339  071F  3003               	movlw	(low (fp__button3_handler-i1fpbase))& (0+255)
  4340  0720  2732               	fcall	_ex_int_add_isr_handler
  4341  0721  0008               	return
  4342  0722                     __end_of_button_init:
  4343                           
  4344                           	psect	text36
  4345  06C3                     __ptext36:	
  4346 ;; *************** function _ioc_rb5_add_isr_handler *****************
  4347 ;; Defined at:
  4348 ;;		line 43 in file "it_handle.c"
  4349 ;; Parameters:    Size  Location     Type
  4350 ;;  handler         1    wreg     PTR FTN()void 
  4351 ;;		 -> button1_handler(1), 
  4352 ;; Auto vars:     Size  Location     Type
  4353 ;;  handler         1   11[BANK0 ] PTR FTN()void 
  4354 ;;		 -> button1_handler(1), 
  4355 ;; Return value:  Size  Location     Type
  4356 ;;                  1    wreg      void 
  4357 ;; Registers used:
  4358 ;;		wreg
  4359 ;; Tracked objects:
  4360 ;;		On entry : 300/100
  4361 ;;		On exit  : 300/0
  4362 ;;		Unchanged: 0/0
  4363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4364 ;;      Params:         0       0       0       0
  4365 ;;      Locals:         0       1       0       0
  4366 ;;      Temps:          0       1       0       0
  4367 ;;      Totals:         0       2       0       0
  4368 ;;Total ram usage:        2 bytes
  4369 ;; Hardware stack levels used: 1
  4370 ;; Hardware stack levels required when called: 5
  4371 ;; This function calls:
  4372 ;;		Nothing
  4373 ;; This function is called by:
  4374 ;;		_button_init
  4375 ;; This function uses a non-reentrant model
  4376 ;;
  4377                           
  4378  06C3                     _ioc_rb5_add_isr_handler:	
  4379                           ;psect for function _ioc_rb5_add_isr_handler
  4380                           
  4381                           
  4382                           ;incstack = 0
  4383                           ; Regs used in _ioc_rb5_add_isr_handler: [wreg]
  4384                           ;ioc_rb5_add_isr_handler@handler stored from wreg
  4385  06C3  1283               	bcf	3,5	;RP0=0, select bank0
  4386  06C4  00AB               	movwf	ioc_rb5_add_isr_handler@handler
  4387                           
  4388                           ;it_handle.c: 44:     INTCONbits.RBIF = 0;
  4389  06C5  100B               	bcf	11,0	;volatile
  4390                           
  4391                           ;it_handle.c: 45:     INTCONbits.RBIE = 1;
  4392  06C6  158B               	bsf	11,3	;volatile
  4393                           
  4394                           ;it_handle.c: 46:     TRISBbits.TRISB5 = 1;
  4395  06C7  1683               	bsf	3,5	;RP0=1, select bank1
  4396  06C8  1686               	bsf	6,5	;volatile
  4397                           
  4398                           ;it_handle.c: 47:     _ioc_rb5_isr = handler;
  4399  06C9  1283               	bcf	3,5	;RP0=0, select bank0
  4400  06CA  082B               	movf	ioc_rb5_add_isr_handler@handler,w
  4401  06CB  00AA               	movwf	??_ioc_rb5_add_isr_handler
  4402  06CC  082A               	movf	??_ioc_rb5_add_isr_handler,w
  4403  06CD  00D5               	movwf	__ioc_rb5_isr
  4404  06CE  0008               	return
  4405  06CF                     __end_of_ioc_rb5_add_isr_handler:
  4406                           
  4407                           	psect	text37
  4408  06E5                     __ptext37:	
  4409 ;; *************** function _ioc_rb4_add_isr_handler *****************
  4410 ;; Defined at:
  4411 ;;		line 36 in file "it_handle.c"
  4412 ;; Parameters:    Size  Location     Type
  4413 ;;  handler         1    wreg     PTR FTN()void 
  4414 ;;		 -> button2_handler(1), 
  4415 ;; Auto vars:     Size  Location     Type
  4416 ;;  handler         1   11[BANK0 ] PTR FTN()void 
  4417 ;;		 -> button2_handler(1), 
  4418 ;; Return value:  Size  Location     Type
  4419 ;;                  1    wreg      void 
  4420 ;; Registers used:
  4421 ;;		wreg
  4422 ;; Tracked objects:
  4423 ;;		On entry : 300/0
  4424 ;;		On exit  : 300/0
  4425 ;;		Unchanged: 0/0
  4426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4427 ;;      Params:         0       0       0       0
  4428 ;;      Locals:         0       1       0       0
  4429 ;;      Temps:          0       1       0       0
  4430 ;;      Totals:         0       2       0       0
  4431 ;;Total ram usage:        2 bytes
  4432 ;; Hardware stack levels used: 1
  4433 ;; Hardware stack levels required when called: 5
  4434 ;; This function calls:
  4435 ;;		Nothing
  4436 ;; This function is called by:
  4437 ;;		_button_init
  4438 ;; This function uses a non-reentrant model
  4439 ;;
  4440                           
  4441  06E5                     _ioc_rb4_add_isr_handler:	
  4442                           ;psect for function _ioc_rb4_add_isr_handler
  4443                           
  4444                           
  4445                           ;incstack = 0
  4446                           ; Regs used in _ioc_rb4_add_isr_handler: [wreg]
  4447                           ;ioc_rb4_add_isr_handler@handler stored from wreg
  4448  06E5  00AB               	movwf	ioc_rb4_add_isr_handler@handler
  4449                           
  4450                           ;it_handle.c: 37:     INTCONbits.RBIF = 0;
  4451  06E6  100B               	bcf	11,0	;volatile
  4452                           
  4453                           ;it_handle.c: 38:     INTCONbits.RBIE = 1;
  4454  06E7  158B               	bsf	11,3	;volatile
  4455                           
  4456                           ;it_handle.c: 39:     TRISBbits.TRISB4 = 1;
  4457  06E8  1683               	bsf	3,5	;RP0=1, select bank1
  4458  06E9  1606               	bsf	6,4	;volatile
  4459                           
  4460                           ;it_handle.c: 40:     _ioc_rb4_isr = handler;
  4461  06EA  1283               	bcf	3,5	;RP0=0, select bank0
  4462  06EB  082B               	movf	ioc_rb4_add_isr_handler@handler,w
  4463  06EC  00AA               	movwf	??_ioc_rb4_add_isr_handler
  4464  06ED  082A               	movf	??_ioc_rb4_add_isr_handler,w
  4465  06EE  00D6               	movwf	__ioc_rb4_isr
  4466  06EF  0008               	return
  4467  06F0                     __end_of_ioc_rb4_add_isr_handler:
  4468                           
  4469                           	psect	text38
  4470  0732                     __ptext38:	
  4471 ;; *************** function _ex_int_add_isr_handler *****************
  4472 ;; Defined at:
  4473 ;;		line 30 in file "it_handle.c"
  4474 ;; Parameters:    Size  Location     Type
  4475 ;;  handler         1    wreg     PTR FTN()void 
  4476 ;;		 -> button3_handler(1), 
  4477 ;; Auto vars:     Size  Location     Type
  4478 ;;  handler         1   11[BANK0 ] PTR FTN()void 
  4479 ;;		 -> button3_handler(1), 
  4480 ;; Return value:  Size  Location     Type
  4481 ;;                  1    wreg      void 
  4482 ;; Registers used:
  4483 ;;		wreg
  4484 ;; Tracked objects:
  4485 ;;		On entry : 300/0
  4486 ;;		On exit  : 300/0
  4487 ;;		Unchanged: 0/0
  4488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4489 ;;      Params:         0       0       0       0
  4490 ;;      Locals:         0       1       0       0
  4491 ;;      Temps:          0       1       0       0
  4492 ;;      Totals:         0       2       0       0
  4493 ;;Total ram usage:        2 bytes
  4494 ;; Hardware stack levels used: 1
  4495 ;; Hardware stack levels required when called: 5
  4496 ;; This function calls:
  4497 ;;		Nothing
  4498 ;; This function is called by:
  4499 ;;		_button_init
  4500 ;; This function uses a non-reentrant model
  4501 ;;
  4502                           
  4503  0732                     _ex_int_add_isr_handler:	
  4504                           ;psect for function _ex_int_add_isr_handler
  4505                           
  4506                           
  4507                           ;incstack = 0
  4508                           ; Regs used in _ex_int_add_isr_handler: [wreg]
  4509                           ;ex_int_add_isr_handler@handler stored from wreg
  4510  0732  00AB               	movwf	ex_int_add_isr_handler@handler
  4511                           
  4512                           ;it_handle.c: 31:     INTCONbits.INTF = 0;
  4513  0733  108B               	bcf	11,1	;volatile
  4514                           
  4515                           ;it_handle.c: 32:     INTCONbits.INTE = 1;
  4516  0734  160B               	bsf	11,4	;volatile
  4517                           
  4518                           ;it_handle.c: 33:     _ex_int_isr = handler;
  4519  0735  082B               	movf	ex_int_add_isr_handler@handler,w
  4520  0736  00AA               	movwf	??_ex_int_add_isr_handler
  4521  0737  082A               	movf	??_ex_int_add_isr_handler,w
  4522  0738  00D7               	movwf	__ex_int_isr
  4523  0739  0008               	return
  4524  073A                     __end_of_ex_int_add_isr_handler:
  4525                           
  4526                           	psect	text39
  4527  0230                     __ptext39:	
  4528 ;; *************** function _ISR *****************
  4529 ;; Defined at:
  4530 ;;		line 50 in file "it_handle.c"
  4531 ;; Parameters:    Size  Location     Type
  4532 ;;		None
  4533 ;; Auto vars:     Size  Location     Type
  4534 ;;  iocMask         1    9[BANK0 ] unsigned char 
  4535 ;;  newPORTB        1    8[BANK0 ] unsigned char 
  4536 ;;  c               1    7[BANK0 ] unsigned char 
  4537 ;; Return value:  Size  Location     Type
  4538 ;;                  1    wreg      void 
  4539 ;; Registers used:
  4540 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4541 ;; Tracked objects:
  4542 ;;		On entry : 0/0
  4543 ;;		On exit  : 300/0
  4544 ;;		Unchanged: 0/0
  4545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4546 ;;      Params:         0       0       0       0
  4547 ;;      Locals:         0       3       0       0
  4548 ;;      Temps:          0       5       0       0
  4549 ;;      Totals:         0       8       0       0
  4550 ;;Total ram usage:        8 bytes
  4551 ;; Hardware stack levels used: 1
  4552 ;; Hardware stack levels required when called: 4
  4553 ;; This function calls:
  4554 ;;		Absolute function
  4555 ;;		_button1_handler
  4556 ;;		_button2_handler
  4557 ;;		_button3_handler
  4558 ;;		_sys_tick_handler
  4559 ;;		_znp_usart_event_handler
  4560 ;; This function is called by:
  4561 ;;		Interrupt level 1
  4562 ;; This function uses a non-reentrant model
  4563 ;;
  4564                           
  4565  0230                     _ISR:	
  4566                           ;psect for function _ISR
  4567                           
  4568                           
  4569                           ;it_handle.c: 51:     if (PIR1bits.RCIF) {
  4570  0230  1E8C               	btfss	12,5	;volatile
  4571  0231  2A48               	goto	i1l2377
  4572                           
  4573                           ;it_handle.c: 52:         if (RCSTAbits.OERR) {
  4574  0232  1C98               	btfss	24,1	;volatile
  4575  0233  2A36               	goto	i1l167
  4576                           
  4577                           ;it_handle.c: 53:             RCSTAbits.CREN = 0;
  4578  0234  1218               	bcf	24,4	;volatile
  4579                           
  4580                           ;it_handle.c: 54:             RCSTAbits.CREN = 1;
  4581  0235  1618               	bsf	24,4	;volatile
  4582  0236                     i1l167:	
  4583                           ;it_handle.c: 55:         }
  4584                           
  4585                           
  4586                           ;it_handle.c: 57:         INTCONbits.T0IF = 0;
  4587  0236  110B               	bcf	11,2	;volatile
  4588                           
  4589                           ;it_handle.c: 58:         INTCONbits.T0IE = 1;
  4590  0237  168B               	bsf	11,5	;volatile
  4591                           
  4592                           ;it_handle.c: 62:         TMR0 = 215;
  4593  0238  30D7               	movlw	215
  4594  0239  0081               	movwf	1	;volatile
  4595                           
  4596                           ;it_handle.c: 64:         uint8_t c = RCREG;
  4597  023A  081A               	movf	26,w	;volatile
  4598  023B  00A2               	movwf	??_ISR
  4599  023C  0822               	movf	??_ISR,w
  4600  023D  00A7               	movwf	ISR@c
  4601                           
  4602                           ;it_handle.c: 65:         if (_usart_rx_isr)
  4603  023E  085A               	movf	__usart_rx_isr,w
  4604  023F  1903               	btfsc	3,2
  4605  0240  2A48               	goto	i1l2377
  4606                           
  4607                           ;it_handle.c: 66:             _usart_rx_isr(USART_RX_DATA, &c);
  4608  0241  01FB               	clrf	znp_usart_event_handler@rx_event
  4609  0242  3027               	movlw	(low (ISR@c| 0))& (0+255)
  4610  0243  00A2               	movwf	??_ISR
  4611  0244  0822               	movf	??_ISR,w
  4612  0245  00FC               	movwf	znp_usart_event_handler@event_data
  4613  0246  085A               	movf	__usart_rx_isr,w
  4614  0247  201F               	fcall	i1fptable
  4615  0248                     i1l2377:
  4616                           
  4617                           ;it_handle.c: 69:     if (INTCONbits.T0IF) {
  4618  0248  1D0B               	btfss	11,2	;volatile
  4619  0249  2A56               	goto	i1l2385
  4620                           
  4621                           ;it_handle.c: 70:         INTCONbits.T0IF = 0;
  4622  024A  110B               	bcf	11,2	;volatile
  4623                           
  4624                           ;it_handle.c: 71:         INTCONbits.T0IE = 0;
  4625  024B  128B               	bcf	11,5	;volatile
  4626                           
  4627                           ;it_handle.c: 72:         if (_usart_rx_isr)
  4628  024C  1283               	bcf	3,5	;RP0=0, select bank0
  4629  024D  1303               	bcf	3,6	;RP1=0, select bank0
  4630  024E  085A               	movf	__usart_rx_isr,w
  4631  024F  1903               	btfsc	3,2
  4632  0250  2A56               	goto	i1l2385
  4633                           
  4634                           ;it_handle.c: 73:             _usart_rx_isr(USART_RX_CMPLT, (0));
  4635  0251  01FB               	clrf	znp_usart_event_handler@rx_event
  4636  0252  0AFB               	incf	znp_usart_event_handler@rx_event,f
  4637  0253  01FC               	clrf	znp_usart_event_handler@event_data
  4638  0254  085A               	movf	__usart_rx_isr,w
  4639  0255  201F               	fcall	i1fptable
  4640  0256                     i1l2385:
  4641                           
  4642                           ;it_handle.c: 76:     if (PIR1bits.TMR1IF) {
  4643  0256  1283               	bcf	3,5	;RP0=0, select bank0
  4644  0257  1303               	bcf	3,6	;RP1=0, select bank0
  4645  0258  1C0C               	btfss	12,0	;volatile
  4646  0259  2A62               	goto	i1l2393
  4647                           
  4648                           ;it_handle.c: 77:         if (_tmr1_isr)
  4649  025A  0859               	movf	__tmr1_isr,w
  4650  025B  1903               	btfsc	3,2
  4651  025C  2A5F               	goto	i1l2391
  4652                           
  4653                           ;it_handle.c: 78:             _tmr1_isr();
  4654  025D  0859               	movf	__tmr1_isr,w
  4655  025E  201F               	fcall	i1fptable
  4656  025F                     i1l2391:
  4657                           
  4658                           ;it_handle.c: 79:         PIR1bits.TMR1IF = 0;
  4659  025F  1283               	bcf	3,5	;RP0=0, select bank0
  4660  0260  1303               	bcf	3,6	;RP1=0, select bank0
  4661  0261  100C               	bcf	12,0	;volatile
  4662  0262                     i1l2393:
  4663                           
  4664                           ;it_handle.c: 81:     if (PIR1bits.TMR2IF) {
  4665  0262  188C               	btfsc	12,1	;volatile
  4666                           
  4667                           ;it_handle.c: 84:         PIR1bits.TMR2IF = 0;
  4668  0263  108C               	bcf	12,1	;volatile
  4669                           
  4670                           ;it_handle.c: 87:     if (INTCONbits.INTF) {
  4671                           
  4672                           ;it_handle.c: 85:     }
  4673  0264  1C8B               	btfss	11,1	;volatile
  4674  0265  2A6C               	goto	i1l2403
  4675                           
  4676                           ;it_handle.c: 88:         if (_ex_int_isr)
  4677  0266  0857               	movf	__ex_int_isr,w
  4678  0267  1903               	btfsc	3,2
  4679  0268  2A6B               	goto	i1l2401
  4680                           
  4681                           ;it_handle.c: 89:             _ex_int_isr();
  4682  0269  0857               	movf	__ex_int_isr,w
  4683  026A  201F               	fcall	i1fptable
  4684  026B                     i1l2401:
  4685                           
  4686                           ;it_handle.c: 90:         INTCONbits.INTF = 0;
  4687  026B  108B               	bcf	11,1	;volatile
  4688  026C                     i1l2403:
  4689                           
  4690                           ;it_handle.c: 93:     if (INTCONbits.RBIF) {
  4691  026C  1C0B               	btfss	11,0	;volatile
  4692  026D  2A91               	goto	i1l185
  4693                           
  4694                           ;it_handle.c: 94:         static uint8_t tmpPORTB = 0xFF;;it_handle.c: 95:         uint8
      +                          _t newPORTB = PORTB;
  4695  026E  1283               	bcf	3,5	;RP0=0, select bank0
  4696  026F  1303               	bcf	3,6	;RP1=0, select bank0
  4697  0270  0806               	movf	6,w	;volatile
  4698  0271  00A2               	movwf	??_ISR
  4699  0272  0822               	movf	??_ISR,w
  4700  0273  00A8               	movwf	ISR@newPORTB
  4701                           
  4702                           ;it_handle.c: 96:         uint8_t iocMask = (tmpPORTB ^ newPORTB) & TRISB;
  4703  0274  085E               	movf	ISR@tmpPORTB,w
  4704  0275  0628               	xorwf	ISR@newPORTB,w
  4705  0276  1683               	bsf	3,5	;RP0=1, select bank1
  4706  0277  0506               	andwf	6,w	;volatile
  4707  0278  1283               	bcf	3,5	;RP0=0, select bank0
  4708  0279  00A2               	movwf	??_ISR
  4709  027A  0822               	movf	??_ISR,w
  4710  027B  00A9               	movwf	ISR@iocMask
  4711                           
  4712                           ;it_handle.c: 98:         if (iocMask & (1 << 4)) {
  4713  027C  1E29               	btfss	ISR@iocMask,4
  4714  027D  2A83               	goto	i1l180
  4715                           
  4716                           ;it_handle.c: 99:             if (_ioc_rb4_isr)
  4717  027E  0856               	movf	__ioc_rb4_isr,w
  4718  027F  1903               	btfsc	3,2
  4719  0280  2A8A               	goto	i1l2419
  4720                           
  4721                           ;it_handle.c: 100:                 _ioc_rb4_isr();
  4722  0281  0856               	movf	__ioc_rb4_isr,w
  4723  0282  2A89               	goto	L2
  4724  0283                     i1l180:
  4725  0283  1EA9               	btfss	ISR@iocMask,5
  4726  0284  2A8A               	goto	i1l2419
  4727                           
  4728                           ;it_handle.c: 102:             if (_ioc_rb5_isr)
  4729  0285  0855               	movf	__ioc_rb5_isr,w
  4730  0286  1903               	btfsc	3,2
  4731  0287  2A8A               	goto	i1l2419
  4732                           
  4733                           ;it_handle.c: 103:                 _ioc_rb5_isr();
  4734  0288  0855               	movf	__ioc_rb5_isr,w
  4735  0289                     L2:
  4736  0289  201F               	fcall	i1fptable
  4737  028A                     i1l2419:
  4738                           
  4739                           ;it_handle.c: 105:         tmpPORTB = newPORTB;
  4740  028A  1283               	bcf	3,5	;RP0=0, select bank0
  4741  028B  1303               	bcf	3,6	;RP1=0, select bank0
  4742  028C  0828               	movf	ISR@newPORTB,w
  4743  028D  00A2               	movwf	??_ISR
  4744  028E  0822               	movf	??_ISR,w
  4745  028F  00DE               	movwf	ISR@tmpPORTB
  4746                           
  4747                           ;it_handle.c: 106:         INTCONbits.RBIF = 0;
  4748  0290  100B               	bcf	11,0	;volatile
  4749  0291                     i1l185:
  4750  0291  1283               	bcf	3,5	;RP0=0, select bank0
  4751  0292  1303               	bcf	3,6	;RP1=0, select bank0
  4752  0293  0826               	movf	??_ISR+4,w
  4753  0294  00FF               	movwf	127
  4754  0295  0825               	movf	??_ISR+3,w
  4755  0296  008A               	movwf	10
  4756  0297  0824               	movf	??_ISR+2,w
  4757  0298  0084               	movwf	4
  4758  0299  0E23               	swapf	??_ISR+1,w
  4759  029A  0083               	movwf	3
  4760  029B  0EFE               	swapf	126,f
  4761  029C  0E7E               	swapf	126,w
  4762  029D  0009               	retfie
  4763  029E                     __end_of_ISR:
  4764                           
  4765                           	psect	intentry
  4766  0004                     __pintentry:	
  4767                           ;incstack = 0
  4768 ;; hardware stack exceeded
  4769                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4770                           
  4771  0004                     interrupt_function:
  4772  007E                     saved_w	set	btemp
  4773  0004  00FE               	movwf	btemp
  4774  0005  0E03               	swapf	3,w
  4775  0006  1283               	bcf	3,5	;RP0=0, select bank0
  4776  0007  1303               	bcf	3,6	;RP1=0, select bank0
  4777  0008  00A3               	movwf	??_ISR+1
  4778  0009  0804               	movf	4,w
  4779  000A  00A4               	movwf	??_ISR+2
  4780  000B  080A               	movf	10,w
  4781  000C  00A5               	movwf	??_ISR+3
  4782  000D  087F               	movf	btemp+1,w
  4783  000E  00A6               	movwf	??_ISR+4
  4784  000F  2A30               	ljmp	_ISR
  4785                           
  4786                           	psect	text40
  4787  059D                     __ptext40:	
  4788 ;; *************** function _znp_usart_event_handler *****************
  4789 ;; Defined at:
  4790 ;;		line 81 in file "zb_znp.c"
  4791 ;; Parameters:    Size  Location     Type
  4792 ;;  rx_event        1   11[COMMON] enum E748
  4793 ;;  event_data      1   12[COMMON] PTR void 
  4794 ;;		 -> ISR@c(1), NULL(0), 
  4795 ;; Auto vars:     Size  Location     Type
  4796 ;;		None
  4797 ;; Return value:  Size  Location     Type
  4798 ;;                  1    wreg      void 
  4799 ;; Registers used:
  4800 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4801 ;; Tracked objects:
  4802 ;;		On entry : 300/0
  4803 ;;		On exit  : 300/0
  4804 ;;		Unchanged: 0/0
  4805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4806 ;;      Params:         2       0       0       0
  4807 ;;      Locals:         0       0       0       0
  4808 ;;      Temps:          0       2       0       0
  4809 ;;      Totals:         2       2       0       0
  4810 ;;Total ram usage:        4 bytes
  4811 ;; Hardware stack levels used: 1
  4812 ;; Hardware stack levels required when called: 3
  4813 ;; This function calls:
  4814 ;;		_znp_frame_parser
  4815 ;; This function is called by:
  4816 ;;		_znp_init
  4817 ;;		_ISR
  4818 ;; This function uses a non-reentrant model
  4819 ;;
  4820                           
  4821  059D                     _znp_usart_event_handler:	
  4822                           ;psect for function _znp_usart_event_handler
  4823                           
  4824                           
  4825                           ;zb_znp.c: 82:     switch (rx_event) {
  4826                           
  4827                           ;incstack = 0
  4828 ;; hardware stack exceeded
  4829                           ; Regs used in _znp_usart_event_handler: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cs
      +                          tack]
  4830  059D  2DA6               	goto	i1l2277
  4831  059E                     i1l2271:
  4832                           
  4833                           ;zb_znp.c: 84:             znp_frame_parser(*(uint8_t*) event_data);
  4834  059E  087C               	movf	znp_usart_event_handler@event_data,w
  4835  059F  0084               	movwf	4
  4836  05A0  1383               	bcf	3,7	;select IRP bank0
  4837  05A1  0800               	movf	0,w
  4838  05A2  2193               	fcall	_znp_frame_parser
  4839                           
  4840                           ;zb_znp.c: 85:             break;
  4841  05A3  0008               	return
  4842  05A4                     i1l2273:
  4843                           
  4844                           ;zb_znp.c: 87:             znp_state = SOP_STATE;
  4845  05A4  01D2               	clrf	_znp_state
  4846                           
  4847                           ;zb_znp.c: 88:             break;
  4848  05A5  0008               	return
  4849  05A6                     i1l2277:
  4850  05A6  087B               	movf	znp_usart_event_handler@rx_event,w
  4851  05A7  00A0               	movwf	??_znp_usart_event_handler
  4852  05A8  01A1               	clrf	??_znp_usart_event_handler+1
  4853                           
  4854                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4855                           ; Switch size 1, requested type "simple"
  4856                           ; Number of cases is 1, Range of values is 0 to 0
  4857                           ; switch strategies available:
  4858                           ; Name         Instructions Cycles
  4859                           ; simple_byte            4     3 (average)
  4860                           ; direct_byte            7     6 (fixed)
  4861                           ; jumptable            260     6 (fixed)
  4862                           ;	Chosen strategy is simple_byte
  4863  05A9  0821               	movf	??_znp_usart_event_handler+1,w
  4864  05AA  3A00               	xorlw	0	; case 0
  4865  05AB  1903               	skipnz
  4866  05AC  2DAE               	goto	i1l2525
  4867  05AD  2DB6               	goto	i1l307
  4868  05AE                     i1l2525:
  4869                           
  4870                           ; Switch size 1, requested type "simple"
  4871                           ; Number of cases is 2, Range of values is 0 to 1
  4872                           ; switch strategies available:
  4873                           ; Name         Instructions Cycles
  4874                           ; simple_byte            7     4 (average)
  4875                           ; direct_byte            8     6 (fixed)
  4876                           ; jumptable            260     6 (fixed)
  4877                           ;	Chosen strategy is simple_byte
  4878  05AE  0820               	movf	??_znp_usart_event_handler,w
  4879  05AF  3A00               	xorlw	0	; case 0
  4880  05B0  1903               	skipnz
  4881  05B1  2D9E               	goto	i1l2271
  4882  05B2  3A01               	xorlw	1	; case 1
  4883  05B3  1903               	skipnz
  4884  05B4  2DA4               	goto	i1l2273
  4885  05B5  2DB6               	goto	i1l307
  4886  05B6                     i1l307:
  4887  05B6  0008               	return
  4888  05B7                     __end_of_znp_usart_event_handler:
  4889                           
  4890                           	psect	text41
  4891  0193                     __ptext41:	
  4892 ;; *************** function _znp_frame_parser *****************
  4893 ;; Defined at:
  4894 ;;		line 32 in file "zb_znp.c"
  4895 ;; Parameters:    Size  Location     Type
  4896 ;;  ch              1    wreg     unsigned char 
  4897 ;; Auto vars:     Size  Location     Type
  4898 ;;  ch              1   10[COMMON] unsigned char 
  4899 ;; Return value:  Size  Location     Type
  4900 ;;                  1    wreg      void 
  4901 ;; Registers used:
  4902 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4903 ;; Tracked objects:
  4904 ;;		On entry : B00/0
  4905 ;;		On exit  : 300/0
  4906 ;;		Unchanged: 0/0
  4907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4908 ;;      Params:         0       0       0       0
  4909 ;;      Locals:         1       0       0       0
  4910 ;;      Temps:          2       0       0       0
  4911 ;;      Totals:         3       0       0       0
  4912 ;;Total ram usage:        3 bytes
  4913 ;; Hardware stack levels used: 1
  4914 ;; Hardware stack levels required when called: 2
  4915 ;; This function calls:
  4916 ;;		Absolute function
  4917 ;;		_znp_msg_handler
  4918 ;; This function is called by:
  4919 ;;		_znp_usart_event_handler
  4920 ;; This function uses a non-reentrant model
  4921 ;;
  4922                           
  4923  0193                     _znp_frame_parser:	
  4924                           ;psect for function _znp_frame_parser
  4925                           
  4926                           
  4927                           ;incstack = 0
  4928 ;; hardware stack exceeded
  4929                           ; Regs used in _znp_frame_parser: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4930                           ;znp_frame_parser@ch stored from wreg
  4931  0193  00FA               	movwf	znp_frame_parser@ch
  4932                           
  4933                           ;zb_znp.c: 33:     static uint8_t znp_fcs, rcv_index;;zb_znp.c: 35:     switch (znp_stat
      +                          e) {
  4934  0194  2A13               	goto	i1l2061
  4935  0195                     i1l2013:
  4936                           
  4937                           ;zb_znp.c: 37:             if (ch == 0xFE) {
  4938  0195  30FE               	movlw	254
  4939  0196  067A               	xorwf	znp_frame_parser@ch,w
  4940  0197  1D03               	btfss	3,2
  4941  0198  0008               	return
  4942                           
  4943                           ;zb_znp.c: 38:                 znp_fcs = 0;
  4944  0199  01D1               	clrf	znp_frame_parser@znp_fcs
  4945                           
  4946                           ;zb_znp.c: 39:                 rcv_index = 0;
  4947  019A  01D0               	clrf	znp_frame_parser@rcv_index
  4948                           
  4949                           ;zb_znp.c: 40:                 znp_state = LEN_STATE;
  4950  019B  01D2               	clrf	_znp_state
  4951  019C  0AD2               	incf	_znp_state,f
  4952  019D  0008               	return
  4953  019E                     i1l2019:
  4954                           
  4955                           ;zb_znp.c: 44:             znp_recv_msg.len = ch;
  4956  019E  087A               	movf	znp_frame_parser@ch,w
  4957  019F  00F8               	movwf	??_znp_frame_parser
  4958  01A0  0878               	movf	??_znp_frame_parser,w
  4959  01A1  1683               	bsf	3,5	;RP0=1, select bank1
  4960  01A2  00B9               	movwf	_znp_recv_msg^(0+128)
  4961                           
  4962                           ;zb_znp.c: 45:             znp_fcs ^= ch;
  4963  01A3  087A               	movf	znp_frame_parser@ch,w
  4964  01A4  00F8               	movwf	??_znp_frame_parser
  4965  01A5  0878               	movf	??_znp_frame_parser,w
  4966  01A6  1283               	bcf	3,5	;RP0=0, select bank0
  4967  01A7  06D1               	xorwf	znp_frame_parser@znp_fcs,f
  4968                           
  4969                           ;zb_znp.c: 46:             znp_state = CMD0_STATE;
  4970  01A8  3002               	movlw	2
  4971  01A9  00F8               	movwf	??_znp_frame_parser
  4972  01AA  0878               	movf	??_znp_frame_parser,w
  4973  01AB  00D2               	movwf	_znp_state
  4974                           
  4975                           ;zb_znp.c: 47:             break;
  4976  01AC  0008               	return
  4977  01AD                     i1l2025:
  4978                           
  4979                           ;zb_znp.c: 49:             znp_recv_msg.cmd0 = ch;
  4980  01AD  087A               	movf	znp_frame_parser@ch,w
  4981  01AE  00F8               	movwf	??_znp_frame_parser
  4982  01AF  0878               	movf	??_znp_frame_parser,w
  4983  01B0  1683               	bsf	3,5	;RP0=1, select bank1
  4984  01B1  00BA               	movwf	(_znp_recv_msg^(0+128)+1)
  4985                           
  4986                           ;zb_znp.c: 50:             znp_fcs ^= ch;
  4987  01B2  087A               	movf	znp_frame_parser@ch,w
  4988  01B3  00F8               	movwf	??_znp_frame_parser
  4989  01B4  0878               	movf	??_znp_frame_parser,w
  4990  01B5  1283               	bcf	3,5	;RP0=0, select bank0
  4991  01B6  06D1               	xorwf	znp_frame_parser@znp_fcs,f
  4992                           
  4993                           ;zb_znp.c: 51:             znp_state = CMD1_STATE;
  4994  01B7  3003               	movlw	3
  4995  01B8  00F8               	movwf	??_znp_frame_parser
  4996  01B9  0878               	movf	??_znp_frame_parser,w
  4997  01BA  00D2               	movwf	_znp_state
  4998                           
  4999                           ;zb_znp.c: 52:             break;
  5000  01BB  0008               	return
  5001  01BC                     i1l2031:
  5002                           
  5003                           ;zb_znp.c: 54:             znp_recv_msg.cmd1 = ch;
  5004  01BC  087A               	movf	znp_frame_parser@ch,w
  5005  01BD  00F8               	movwf	??_znp_frame_parser
  5006  01BE  0878               	movf	??_znp_frame_parser,w
  5007  01BF  1683               	bsf	3,5	;RP0=1, select bank1
  5008  01C0  00BB               	movwf	(_znp_recv_msg^(0+128)+2)
  5009                           
  5010                           ;zb_znp.c: 55:             znp_fcs ^= ch;
  5011  01C1  087A               	movf	znp_frame_parser@ch,w
  5012  01C2  00F8               	movwf	??_znp_frame_parser
  5013  01C3  0878               	movf	??_znp_frame_parser,w
  5014  01C4  1283               	bcf	3,5	;RP0=0, select bank0
  5015  01C5  06D1               	xorwf	znp_frame_parser@znp_fcs,f
  5016                           
  5017                           ;zb_znp.c: 56:             znp_state = (znp_recv_msg.len > 0) ? DATA_STATE : FCS_STATE;
  5018  01C6  1683               	bsf	3,5	;RP0=1, select bank1
  5019  01C7  0839               	movf	_znp_recv_msg^(0+128),w
  5020  01C8  1D03               	btfss	3,2
  5021  01C9  29D0               	goto	i1l2039
  5022  01CA                     i1l2037:
  5023  01CA  3005               	movlw	5
  5024  01CB  00F8               	movwf	??_znp_frame_parser
  5025  01CC  0878               	movf	??_znp_frame_parser,w
  5026  01CD  1283               	bcf	3,5	;RP0=0, select bank0
  5027  01CE  00D2               	movwf	_znp_state
  5028  01CF  0008               	return
  5029  01D0                     i1l2039:
  5030  01D0  3004               	movlw	4
  5031  01D1  00F8               	movwf	??_znp_frame_parser
  5032  01D2  0878               	movf	??_znp_frame_parser,w
  5033  01D3  1283               	bcf	3,5	;RP0=0, select bank0
  5034  01D4  00D2               	movwf	_znp_state
  5035  01D5  0008               	return
  5036  01D6                     i1l2041:
  5037                           
  5038                           ;zb_znp.c: 59:             znp_recv_msg.data[rcv_index++] = ch;
  5039  01D6  087A               	movf	znp_frame_parser@ch,w
  5040  01D7  00F8               	movwf	??_znp_frame_parser
  5041  01D8  0850               	movf	znp_frame_parser@rcv_index,w
  5042  01D9  3EBC               	addlw	(low ((_znp_recv_msg| 0+3)))& (0+255)
  5043  01DA  0084               	movwf	4
  5044  01DB  0878               	movf	??_znp_frame_parser,w
  5045  01DC  0080               	movwf	0
  5046  01DD  3001               	movlw	1
  5047  01DE  00F8               	movwf	??_znp_frame_parser
  5048  01DF  0878               	movf	??_znp_frame_parser,w
  5049  01E0  07D0               	addwf	znp_frame_parser@rcv_index,f
  5050                           
  5051                           ;zb_znp.c: 60:             znp_fcs ^= ch;
  5052  01E1  087A               	movf	znp_frame_parser@ch,w
  5053  01E2  00F8               	movwf	??_znp_frame_parser
  5054  01E3  0878               	movf	??_znp_frame_parser,w
  5055  01E4  06D1               	xorwf	znp_frame_parser@znp_fcs,f
  5056                           
  5057                           ;zb_znp.c: 61:             if (rcv_index == znp_recv_msg.len)
  5058  01E5  1683               	bsf	3,5	;RP0=1, select bank1
  5059  01E6  0839               	movf	_znp_recv_msg^(0+128),w
  5060  01E7  1283               	bcf	3,5	;RP0=0, select bank0
  5061  01E8  0650               	xorwf	znp_frame_parser@rcv_index,w
  5062  01E9  1D03               	skipz
  5063  01EA  0008               	return
  5064  01EB  29CA               	goto	i1l2037
  5065  01EC                     i1l2051:
  5066                           
  5067                           ;zb_znp.c: 65:             if (znp_fcs == ch) {
  5068  01EC  0851               	movf	znp_frame_parser@znp_fcs,w
  5069  01ED  067A               	xorwf	znp_frame_parser@ch,w
  5070  01EE  1D03               	skipz
  5071  01EF  2A0F               	goto	i1l2057
  5072                           
  5073                           ;zb_znp.c: 66:                 last_cmd_rcv
  5074  01F0  1683               	bsf	3,5	;RP0=1, select bank1
  5075  01F1  083A               	movf	(_znp_recv_msg^(0+128)+1),w
  5076  01F2  00F8               	movwf	??_znp_frame_parser
  5077  01F3  01F9               	clrf	??_znp_frame_parser+1
  5078  01F4  0878               	movf	??_znp_frame_parser,w
  5079  01F5  00F9               	movwf	??_znp_frame_parser+1
  5080  01F6  01F8               	clrf	??_znp_frame_parser
  5081  01F7  083B               	movf	(_znp_recv_msg^(0+128)+2),w
  5082  01F8  0778               	addwf	??_znp_frame_parser,w
  5083  01F9  1283               	bcf	3,5	;RP0=0, select bank0
  5084  01FA  00CE               	movwf	_last_cmd_rcv
  5085  01FB  0879               	movf	??_znp_frame_parser+1,w
  5086  01FC  1803               	skipnc
  5087  01FD  0A79               	incf	??_znp_frame_parser+1,w
  5088  01FE  00CF               	movwf	_last_cmd_rcv+1
  5089                           
  5090                           ;zb_znp.c: 68:                 _zb_znp_cb(
  5091  01FF  084F               	movf	_last_cmd_rcv+1,w
  5092  0200  00F3               	movwf	znp_msg_handler@cmd+1
  5093  0201  084E               	movf	_last_cmd_rcv,w
  5094  0202  00F2               	movwf	znp_msg_handler@cmd
  5095  0203  30BC               	movlw	(low ((_znp_recv_msg| 0+3)))& (0+255)
  5096  0204  00F8               	movwf	??_znp_frame_parser
  5097  0205  0878               	movf	??_znp_frame_parser,w
  5098  0206  00F4               	movwf	znp_msg_handler@data
  5099  0207  1683               	bsf	3,5	;RP0=1, select bank1
  5100  0208  0839               	movf	_znp_recv_msg^(0+128),w
  5101  0209  00F9               	movwf	??_znp_frame_parser+1
  5102  020A  0879               	movf	??_znp_frame_parser+1,w
  5103  020B  00F5               	movwf	znp_msg_handler@len
  5104  020C  1283               	bcf	3,5	;RP0=0, select bank0
  5105  020D  0853               	movf	__zb_znp_cb,w
  5106  020E  201F               	fcall	i1fptable
  5107  020F                     i1l2057:
  5108                           
  5109                           ;zb_znp.c: 74:             znp_state = SOP_STATE;
  5110  020F  1283               	bcf	3,5	;RP0=0, select bank0
  5111  0210  1303               	bcf	3,6	;RP1=0, select bank0
  5112  0211  01D2               	clrf	_znp_state
  5113                           
  5114                           ;zb_znp.c: 75:             break;
  5115  0212  0008               	return
  5116  0213                     i1l2061:
  5117  0213  0852               	movf	_znp_state,w
  5118  0214  00F8               	movwf	??_znp_frame_parser
  5119  0215  01F9               	clrf	??_znp_frame_parser+1
  5120                           
  5121                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5122                           ; Switch size 1, requested type "simple"
  5123                           ; Number of cases is 1, Range of values is 0 to 0
  5124                           ; switch strategies available:
  5125                           ; Name         Instructions Cycles
  5126                           ; simple_byte            4     3 (average)
  5127                           ; direct_byte            7     6 (fixed)
  5128                           ; jumptable            260     6 (fixed)
  5129                           ;	Chosen strategy is simple_byte
  5130  0216  0879               	movf	??_znp_frame_parser+1,w
  5131  0217  3A00               	xorlw	0	; case 0
  5132  0218  1903               	skipnz
  5133  0219  2A1B               	goto	i1l2527
  5134  021A  2A2F               	goto	i1l299
  5135  021B                     i1l2527:
  5136                           
  5137                           ; Switch size 1, requested type "simple"
  5138                           ; Number of cases is 6, Range of values is 0 to 5
  5139                           ; switch strategies available:
  5140                           ; Name         Instructions Cycles
  5141                           ; direct_byte           12     6 (fixed)
  5142                           ; simple_byte           19    10 (average)
  5143                           ; jumptable            260     6 (fixed)
  5144                           ;	Chosen strategy is simple_byte
  5145  021B  0878               	movf	??_znp_frame_parser,w
  5146  021C  3A00               	xorlw	0	; case 0
  5147  021D  1903               	skipnz
  5148  021E  2995               	goto	i1l2013
  5149  021F  3A01               	xorlw	1	; case 1
  5150  0220  1903               	skipnz
  5151  0221  299E               	goto	i1l2019
  5152  0222  3A03               	xorlw	3	; case 2
  5153  0223  1903               	skipnz
  5154  0224  29AD               	goto	i1l2025
  5155  0225  3A01               	xorlw	1	; case 3
  5156  0226  1903               	skipnz
  5157  0227  29BC               	goto	i1l2031
  5158  0228  3A07               	xorlw	7	; case 4
  5159  0229  1903               	skipnz
  5160  022A  29D6               	goto	i1l2041
  5161  022B  3A01               	xorlw	1	; case 5
  5162  022C  1903               	skipnz
  5163  022D  29EC               	goto	i1l2051
  5164  022E  2A2F               	goto	i1l299
  5165  022F                     i1l299:
  5166  022F  0008               	return
  5167  0230                     __end_of_znp_frame_parser:
  5168                           
  5169                           	psect	text42
  5170  0304                     __ptext42:	
  5171 ;; *************** function _znp_msg_handler *****************
  5172 ;; Defined at:
  5173 ;;		line 95 in file "main.c"
  5174 ;; Parameters:    Size  Location     Type
  5175 ;;  cmd             2    2[COMMON] unsigned int 
  5176 ;;  data            1    4[COMMON] PTR unsigned char 
  5177 ;;		 -> znp_recv_msg(33), 
  5178 ;;  len             1    5[COMMON] unsigned char 
  5179 ;; Auto vars:     Size  Location     Type
  5180 ;;  endpoint        1    7[COMMON] unsigned char 
  5181 ;; Return value:  Size  Location     Type
  5182 ;;                  1    wreg      void 
  5183 ;; Registers used:
  5184 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5185 ;; Tracked objects:
  5186 ;;		On entry : B00/0
  5187 ;;		On exit  : 300/0
  5188 ;;		Unchanged: 0/0
  5189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5190 ;;      Params:         4       0       0       0
  5191 ;;      Locals:         1       0       0       0
  5192 ;;      Temps:          1       0       0       0
  5193 ;;      Totals:         6       0       0       0
  5194 ;;Total ram usage:        6 bytes
  5195 ;; Hardware stack levels used: 1
  5196 ;; Hardware stack levels required when called: 1
  5197 ;; This function calls:
  5198 ;;		_xEventGroupSetBits
  5199 ;; This function is called by:
  5200 ;;		_main
  5201 ;;		_znp_frame_parser
  5202 ;; This function uses a non-reentrant model
  5203 ;;
  5204                           
  5205  0304                     _znp_msg_handler:	
  5206                           ;psect for function _znp_msg_handler
  5207                           
  5208                           
  5209                           ;main.c: 96:     switch (cmd) {
  5210                           
  5211                           ;incstack = 0
  5212 ;; hardware stack exceeded
  5213                           ; Regs used in _znp_msg_handler: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5214  0304  2B54               	goto	i1l1827
  5215  0305                     i1l1801:
  5216                           
  5217                           ;main.c: 98:         {;main.c: 107:             uint8_t endpoint = data[6];
  5218  0305  0874               	movf	znp_msg_handler@data,w
  5219  0306  3E06               	addlw	6
  5220  0307  0084               	movwf	4
  5221  0308  0800               	movf	0,w
  5222  0309  00F6               	movwf	??_znp_msg_handler
  5223  030A  0876               	movf	??_znp_msg_handler,w
  5224  030B  00F7               	movwf	znp_msg_handler@endpoint
  5225                           
  5226                           ;main.c: 108:             if (endpoint == 0x03 || endpoint == 0x02) {
  5227  030C  3003               	movlw	3
  5228  030D  0677               	xorwf	znp_msg_handler@endpoint,w
  5229  030E  1903               	btfsc	3,2
  5230  030F  2B14               	goto	i1l1807
  5231  0310  3002               	movlw	2
  5232  0311  0677               	xorwf	znp_msg_handler@endpoint,w
  5233  0312  1D03               	btfss	3,2
  5234  0313  0008               	return
  5235  0314                     i1l1807:
  5236                           
  5237                           ;main.c: 109:                     if(data[18] == 1){
  5238  0314  0874               	movf	znp_msg_handler@data,w
  5239  0315  3E12               	addlw	18
  5240  0316  0084               	movwf	4
  5241  0317  0300               	decf	0,w
  5242  0318  1D03               	btfss	3,2
  5243  0319  2B26               	goto	i1l1811
  5244                           
  5245                           ;main.c: 110:                         PORTAbits.RA7 ^= 1;
  5246  031A  0D05               	rlf	5,w	;volatile
  5247  031B  0D05               	rlf	5,w	;volatile
  5248  031C  3901               	andlw	1
  5249  031D  00F6               	movwf	??_znp_msg_handler
  5250  031E  3001               	movlw	1
  5251  031F  06F6               	xorwf	??_znp_msg_handler,f
  5252  0320  0CF6               	rrf	??_znp_msg_handler,f
  5253  0321  0CF6               	rrf	??_znp_msg_handler,f
  5254  0322  0805               	movf	5,w	;volatile
  5255  0323  0676               	xorwf	??_znp_msg_handler,w
  5256  0324  397F               	andlw	-129
  5257  0325  2B46               	goto	L3
  5258  0326                     i1l1811:	
  5259                           ;main.c: 111:                     }
  5260                           
  5261  0326  0874               	movf	znp_msg_handler@data,w
  5262  0327  3E12               	addlw	18
  5263  0328  0084               	movwf	4
  5264  0329  3002               	movlw	2
  5265  032A  0600               	xorwf	0,w
  5266  032B  1D03               	btfss	3,2
  5267  032C  2B36               	goto	i1l1815
  5268                           
  5269                           ;main.c: 113:                         PORTAbits.RA0 ^= 1;
  5270  032D  0805               	movf	5,w	;volatile
  5271  032E  3901               	andlw	1
  5272  032F  00F6               	movwf	??_znp_msg_handler
  5273  0330  3001               	movlw	1
  5274  0331  06F6               	xorwf	??_znp_msg_handler,f
  5275  0332  0805               	movf	5,w	;volatile
  5276  0333  0676               	xorwf	??_znp_msg_handler,w
  5277  0334  39FE               	andlw	-2
  5278  0335  2B46               	goto	L3
  5279  0336                     i1l1815:	
  5280                           ;main.c: 114:                     }else if(data[18] == 3){
  5281                           
  5282  0336  0874               	movf	znp_msg_handler@data,w
  5283  0337  3E12               	addlw	18
  5284  0338  0084               	movwf	4
  5285  0339  3003               	movlw	3
  5286  033A  0600               	xorwf	0,w
  5287  033B  1D03               	btfss	3,2
  5288  033C  2B48               	goto	i1l1819
  5289                           
  5290                           ;main.c: 115:                         PORTAbits.RA1 ^= 1;
  5291  033D  0C05               	rrf	5,w	;volatile
  5292  033E  3901               	andlw	1
  5293  033F  00F6               	movwf	??_znp_msg_handler
  5294  0340  3001               	movlw	1
  5295  0341  06F6               	xorwf	??_znp_msg_handler,f
  5296  0342  0DF6               	rlf	??_znp_msg_handler,f
  5297  0343  0805               	movf	5,w	;volatile
  5298  0344  0676               	xorwf	??_znp_msg_handler,w
  5299  0345  39FD               	andlw	-3
  5300  0346                     L3:
  5301  0346  0676               	xorwf	??_znp_msg_handler,w
  5302  0347  0085               	movwf	5	;volatile
  5303  0348                     i1l1819:
  5304                           
  5305                           ;main.c: 117:                     xEventGroupSetBits((1 << 1));
  5306  0348  3002               	movlw	2
  5307  0349  26F0               	fcall	_xEventGroupSetBits
  5308  034A  0008               	return
  5309  034B                     i1l1821:
  5310                           
  5311                           ;main.c: 122:             if (data[0] == 0x07) xEventGroupSetBits((1 << 0));
  5312  034B  0874               	movf	znp_msg_handler@data,w
  5313  034C  0084               	movwf	4
  5314  034D  3007               	movlw	7
  5315  034E  0600               	xorwf	0,w
  5316  034F  1D03               	btfss	3,2
  5317  0350  0008               	return
  5318  0351  3001               	movlw	1
  5319  0352  26F0               	fcall	_xEventGroupSetBits
  5320  0353  0008               	return
  5321  0354                     i1l1827:
  5322                           
  5323                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  5324                           ; Switch size 1, requested type "simple"
  5325                           ; Number of cases is 2, Range of values is 68 to 69
  5326                           ; switch strategies available:
  5327                           ; Name         Instructions Cycles
  5328                           ; simple_byte            7     4 (average)
  5329                           ; direct_byte           11     9 (fixed)
  5330                           ; jumptable            263     9 (fixed)
  5331                           ;	Chosen strategy is simple_byte
  5332  0354  0873               	movf	znp_msg_handler@cmd+1,w
  5333  0355  3A44               	xorlw	68	; case 68
  5334  0356  1903               	skipnz
  5335  0357  2B5C               	goto	i1l2529
  5336  0358  3A01               	xorlw	1	; case 69
  5337  0359  1903               	skipnz
  5338  035A  2B61               	goto	i1l2531
  5339  035B  2B66               	goto	i1l92
  5340  035C                     i1l2529:
  5341                           
  5342                           ; Switch size 1, requested type "simple"
  5343                           ; Number of cases is 1, Range of values is 129 to 129
  5344                           ; switch strategies available:
  5345                           ; Name         Instructions Cycles
  5346                           ; simple_byte            4     3 (average)
  5347                           ; direct_byte           10     9 (fixed)
  5348                           ; jumptable            263     9 (fixed)
  5349                           ;	Chosen strategy is simple_byte
  5350  035C  0872               	movf	znp_msg_handler@cmd,w
  5351  035D  3A81               	xorlw	129	; case 129
  5352  035E  1903               	skipnz
  5353  035F  2B05               	goto	i1l1801
  5354  0360  2B66               	goto	i1l92
  5355  0361                     i1l2531:
  5356                           
  5357                           ; Switch size 1, requested type "simple"
  5358                           ; Number of cases is 1, Range of values is 192 to 192
  5359                           ; switch strategies available:
  5360                           ; Name         Instructions Cycles
  5361                           ; simple_byte            4     3 (average)
  5362                           ; direct_byte           10     9 (fixed)
  5363                           ; jumptable            263     9 (fixed)
  5364                           ;	Chosen strategy is simple_byte
  5365  0361  0872               	movf	znp_msg_handler@cmd,w
  5366  0362  3AC0               	xorlw	192	; case 192
  5367  0363  1903               	skipnz
  5368  0364  2B4B               	goto	i1l1821
  5369  0365  2B66               	goto	i1l92
  5370  0366                     i1l92:
  5371  0366  0008               	return
  5372  0367                     __end_of_znp_msg_handler:
  5373                           
  5374                           	psect	text43
  5375  002C                     __ptext43:	
  5376 ;; *************** function _sys_tick_handler *****************
  5377 ;; Defined at:
  5378 ;;		line 27 in file "sys_tick.c"
  5379 ;; Parameters:    Size  Location     Type
  5380 ;;		None
  5381 ;; Auto vars:     Size  Location     Type
  5382 ;;  i               1    0[BANK0 ] unsigned char 
  5383 ;; Return value:  Size  Location     Type
  5384 ;;                  1    wreg      void 
  5385 ;; Registers used:
  5386 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5387 ;; Tracked objects:
  5388 ;;		On entry : 300/0
  5389 ;;		On exit  : 300/0
  5390 ;;		Unchanged: 0/0
  5391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5392 ;;      Params:         0       0       0       0
  5393 ;;      Locals:         0       1       0       0
  5394 ;;      Temps:         10       0       0       0
  5395 ;;      Totals:        10       1       0       0
  5396 ;;Total ram usage:       11 bytes
  5397 ;; Hardware stack levels used: 1
  5398 ;; Hardware stack levels required when called: 2
  5399 ;; This function calls:
  5400 ;;		__blink_handler
  5401 ;;		i1___bmul
  5402 ;; This function is called by:
  5403 ;;		_sys_tick_init
  5404 ;;		_ISR
  5405 ;; This function uses a non-reentrant model
  5406 ;;
  5407                           
  5408  002C                     _sys_tick_handler:	
  5409                           ;psect for function _sys_tick_handler
  5410                           
  5411                           
  5412                           ;sys_tick.c: 29:     TMR1 = (65535U) - 50000U;
  5413                           
  5414                           ;incstack = 0
  5415                           ; Regs used in _sys_tick_handler: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5416  002C  303C               	movlw	60
  5417  002D  008F               	movwf	15	;volatile
  5418  002E  30AF               	movlw	175
  5419  002F  008E               	movwf	14	;volatile
  5420                           
  5421                           ;sys_tick.c: 30:     _sys_tick.tick++;
  5422  0030  3001               	movlw	1
  5423  0031  1683               	bsf	3,5	;RP0=1, select bank1
  5424  0032  07B5               	addwf	(__sys_tick^(0+128)+21),f
  5425  0033  3000               	movlw	0
  5426  0034  1803               	skipnc
  5427  0035  3001               	movlw	1
  5428  0036  07B6               	addwf	((__sys_tick+1)^(0+128)+21),f
  5429  0037  3000               	movlw	0
  5430  0038  1803               	skipnc
  5431  0039  3001               	movlw	1
  5432  003A  07B7               	addwf	((__sys_tick+2)^(0+128)+21),f
  5433  003B  3000               	movlw	0
  5434  003C  1803               	skipnc
  5435  003D  3001               	movlw	1
  5436  003E  07B8               	addwf	((__sys_tick+3)^(0+128)+21),f
  5437                           
  5438                           ;sys_tick.c: 32:     for (uint8_t i = 0; i < _sys_tick._handler_index; i++) {
  5439  003F  1283               	bcf	3,5	;RP0=0, select bank0
  5440  0040  01A0               	clrf	sys_tick_handler@i
  5441  0041                     i1l2299:
  5442  0041  1683               	bsf	3,5	;RP0=1, select bank1
  5443  0042  0820               	movf	__sys_tick^(0+128),w
  5444  0043  3907               	andlw	7
  5445  0044  1283               	bcf	3,5	;RP0=0, select bank0
  5446  0045  0220               	subwf	sys_tick_handler@i,w
  5447  0046  1803               	btfsc	3,0
  5448  0047  0008               	return
  5449                           
  5450                           ;sys_tick.c: 33:         _sys_tick._handle[i].counter_tick++;
  5451  0048  300A               	movlw	10
  5452  0049  00F4               	movwf	??_sys_tick_handler
  5453  004A  0874               	movf	??_sys_tick_handler,w
  5454  004B  00F0               	movwf	i1___bmul@multiplicand
  5455  004C  0820               	movf	sys_tick_handler@i,w
  5456  004D  2641               	fcall	i1___bmul
  5457  004E  3EA6               	addlw	(low ((__sys_tick| 0+6)))& (0+255)
  5458  004F  0084               	movwf	4
  5459  0050  3001               	movlw	1
  5460  0051  1383               	bcf	3,7	;select IRP bank1
  5461  0052  0780               	addwf	0,f
  5462  0053  0A84               	incf	4,f
  5463  0054  3000               	movlw	0
  5464  0055  1803               	skipnc
  5465  0056  3E01               	addlw	1
  5466  0057  1D03               	skipz
  5467  0058  0780               	addwf	0,f
  5468  0059  0A84               	incf	4,f
  5469  005A  3000               	movlw	0
  5470  005B  1803               	skipnc
  5471  005C  3E01               	addlw	1
  5472  005D  1D03               	skipz
  5473  005E  0780               	addwf	0,f
  5474  005F  0A84               	incf	4,f
  5475  0060  3000               	movlw	0
  5476  0061  1803               	skipnc
  5477  0062  3E01               	addlw	1
  5478  0063  0780               	addwf	0,f
  5479                           
  5480                           ;sys_tick.c: 34:         if (_sys_tick._handle[i]._en) {
  5481  0064  300A               	movlw	10
  5482  0065  00F4               	movwf	??_sys_tick_handler
  5483  0066  0874               	movf	??_sys_tick_handler,w
  5484  0067  00F0               	movwf	i1___bmul@multiplicand
  5485  0068  0820               	movf	sys_tick_handler@i,w
  5486  0069  2641               	fcall	i1___bmul
  5487  006A  3EA1               	addlw	(low ((__sys_tick| 0+1)))& (0+255)
  5488  006B  0084               	movwf	4
  5489  006C  1383               	bcf	3,7	;select IRP bank1
  5490  006D  1C00               	btfss	0,0
  5491  006E  28DB               	goto	i1l2297
  5492                           
  5493                           ;sys_tick.c: 35:             if (_sys_tick._handle[i].counter_tick
  5494  006F  300A               	movlw	10
  5495  0070  00F4               	movwf	??_sys_tick_handler
  5496  0071  0874               	movf	??_sys_tick_handler,w
  5497  0072  00F0               	movwf	i1___bmul@multiplicand
  5498  0073  0820               	movf	sys_tick_handler@i,w
  5499  0074  2641               	fcall	i1___bmul
  5500  0075  3EA2               	addlw	(low ((__sys_tick| 0+2)))& (0+255)
  5501  0076  0084               	movwf	4
  5502  0077  1383               	bcf	3,7	;select IRP bank1
  5503  0078  0800               	movf	0,w
  5504  0079  00F5               	movwf	??_sys_tick_handler+1
  5505  007A  0A84               	incf	4,f
  5506  007B  0800               	movf	0,w
  5507  007C  00F6               	movwf	??_sys_tick_handler+2
  5508  007D  0A84               	incf	4,f
  5509  007E  0800               	movf	0,w
  5510  007F  00F7               	movwf	??_sys_tick_handler+3
  5511  0080  0A84               	incf	4,f
  5512  0081  0800               	movf	0,w
  5513  0082  00F8               	movwf	??_sys_tick_handler+4
  5514  0083  300A               	movlw	10
  5515  0084  00F9               	movwf	??_sys_tick_handler+5
  5516  0085  0879               	movf	??_sys_tick_handler+5,w
  5517  0086  00F0               	movwf	i1___bmul@multiplicand
  5518  0087  0820               	movf	sys_tick_handler@i,w
  5519  0088  2641               	fcall	i1___bmul
  5520  0089  3EA6               	addlw	(low ((__sys_tick| 0+6)))& (0+255)
  5521  008A  0084               	movwf	4
  5522  008B  1383               	bcf	3,7	;select IRP bank1
  5523  008C  0800               	movf	0,w
  5524  008D  00FA               	movwf	??_sys_tick_handler+6
  5525  008E  0A84               	incf	4,f
  5526  008F  0800               	movf	0,w
  5527  0090  00FB               	movwf	??_sys_tick_handler+7
  5528  0091  0A84               	incf	4,f
  5529  0092  0800               	movf	0,w
  5530  0093  00FC               	movwf	??_sys_tick_handler+8
  5531  0094  0A84               	incf	4,f
  5532  0095  0800               	movf	0,w
  5533  0096  00FD               	movwf	??_sys_tick_handler+9
  5534  0097  0878               	movf	??_sys_tick_handler+4,w
  5535  0098  027D               	subwf	??_sys_tick_handler+9,w
  5536  0099  1D03               	skipz
  5537  009A  28A5               	goto	u107_25
  5538  009B  0877               	movf	??_sys_tick_handler+3,w
  5539  009C  027C               	subwf	??_sys_tick_handler+8,w
  5540  009D  1D03               	skipz
  5541  009E  28A5               	goto	u107_25
  5542  009F  0876               	movf	??_sys_tick_handler+2,w
  5543  00A0  027B               	subwf	??_sys_tick_handler+7,w
  5544  00A1  1D03               	skipz
  5545  00A2  28A5               	goto	u107_25
  5546  00A3  0875               	movf	??_sys_tick_handler+1,w
  5547  00A4  027A               	subwf	??_sys_tick_handler+6,w
  5548  00A5                     u107_25:
  5549  00A5  1C03               	skipc
  5550  00A6  28DB               	goto	i1l2297
  5551                           
  5552                           ;sys_tick.c: 36:                 >= _sys_tick._handle[i].trigger_tick) {;sys_tick.c: 37:
      +                                           _sys_tick._handle[i].counter_tick = 0;
  5553  00A7  300A               	movlw	10
  5554  00A8  00F4               	movwf	??_sys_tick_handler
  5555  00A9  0874               	movf	??_sys_tick_handler,w
  5556  00AA  00F0               	movwf	i1___bmul@multiplicand
  5557  00AB  0820               	movf	sys_tick_handler@i,w
  5558  00AC  2641               	fcall	i1___bmul
  5559  00AD  3EA6               	addlw	(low ((__sys_tick| 0+6)))& (0+255)
  5560  00AE  0084               	movwf	4
  5561  00AF  3000               	movlw	0
  5562  00B0  1383               	bcf	3,7	;select IRP bank1
  5563  00B1  0080               	movwf	0
  5564  00B2  0A84               	incf	4,f
  5565  00B3  3000               	movlw	0
  5566  00B4  0080               	movwf	0
  5567  00B5  0A84               	incf	4,f
  5568  00B6  3000               	movlw	0
  5569  00B7  0080               	movwf	0
  5570  00B8  0A84               	incf	4,f
  5571  00B9  3000               	movlw	0
  5572  00BA  0080               	movwf	0
  5573                           
  5574                           ;sys_tick.c: 38:                 _sys_tick._handle[i].cb();
  5575  00BB  300A               	movlw	10
  5576  00BC  00F4               	movwf	??_sys_tick_handler
  5577  00BD  0874               	movf	??_sys_tick_handler,w
  5578  00BE  00F0               	movwf	i1___bmul@multiplicand
  5579  00BF  0820               	movf	sys_tick_handler@i,w
  5580  00C0  2641               	fcall	i1___bmul
  5581  00C1  3EAA               	addlw	(low ((__sys_tick| 0+10)))& (0+255)
  5582  00C2  0084               	movwf	4
  5583  00C3  1383               	bcf	3,7	;select IRP bank1
  5584  00C4  0800               	movf	0,w
  5585  00C5  201F               	fcall	i1fptable
  5586                           
  5587                           ;sys_tick.c: 39:                 if (!_sys_tick._handle[i]._periodic)
  5588  00C6  300A               	movlw	10
  5589  00C7  00F4               	movwf	??_sys_tick_handler
  5590  00C8  0874               	movf	??_sys_tick_handler,w
  5591  00C9  00F0               	movwf	i1___bmul@multiplicand
  5592  00CA  0820               	movf	sys_tick_handler@i,w
  5593  00CB  2641               	fcall	i1___bmul
  5594  00CC  3EA1               	addlw	(low ((__sys_tick| 0+1)))& (0+255)
  5595  00CD  0084               	movwf	4
  5596  00CE  1383               	bcf	3,7	;select IRP bank1
  5597  00CF  1880               	btfsc	0,1
  5598  00D0  28DB               	goto	i1l2297
  5599                           
  5600                           ;sys_tick.c: 40:                     _sys_tick._handle[i]._en = 0;
  5601  00D1  300A               	movlw	10
  5602  00D2  00F4               	movwf	??_sys_tick_handler
  5603  00D3  0874               	movf	??_sys_tick_handler,w
  5604  00D4  00F0               	movwf	i1___bmul@multiplicand
  5605  00D5  0820               	movf	sys_tick_handler@i,w
  5606  00D6  2641               	fcall	i1___bmul
  5607  00D7  3EA1               	addlw	(low ((__sys_tick| 0+1)))& (0+255)
  5608  00D8  0084               	movwf	4
  5609  00D9  1383               	bcf	3,7	;select IRP bank1
  5610  00DA  1000               	bcf	0,0
  5611  00DB                     i1l2297:
  5612                           
  5613                           ;sys_tick.c: 43:     }
  5614  00DB  3001               	movlw	1
  5615  00DC  00F4               	movwf	??_sys_tick_handler
  5616  00DD  0874               	movf	??_sys_tick_handler,w
  5617  00DE  07A0               	addwf	sys_tick_handler@i,f
  5618  00DF  2841               	goto	i1l2299
  5619  00E0                     __end_of_sys_tick_handler:
  5620                           
  5621                           	psect	text44
  5622  0641                     __ptext44:	
  5623 ;; *************** function i1___bmul *****************
  5624 ;; Defined at:
  5625 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\Umul8.c"
  5626 ;; Parameters:    Size  Location     Type
  5627 ;;  multiplier      1    wreg     unsigned char 
  5628 ;;  multiplicand    1    0[COMMON] unsigned char 
  5629 ;; Auto vars:     Size  Location     Type
  5630 ;;  multiplier      1    3[COMMON] unsigned char 
  5631 ;;  product         1    2[COMMON] unsigned char 
  5632 ;; Return value:  Size  Location     Type
  5633 ;;                  1    wreg      unsigned char 
  5634 ;; Registers used:
  5635 ;;		wreg, status,2, status,0
  5636 ;; Tracked objects:
  5637 ;;		On entry : 300/0
  5638 ;;		On exit  : 300/0
  5639 ;;		Unchanged: 300/0
  5640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5641 ;;      Params:         1       0       0       0
  5642 ;;      Locals:         2       0       0       0
  5643 ;;      Temps:          1       0       0       0
  5644 ;;      Totals:         4       0       0       0
  5645 ;;Total ram usage:        4 bytes
  5646 ;; Hardware stack levels used: 1
  5647 ;; This function calls:
  5648 ;;		Nothing
  5649 ;; This function is called by:
  5650 ;;		_sys_tick_handler
  5651 ;; This function uses a non-reentrant model
  5652 ;;
  5653                           
  5654  0641                     i1___bmul:	
  5655                           ;psect for function i1___bmul
  5656                           
  5657                           
  5658                           ;incstack = 0
  5659                           ; Regs used in i1___bmul: [wreg+status,2+status,0]
  5660                           ;i1___bmul@multiplier stored from wreg
  5661  0641  00F3               	movwf	i1___bmul@multiplier
  5662  0642  01F2               	clrf	i1___bmul@product
  5663  0643                     i1l2113:
  5664  0643  1C73               	btfss	i1___bmul@multiplier,0
  5665  0644  2E49               	goto	i1l2117
  5666  0645  0870               	movf	i1___bmul@multiplicand,w
  5667  0646  00F1               	movwf	??i1___bmul
  5668  0647  0871               	movf	??i1___bmul,w
  5669  0648  07F2               	addwf	i1___bmul@product,f
  5670  0649                     i1l2117:
  5671  0649  1003               	clrc
  5672  064A  0DF0               	rlf	i1___bmul@multiplicand,f
  5673  064B  1003               	clrc
  5674  064C  0CF3               	rrf	i1___bmul@multiplier,f
  5675  064D  0873               	movf	i1___bmul@multiplier,w
  5676  064E  1D03               	btfss	3,2
  5677  064F  2E43               	goto	i1l2113
  5678  0650  0872               	movf	i1___bmul@product,w
  5679  0651  0008               	return
  5680  0652                     __end_ofi1___bmul:
  5681                           
  5682                           	psect	text45
  5683  074B                     __ptext45:	
  5684 ;; *************** function __blink_handler *****************
  5685 ;; Defined at:
  5686 ;;		line 9 in file "led_ind.c"
  5687 ;; Parameters:    Size  Location     Type
  5688 ;;		None
  5689 ;; Auto vars:     Size  Location     Type
  5690 ;;		None
  5691 ;; Return value:  Size  Location     Type
  5692 ;;                  1    wreg      void 
  5693 ;; Registers used:
  5694 ;;		wreg, status,2, status,0, pclath, cstack
  5695 ;; Tracked objects:
  5696 ;;		On entry : B00/0
  5697 ;;		On exit  : B00/0
  5698 ;;		Unchanged: 800/0
  5699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5700 ;;      Params:         0       0       0       0
  5701 ;;      Locals:         0       0       0       0
  5702 ;;      Temps:          0       0       0       0
  5703 ;;      Totals:         0       0       0       0
  5704 ;;Total ram usage:        0 bytes
  5705 ;; Hardware stack levels used: 1
  5706 ;; Hardware stack levels required when called: 1
  5707 ;; This function calls:
  5708 ;;		_led_ind_toggle
  5709 ;; This function is called by:
  5710 ;;		_led_ind_init
  5711 ;;		_sys_tick_handler
  5712 ;; This function uses a non-reentrant model
  5713 ;;
  5714                           
  5715  074B                     __blink_handler:	
  5716                           ;psect for function __blink_handler
  5717                           
  5718                           
  5719                           ;led_ind.c: 10:     led_ind_toggle();
  5720                           
  5721                           ;incstack = 0
  5722                           ; Regs used in __blink_handler: [wreg+status,2+status,0+pclath+cstack]
  5723  074B  2670               	fcall	_led_ind_toggle
  5724  074C  0008               	return
  5725  074D                     __end_of__blink_handler:
  5726                           
  5727                           	psect	text46
  5728  0670                     __ptext46:	
  5729 ;; *************** function _led_ind_toggle *****************
  5730 ;; Defined at:
  5731 ;;		line 36 in file "led_ind.c"
  5732 ;; Parameters:    Size  Location     Type
  5733 ;;		None
  5734 ;; Auto vars:     Size  Location     Type
  5735 ;;		None
  5736 ;; Return value:  Size  Location     Type
  5737 ;;                  1    wreg      void 
  5738 ;; Registers used:
  5739 ;;		wreg, status,2, status,0
  5740 ;; Tracked objects:
  5741 ;;		On entry : B00/0
  5742 ;;		On exit  : B00/0
  5743 ;;		Unchanged: 800/0
  5744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5745 ;;      Params:         0       0       0       0
  5746 ;;      Locals:         0       0       0       0
  5747 ;;      Temps:          1       0       0       0
  5748 ;;      Totals:         1       0       0       0
  5749 ;;Total ram usage:        1 bytes
  5750 ;; Hardware stack levels used: 1
  5751 ;; This function calls:
  5752 ;;		Nothing
  5753 ;; This function is called by:
  5754 ;;		__blink_handler
  5755 ;; This function uses a non-reentrant model
  5756 ;;
  5757                           
  5758  0670                     _led_ind_toggle:	
  5759                           ;psect for function _led_ind_toggle
  5760                           
  5761                           
  5762                           ;led_ind.c: 37:     PORTAbits.RA2 ^= 1;
  5763                           
  5764                           ;incstack = 0
  5765                           ; Regs used in _led_ind_toggle: [wreg+status,2+status,0]
  5766  0670  0C05               	rrf	5,w	;volatile
  5767  0671  00F0               	movwf	??_led_ind_toggle
  5768  0672  0C70               	rrf	??_led_ind_toggle,w
  5769  0673  3901               	andlw	1
  5770  0674  00F0               	movwf	??_led_ind_toggle
  5771  0675  3001               	movlw	1
  5772  0676  06F0               	xorwf	??_led_ind_toggle,f
  5773  0677  0DF0               	rlf	??_led_ind_toggle,f
  5774  0678  0DF0               	rlf	??_led_ind_toggle,f
  5775  0679  0805               	movf	5,w	;volatile
  5776  067A  0670               	xorwf	??_led_ind_toggle,w
  5777  067B  39FB               	andlw	-5
  5778  067C  0670               	xorwf	??_led_ind_toggle,w
  5779  067D  0085               	movwf	5	;volatile
  5780  067E  0008               	return
  5781  067F                     __end_of_led_ind_toggle:
  5782                           
  5783                           	psect	text47
  5784  069C                     __ptext47:	
  5785 ;; *************** function _button3_handler *****************
  5786 ;; Defined at:
  5787 ;;		line 83 in file "main.c"
  5788 ;; Parameters:    Size  Location     Type
  5789 ;;		None
  5790 ;; Auto vars:     Size  Location     Type
  5791 ;;		None
  5792 ;; Return value:  Size  Location     Type
  5793 ;;                  1    wreg      void 
  5794 ;; Registers used:
  5795 ;;		wreg, status,2, status,0, pclath, cstack
  5796 ;; Tracked objects:
  5797 ;;		On entry : 300/0
  5798 ;;		On exit  : 300/0
  5799 ;;		Unchanged: 0/0
  5800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5801 ;;      Params:         0       0       0       0
  5802 ;;      Locals:         0       0       0       0
  5803 ;;      Temps:          1       0       0       0
  5804 ;;      Totals:         1       0       0       0
  5805 ;;Total ram usage:        1 bytes
  5806 ;; Hardware stack levels used: 1
  5807 ;; Hardware stack levels required when called: 1
  5808 ;; This function calls:
  5809 ;;		_xEventGroupSetBits
  5810 ;; This function is called by:
  5811 ;;		_button_init
  5812 ;;		_ISR
  5813 ;; This function uses a non-reentrant model
  5814 ;;
  5815                           
  5816  069C                     _button3_handler:	
  5817                           ;psect for function _button3_handler
  5818                           
  5819                           
  5820                           ;main.c: 84:     PORTAbits.RA1 ^= 1;
  5821                           
  5822                           ;incstack = 0
  5823                           ; Regs used in _button3_handler: [wreg+status,2+status,0+pclath+cstack]
  5824  069C  0C05               	rrf	5,w	;volatile
  5825  069D  3901               	andlw	1
  5826  069E  00F2               	movwf	??_button3_handler
  5827  069F  3001               	movlw	1
  5828  06A0  06F2               	xorwf	??_button3_handler,f
  5829  06A1  0DF2               	rlf	??_button3_handler,f
  5830  06A2  0805               	movf	5,w	;volatile
  5831  06A3  0672               	xorwf	??_button3_handler,w
  5832  06A4  39FD               	andlw	-3
  5833  06A5  0672               	xorwf	??_button3_handler,w
  5834  06A6  0085               	movwf	5	;volatile
  5835                           
  5836                           ;main.c: 85:     xEventGroupSetBits((1 << 1));
  5837  06A7  3002               	movlw	2
  5838  06A8  26F0               	fcall	_xEventGroupSetBits
  5839  06A9  0008               	return
  5840  06AA                     __end_of_button3_handler:
  5841                           
  5842                           	psect	text48
  5843  067F                     __ptext48:	
  5844 ;; *************** function _button2_handler *****************
  5845 ;; Defined at:
  5846 ;;		line 76 in file "main.c"
  5847 ;; Parameters:    Size  Location     Type
  5848 ;;		None
  5849 ;; Auto vars:     Size  Location     Type
  5850 ;;		None
  5851 ;; Return value:  Size  Location     Type
  5852 ;;                  1    wreg      void 
  5853 ;; Registers used:
  5854 ;;		wreg, status,2, status,0, pclath, cstack
  5855 ;; Tracked objects:
  5856 ;;		On entry : 300/0
  5857 ;;		On exit  : 300/0
  5858 ;;		Unchanged: 0/0
  5859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5860 ;;      Params:         0       0       0       0
  5861 ;;      Locals:         0       0       0       0
  5862 ;;      Temps:          1       0       0       0
  5863 ;;      Totals:         1       0       0       0
  5864 ;;Total ram usage:        1 bytes
  5865 ;; Hardware stack levels used: 1
  5866 ;; Hardware stack levels required when called: 1
  5867 ;; This function calls:
  5868 ;;		_xEventGroupSetBits
  5869 ;; This function is called by:
  5870 ;;		_button_init
  5871 ;;		_ISR
  5872 ;; This function uses a non-reentrant model
  5873 ;;
  5874                           
  5875  067F                     _button2_handler:	
  5876                           ;psect for function _button2_handler
  5877                           
  5878                           
  5879                           ;main.c: 77:     if (!PORTBbits.RB4) {
  5880                           
  5881                           ;incstack = 0
  5882                           ; Regs used in _button2_handler: [wreg+status,2+status,0+pclath+cstack]
  5883  067F  1A06               	btfsc	6,4	;volatile
  5884  0680  0008               	return
  5885                           
  5886                           ;main.c: 78:         PORTAbits.RA0 ^= 1;
  5887  0681  0805               	movf	5,w	;volatile
  5888  0682  3901               	andlw	1
  5889  0683  00F2               	movwf	??_button2_handler
  5890  0684  3001               	movlw	1
  5891  0685  06F2               	xorwf	??_button2_handler,f
  5892  0686  0805               	movf	5,w	;volatile
  5893  0687  0672               	xorwf	??_button2_handler,w
  5894  0688  39FE               	andlw	-2
  5895  0689  0672               	xorwf	??_button2_handler,w
  5896  068A  0085               	movwf	5	;volatile
  5897                           
  5898                           ;main.c: 79:         xEventGroupSetBits((1 << 1));
  5899  068B  3002               	movlw	2
  5900  068C  26F0               	fcall	_xEventGroupSetBits
  5901  068D  0008               	return
  5902  068E                     __end_of_button2_handler:
  5903                           
  5904                           	psect	text49
  5905  061E                     __ptext49:	
  5906 ;; *************** function _button1_handler *****************
  5907 ;; Defined at:
  5908 ;;		line 69 in file "main.c"
  5909 ;; Parameters:    Size  Location     Type
  5910 ;;		None
  5911 ;; Auto vars:     Size  Location     Type
  5912 ;;		None
  5913 ;; Return value:  Size  Location     Type
  5914 ;;                  1    wreg      void 
  5915 ;; Registers used:
  5916 ;;		wreg, status,2, status,0, pclath, cstack
  5917 ;; Tracked objects:
  5918 ;;		On entry : 300/0
  5919 ;;		On exit  : 300/0
  5920 ;;		Unchanged: 0/0
  5921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5922 ;;      Params:         0       0       0       0
  5923 ;;      Locals:         0       0       0       0
  5924 ;;      Temps:          1       0       0       0
  5925 ;;      Totals:         1       0       0       0
  5926 ;;Total ram usage:        1 bytes
  5927 ;; Hardware stack levels used: 1
  5928 ;; Hardware stack levels required when called: 1
  5929 ;; This function calls:
  5930 ;;		_xEventGroupSetBits
  5931 ;; This function is called by:
  5932 ;;		_button_init
  5933 ;;		_ISR
  5934 ;; This function uses a non-reentrant model
  5935 ;;
  5936                           
  5937  061E                     _button1_handler:	
  5938                           ;psect for function _button1_handler
  5939                           
  5940                           
  5941                           ;main.c: 70:     if (!PORTBbits.RB5) {
  5942                           
  5943                           ;incstack = 0
  5944                           ; Regs used in _button1_handler: [wreg+status,2+status,0+pclath+cstack]
  5945  061E  1A86               	btfsc	6,5	;volatile
  5946  061F  0008               	return
  5947                           
  5948                           ;main.c: 71:         PORTAbits.RA7 ^= 1;
  5949  0620  0D05               	rlf	5,w	;volatile
  5950  0621  0D05               	rlf	5,w	;volatile
  5951  0622  3901               	andlw	1
  5952  0623  00F2               	movwf	??_button1_handler
  5953  0624  3001               	movlw	1
  5954  0625  06F2               	xorwf	??_button1_handler,f
  5955  0626  0CF2               	rrf	??_button1_handler,f
  5956  0627  0CF2               	rrf	??_button1_handler,f
  5957  0628  0805               	movf	5,w	;volatile
  5958  0629  0672               	xorwf	??_button1_handler,w
  5959  062A  397F               	andlw	-129
  5960  062B  0672               	xorwf	??_button1_handler,w
  5961  062C  0085               	movwf	5	;volatile
  5962                           
  5963                           ;main.c: 72:         xEventGroupSetBits((1 << 1));
  5964  062D  3002               	movlw	2
  5965  062E  26F0               	fcall	_xEventGroupSetBits
  5966  062F  0008               	return
  5967  0630                     __end_of_button1_handler:
  5968                           
  5969                           	psect	text50
  5970  06F0                     __ptext50:	
  5971 ;; *************** function _xEventGroupSetBits *****************
  5972 ;; Defined at:
  5973 ;;		line 19 in file "event_groups.c"
  5974 ;; Parameters:    Size  Location     Type
  5975 ;;  uxBitsToSet     1    wreg     const unsigned char 
  5976 ;; Auto vars:     Size  Location     Type
  5977 ;;  uxBitsToSet     1    1[COMMON] const unsigned char 
  5978 ;; Return value:  Size  Location     Type
  5979 ;;                  1    wreg      unsigned char 
  5980 ;; Registers used:
  5981 ;;		wreg, status,2, status,0
  5982 ;; Tracked objects:
  5983 ;;		On entry : 300/0
  5984 ;;		On exit  : 300/0
  5985 ;;		Unchanged: 0/0
  5986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5987 ;;      Params:         0       0       0       0
  5988 ;;      Locals:         1       0       0       0
  5989 ;;      Temps:          1       0       0       0
  5990 ;;      Totals:         2       0       0       0
  5991 ;;Total ram usage:        2 bytes
  5992 ;; Hardware stack levels used: 1
  5993 ;; This function calls:
  5994 ;;		Nothing
  5995 ;; This function is called by:
  5996 ;;		_button1_handler
  5997 ;;		_button2_handler
  5998 ;;		_button3_handler
  5999 ;;		_znp_msg_handler
  6000 ;; This function uses a non-reentrant model
  6001 ;;
  6002                           
  6003  06F0                     _xEventGroupSetBits:	
  6004                           ;psect for function _xEventGroupSetBits
  6005                           
  6006                           
  6007                           ;incstack = 0
  6008 ;; hardware stack exceeded
  6009                           ; Regs used in _xEventGroupSetBits: [wreg+status,2+status,0]
  6010                           ;xEventGroupSetBits@uxBitsToSet stored from wreg
  6011  06F0  00F1               	movwf	xEventGroupSetBits@uxBitsToSet
  6012  06F1                     i1l361:	
  6013                           ;event_groups.c: 20:     do {
  6014                           
  6015                           
  6016                           ;event_groups.c: 21:         uxBits |= uxBitsToSet;
  6017  06F1  0871               	movf	xEventGroupSetBits@uxBitsToSet,w
  6018  06F2  00F0               	movwf	??_xEventGroupSetBits
  6019  06F3  0870               	movf	??_xEventGroupSetBits,w
  6020  06F4  04DB               	iorwf	_uxBits,f
  6021                           
  6022                           ;event_groups.c: 22:     } while ((uxBits & uxBitsToSet) != uxBitsToSet);
  6023  06F5  085B               	movf	_uxBits,w
  6024  06F6  0571               	andwf	xEventGroupSetBits@uxBitsToSet,w
  6025  06F7  0671               	xorwf	xEventGroupSetBits@uxBitsToSet,w
  6026  06F8  1903               	btfsc	3,2
  6027  06F9  0008               	return
  6028  06FA  2EF1               	goto	i1l361
  6029  06FB                     __end_of_xEventGroupSetBits:
  6030  000E                     
  6031                           	psect	functab
  6032  001E                     __pfunctab:
  6033  001E                     fptable:
  6034  001E  281E               	goto	fptable	;no entries
  6035  001F                     __i1fptable:
  6036  001F                     i1fptable:
  6037  001F  00FF               	movwf	(btemp+1)& (0+127)
  6038  0020  3000               	movlw	high i1fptable
  6039  0021  008A               	movwf	10
  6040  0022  087F               	movf	(btemp+1)& (0+127),w
  6041  0023  0782               	addwf	2,f
  6042  0024                     i1fpbase:
  6043  0024  2824               	goto	i1fpbase	; Call via a null pointer and you will get stuck here.
  6044  0025                     fp__button1_handler:
  6045  0025  2E1E               	ljmp	_button1_handler
  6046  0026                     fp__button2_handler:
  6047  0026  2E7F               	ljmp	_button2_handler
  6048  0027                     fp__button3_handler:
  6049  0027  2E9C               	ljmp	_button3_handler
  6050  0028                     fp___blink_handler:
  6051  0028  2F4B               	ljmp	__blink_handler
  6052  0029                     fp__sys_tick_handler:
  6053  0029  282C               	ljmp	_sys_tick_handler
  6054  002A                     fp__znp_msg_handler:
  6055  002A  2B04               	ljmp	_znp_msg_handler
  6056  002B                     fp__znp_usart_event_handler:
  6057  002B  2D9D               	ljmp	_znp_usart_event_handler
  6058  002C                     __end_of__i1fptable:
  6059  007E                     btemp	set	126	;btemp
  6060  007E                     wtemp0	set	126
  6061                           
  6062                           	psect	config
  6063                           
  6064                           ;Config register CONFIG @ 0x2007
  6065                           ;	Oscillator Selection bits
  6066                           ;	FOSC = INTOSCIO, INTOSC oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function 
      +                          on RA7/OSC1/CLKIN
  6067                           ;	Watchdog Timer Enable bit
  6068                           ;	WDTE = OFF, WDT disabled
  6069                           ;	Power-up Timer Enable bit
  6070                           ;	PWRTE = OFF, PWRT disabled
  6071                           ;	RA5/MCLR/VPP Pin Function Select bit
  6072                           ;	MCLRE = ON, RA5/MCLR/VPP pin function is MCLR
  6073                           ;	Brown-out Detect Enable bit
  6074                           ;	BOREN = OFF, BOD disabled
  6075                           ;	Low-Voltage Programming Enable bit
  6076                           ;	LVP = OFF, RB4/PGM pin has digital I/O function, HV on MCLR must be used for programmi
      +                          ng
  6077                           ;	Data EE Memory Code Protection bit
  6078                           ;	CPD = OFF, Data memory code protection off
  6079                           ;	Flash Program Memory Code Protection bit
  6080                           ;	CP = OFF, Code protection off
  6081  2007                     	org	8199
  6082  2007  3F38               	dw	16184

Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         74
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     46      63
    BANK1            80      0      58
    BANK2            48      0       0

Pointer List with Targets:

    Absolute function$1	PTR void  size(1) Largest target is 1
		 -> ISR@c(BANK0[1]), NULL(NULL[0]), 

    handler$1	PTR void  size(1) Largest target is 1
		 -> ISR@c(BANK0[1]), NULL(NULL[0]), 

    callback$1	PTR unsigned char  size(1) Largest target is 33
		 -> znp_recv_msg(BANK1[33]), 

    _zb_znp_cb$1	PTR unsigned char  size(1) Largest target is 33
		 -> znp_recv_msg(BANK1[33]), 

    _usart_rx_isr$1	PTR void  size(1) Largest target is 1
		 -> ISR@c(BANK0[1]), NULL(NULL[0]), 

    sys_tick_register_callback_handler@cb	PTR FTN()void  size(1) Largest target is 1
		 -> _blink_handler(), 

    S891$cb	PTR FTN()void  size(1) Largest target is 1
		 -> _blink_handler(), 

    _sys_tick._handle.cb	PTR FTN()void  size(1) Largest target is 1
		 -> _blink_handler(), 

    znp_af_data_request@data	PTR unsigned char  size(1) Largest target is 2
		 -> NULL(NULL[0]), relay_data(BANK0[2]), 

    znp_init@callback	PTR FTN(unsigned int ,PTR unsigned char ,unsigned char ,)void  size(1) Largest target is 1
		 -> znp_msg_handler(), 

    znp_usart_event_handler@event_data	PTR void  size(1) Largest target is 1
		 -> ISR@c(BANK0[1]), NULL(NULL[0]), 

    _zb_znp_cb	PTR FTN(unsigned int ,PTR unsigned char ,unsigned char ,)void  size(1) Largest target is 1
		 -> Absolute function(), znp_msg_handler(), 

    ioc_rb5_add_isr_handler@handler	PTR FTN()void  size(1) Largest target is 1
		 -> button1_handler(), 

    _ioc_rb5_isr	PTR FTN()void  size(1) Largest target is 1
		 -> Absolute function(), button1_handler(), 

    ioc_rb4_add_isr_handler@handler	PTR FTN()void  size(1) Largest target is 1
		 -> button2_handler(), 

    _ioc_rb4_isr	PTR FTN()void  size(1) Largest target is 1
		 -> Absolute function(), button2_handler(), 

    ex_int_add_isr_handler@handler	PTR FTN()void  size(1) Largest target is 1
		 -> button3_handler(), 

    _ex_int_isr	PTR FTN()void  size(1) Largest target is 1
		 -> Absolute function(), button3_handler(), 

    _tmr2_isr	PTR FTN()void  size(1) Largest target is 1
		 -> Absolute function(), 

    timer1_add_isr_handler@handler	PTR FTN()void  size(1) Largest target is 1
		 -> sys_tick_handler(), 

    _tmr1_isr	PTR FTN()void  size(1) Largest target is 1
		 -> sys_tick_handler(), Absolute function(), 

    usart_add_isr_handler@handler	PTR FTN(enum E707,PTR void ,)void  size(1) Largest target is 1
		 -> znp_usart_event_handler(), 

    _usart_rx_isr	PTR FTN(enum E707,PTR void ,)void  size(1) Largest target is 1
		 -> znp_usart_event_handler(), Absolute function(), 

    znp_send_msg@data	PTR unsigned char  size(1) Largest target is 2
		 -> NULL(NULL[0]), relay_data(BANK0[2]), 

    znp_msg_handler@data	PTR unsigned char  size(1) Largest target is 33
		 -> znp_recv_msg(BANK1[33]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_sys_tick_handler
    _znp_usart_event_handler->_znp_frame_parser
    _znp_frame_parser->_znp_msg_handler
    _znp_msg_handler->_xEventGroupSetBits
    _sys_tick_handler->i1___bmul
    __blink_handler->_led_ind_toggle
    _button3_handler->_xEventGroupSetBits
    _button2_handler->_xEventGroupSetBits
    _button1_handler->_xEventGroupSetBits

Critical Paths under _main in BANK0

    _main->_znp_send_msg
    _znp_send_msg->_znp_af_data_request
    _znp_af_data_request->_wait_for_status
    _znp_router_start->_znp_af_register
    _znp_router_start->_znp_set_startopt
    _znp_zdo_startup_from_app->_wait_for_msg
    _znp_set_startopt->_wait_for_status
    _znp_hard_reset->_wait_for_msg
    _znp_set_logical_type->_wait_for_status
    _znp_set_channels->_wait_for_status
    _znp_af_register->_wait_for_status
    _wait_for_status->_wait_for_msg
    _znp_init->_usart_add_isr_handler
    _xEventGroupWaitBits->_sys_tick_get_tick
    _sys_tick_init->_timer1_add_isr_handler
    _relay_init->_xEventGroupClearBits
    _led_ind_init->_sys_tick_register_callback_handler
    _sys_tick_register_callback_handler->___bmul
    _led_ind_blink_stop->_sys_tick_stop
    _sys_tick_stop->___bmul
    _led_ind_blink_start->_sys_tick_start_periodic
    _sys_tick_start_periodic->___bmul
    _button_init->_ex_int_add_isr_handler
    _button_init->_ioc_rb4_add_isr_handler
    _button_init->_ioc_rb5_add_isr_handler

Critical Paths under _ISR in BANK0

    _ISR->_znp_usart_event_handler

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0   13832
                                             38 BANK0      8     8      0
                        _button_init
                        _eeprom_read
                       _eeprom_write
                _led_ind_blink_start
                 _led_ind_blink_stop
                       _led_ind_init
                        _led_ind_off
                         _led_ind_on
                         _relay_init
                  _sys_tick_get_tick
                      _sys_tick_init
               _xEventGroupClearBits
                  _xEventGroupCreate
                 _xEventGroupGetBits
                _xEventGroupWaitBits
                           _znp_init
                   _znp_router_start
                       _znp_send_msg
 ---------------------------------------------------------------------------------
 (1) _znp_send_msg                                        10     6      4    3503
                                             28 BANK0     10     6      4
                _znp_af_data_request
 ---------------------------------------------------------------------------------
 (2) _znp_af_data_request                                 12     4      8    2683
                                             16 BANK0     12     4      8
                         _usart_send
                    _wait_for_status
 ---------------------------------------------------------------------------------
 (1) _znp_router_start                                     3     3      0    7706
                                             17 BANK0      3     3      0
                    _znp_af_register
                     _znp_hard_reset
                   _znp_set_channels
               _znp_set_logical_type
                   _znp_set_startopt
           _znp_zdo_startup_from_app
 ---------------------------------------------------------------------------------
 (2) _znp_zdo_startup_from_app                             0     0      0     272
                         _usart_send
                       _wait_for_msg
 ---------------------------------------------------------------------------------
 (2) _znp_set_startopt                                     1     1      0    2000
                                             16 BANK0      1     1      0
                         _usart_send
                    _wait_for_status
                     _znp_hard_reset
 ---------------------------------------------------------------------------------
 (3) _znp_hard_reset                                       2     2      0     250
                                             12 BANK0      2     2      0
                       _wait_for_msg
 ---------------------------------------------------------------------------------
 (2) _znp_set_logical_type                                 0     0      0    1706
                         _usart_send
                    _wait_for_status
 ---------------------------------------------------------------------------------
 (2) _znp_set_channels                                     0     0      0    1706
                         _usart_send
                    _wait_for_status
 ---------------------------------------------------------------------------------
 (2) _znp_af_register                                      1     1      0    1750
                                             16 BANK0      1     1      0
                         _usart_send
                    _wait_for_status
 ---------------------------------------------------------------------------------
 (3) _wait_for_status                                      4     0      4    1684
                                             12 BANK0      4     0      4
                       _wait_for_msg
 ---------------------------------------------------------------------------------
 (4) _wait_for_msg                                         2     0      2     250
                                             10 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _usart_send                                           1     1      0      22
                                             10 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _znp_init                                             2     2      0      44
                                             12 BANK0      2     2      0
              _usart_add_isr_handler
                         _usart_init
 ---------------------------------------------------------------------------------
 (2) _usart_init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _usart_add_isr_handler                                2     2      0      22
                                             10 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _xEventGroupWaitBits                                 13     9      4     165
                                             14 BANK0     13     9      4
                  _sys_tick_get_tick
 ---------------------------------------------------------------------------------
 (2) _sys_tick_get_tick                                    4     0      4       0
                                             10 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (1) _xEventGroupGetBits                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _xEventGroupCreate                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sys_tick_init                                        0     0      0      22
             _timer1_add_isr_handler
 ---------------------------------------------------------------------------------
 (2) _timer1_add_isr_handler                               2     2      0      22
                                             10 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _relay_init                                           1     1      0      44
                                             12 BANK0      1     1      0
               _xEventGroupClearBits
 ---------------------------------------------------------------------------------
 (1) _xEventGroupClearBits                                 2     2      0      44
                                             10 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _led_ind_init                                         1     1      0     654
                                             18 BANK0      1     1      0
                         _led_ind_on
 _sys_tick_register_callback_handler
 ---------------------------------------------------------------------------------
 (2) _sys_tick_register_callback_handler                   4     4      0     654
                                             14 BANK0      4     4      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (1) _led_ind_on                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _led_ind_blink_stop                                   0     0      0     589
                        _led_ind_off
                      _sys_tick_stop
 ---------------------------------------------------------------------------------
 (2) _sys_tick_stop                                        4     4      0     589
                                             14 BANK0      4     4      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (1) _led_ind_off                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _led_ind_blink_start                                  0     0      0     753
            _sys_tick_start_periodic
 ---------------------------------------------------------------------------------
 (2) _sys_tick_start_periodic                              8     4      4     753
                                             14 BANK0      8     4      4
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               4     3      1     499
                                             10 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _eeprom_write                                         3     2      1     196
                                             10 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (1) _eeprom_read                                          2     2      0      22
                                             10 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _button_init                                          0     0      0      66
             _ex_int_add_isr_handler
            _ioc_rb4_add_isr_handler
            _ioc_rb5_add_isr_handler
 ---------------------------------------------------------------------------------
 (2) _ioc_rb5_add_isr_handler                              2     2      0      22
                                             10 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _ioc_rb4_add_isr_handler                              2     2      0      22
                                             10 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _ex_int_add_isr_handler                               2     2      0      22
                                             10 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                  8     8      0    1610
                                              2 BANK0      8     8      0
                   Absolute function *
                    _button1_handler *
                    _button2_handler *
                    _button3_handler *
                   _sys_tick_handler *
            _znp_usart_event_handler *
 ---------------------------------------------------------------------------------
 (6) _znp_usart_event_handler                              4     2      2     878
                                             11 COMMON     2     0      2
                                              0 BANK0      2     2      0
                   _znp_frame_parser
 ---------------------------------------------------------------------------------
 (7) _znp_frame_parser                                     3     3      0     622
                                              8 COMMON     3     3      0
                   Absolute function *
                    _znp_msg_handler *
 ---------------------------------------------------------------------------------
 (8) _znp_msg_handler                                      6     2      4     402
                                              2 COMMON     6     2      4
                 _xEventGroupSetBits
 ---------------------------------------------------------------------------------
 (8) Absolute function(Fake)                               2     0      2       0
 ---------------------------------------------------------------------------------
 (6) _sys_tick_handler                                    11    11      0     420
                                              4 COMMON    10    10      0
                                              0 BANK0      1     1      0
                     __blink_handler *
                           i1___bmul
 ---------------------------------------------------------------------------------
 (7) i1___bmul                                             4     3      1     220
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (7) __blink_handler                                       0     0      0       0
                     _led_ind_toggle
 ---------------------------------------------------------------------------------
 (8) _led_ind_toggle                                       1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _button3_handler                                      1     1      0      66
                                              2 COMMON     1     1      0
                 _xEventGroupSetBits
 ---------------------------------------------------------------------------------
 (6) _button2_handler                                      1     1      0      66
                                              2 COMMON     1     1      0
                 _xEventGroupSetBits
 ---------------------------------------------------------------------------------
 (6) _button1_handler                                      1     1      0      66
                                              2 COMMON     1     1      0
                 _xEventGroupSetBits
 ---------------------------------------------------------------------------------
 (9) _xEventGroupSetBits                                   2     2      0      66
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _button_init
     _ex_int_add_isr_handler
     _ioc_rb4_add_isr_handler
     _ioc_rb5_add_isr_handler
   _eeprom_read
   _eeprom_write
   _led_ind_blink_start
     _sys_tick_start_periodic
       ___bmul
   _led_ind_blink_stop
     _led_ind_off
     _sys_tick_stop
       ___bmul
   _led_ind_init
     _led_ind_on
     _sys_tick_register_callback_handler
       ___bmul
   _led_ind_off
   _led_ind_on
   _relay_init
     _xEventGroupClearBits
   _sys_tick_get_tick
   _sys_tick_init
     _timer1_add_isr_handler
   _xEventGroupClearBits
   _xEventGroupCreate
   _xEventGroupGetBits
   _xEventGroupWaitBits
     _sys_tick_get_tick
   _znp_init
     _usart_add_isr_handler
     _usart_init
   _znp_router_start
     _znp_af_register
       _usart_send
       _wait_for_status
         _wait_for_msg
     _znp_hard_reset
       _wait_for_msg
     _znp_set_channels
       _usart_send
       _wait_for_status
     _znp_set_logical_type
       _usart_send
       _wait_for_status
     _znp_set_startopt
       _usart_send
       _wait_for_status
       _znp_hard_reset
     _znp_zdo_startup_from_app
       _usart_send
       _wait_for_msg
   _znp_send_msg
     _znp_af_data_request
       _usart_send
       _wait_for_status

 _ISR (ROOT)
   Absolute function(Fake) *
   _button1_handler *
     _xEventGroupSetBits
   _button2_handler *
     _xEventGroupSetBits
   _button3_handler *
     _xEventGroupSetBits
   _sys_tick_handler *
     __blink_handler *
       _led_ind_toggle
     i1___bmul *
   _znp_usart_event_handler *
     _znp_frame_parser
       Absolute function(Fake) *
       _znp_msg_handler *
         _xEventGroupSetBits

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               30      0       0       9        0.0%
BITBANK2            30      0       0       8        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      3A       7       72.5%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     2E      3F       3       78.8%
BITBANK0            50      0       0       5        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      87      10        0.0%
ABS                  0      0      87       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              80      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.35 build 20211206165544 
Symbol Table                                                                                   Sat May 20 09:26:05 2023

                              ??_znp_frame_parser 0078                                                 pc 0002  
                                  ___bmul@product 002C                                      ?_led_ind_off 0070  
                           wait_for_status@offset 002E                                                fsr 0004  
                               ??_wait_for_status 0030                                               l240 072B  
                                             l416 04D1                                               l513 05E8  
                                             l409 0369                                               l274 068E  
                                             l533 0542                                               l366 0706  
                                             _ISR 0230                                     ?_led_ind_init 0070  
                                             u675 06D5                                               fsr0 0004  
                                             indf 0000                          ?_znp_usart_event_handler 007B  
                          __end_of_led_ind_toggle 067F                                              ?_ISR 0070  
                                            ISR@c 0027                            znp_af_data_request@len 0036  
                                            l2001 04F3                                              l2241 0538  
                                            l2233 0522                                              l2313 00EC  
                                            l2235 0526                                              l2171 047E  
                                            l2331 0104                                              l2255 0429  
                                            l2239 0528                                              l2335 010B  
                                            l2249 0422                                              l2523 0530  
                                            l2355 0147                                              l2347 0135  
                                            l2357 0173                                              l1861 0638  
                                            l1935 02DC                                              l1857 0632  
                                            l1937 02F7                                              l1795 06CF  
                                            l1991 03BD                                              l1979 0415  
                                            u1021 05E7                                              u1041 0439  
                                            u1042 043A                                              u1043 043F  
                                            u1044 0440                                              u1045 0445  
                                            u1141 0157                                              u1046 0446  
                                            u1142 0158                                              u1055 0454  
                                            u1143 015D                                              u1144 015E  
                                            u1153 0171                                              u1145 0163  
                                            u1146 0164                                              u1317 00F9  
                                            u1327 018C                                              u1337 05D7  
                                            i1l92 0366                          __end_of_znp_set_channels 04CF  
                                            _TMR0 0001                                              _TMR1 000E  
                                  ??_eeprom_write 002B                                              _main 00E0  
                         _ioc_rb4_add_isr_handler 06E5                                              btemp 007E  
                  __end_of_timer1_add_isr_handler 0705                                              start 0010  
                                _znp_router_start 051E                          _znp_zdo_startup_from_app 05FA  
                                 _button1_handler 061E                                 ___bmul@multiplier 002D  
                        znp_set_startopt@startopt 0030                                   _button2_handler 067F  
                                 _button3_handler 069C                                             ??_ISR 0022  
                    usart_add_isr_handler@handler 002B                           znp_af_data_request@data 0035  
                                  ??_led_ind_init 0032                                             ?_main 0070  
                                           _EEADR 009B                                             i1l307 05B6  
                                           i1l180 0283                                             i1l167 0236  
                                           i1l361 06F1                                             i1l185 0291  
                                           i1l299 022F                               sys_tick_stop@handle 0030  
                                           _RCREG 001A                                             _SPBRG 0099  
                                           _PORTB 0006                                             _TRISB 0086  
                                           _TXREG 0019                          __end_of_znp_set_startopt 0581  
                                    ?_button_init 0070                                   ?_led_ind_toggle 0070  
                      __end_of_led_ind_blink_stop 0742                                             fpbase 0000  
                                __end_ofi1___bmul 0652                                             pclath 000A  
                                           status 0003                                             wtemp0 007E  
                           _usart_add_isr_handler 0652                                  ?_znp_msg_handler 0072  
                                 __initialization 0011                           _ioc_rb5_add_isr_handler 06C3  
                                    __end_of_main 0193                                            ??_main 0046  
                             znp_msg_handler@data 0074                                            _EEDATA 009A  
                                          _EECON1 009C                                            _EECON2 009D  
                       ??_ioc_rb4_add_isr_handler 002A                                            i1l2013 0195  
                                          i1l2031 01BC                                            i1l2113 0643  
                                          i1l2041 01D6                                            i1l2025 01AD  
                                          i1l2051 01EC                                            i1l2019 019E  
                                          i1l2117 0649                                            i1l2037 01CA  
                                          i1l2061 0213                                            i1l2039 01D0  
                                          i1l2057 020F                                            i1l2401 026B  
                                          i1l2403 026C                                            i1l2271 059E  
                                          i1l1801 0305                                            i1l2273 05A4  
                                          i1l2531 0361                                            i1l1811 0326  
                                          i1l2419 028A                                            i1l1821 034B  
                                          i1l2525 05AE                                            i1l2277 05A6  
                                          i1l1815 0336                                            i1l1807 0314  
                                          i1l2527 021B                                            i1l2391 025F  
                                          i1l2297 00DB                                            i1l2529 035C  
                                          i1l2393 0262                                            i1l2385 0256  
                                          i1l2377 0248                                            i1l2299 0041  
                                          i1l1819 0348                                            i1l1827 0354  
                                          u107_25 00A5                           __end_of_button1_handler 0630  
                                      __i1fptable 001F                           __end_of_button2_handler 068E  
                         znp_af_register@endpoint 0030                           __end_of_button3_handler 06AA  
                                    __ioc_rb4_isr 0056                                      __ioc_rb5_isr 0055  
                                          ___bmul 0630                       sys_tick_start_periodic@tick 002E  
                         znp_frame_parser@znp_fcs 0051                       __end_of_led_ind_blink_start 06E5  
                                          _uxBits 005B                              __end_of_eeprom_write 0562  
                                ??_znp_hard_reset 002C                                            fptable 001E  
                                          fptotal 0000                                            saved_w 007E  
                                    _znp_recv_msg 00B9                                      _znp_send_msg 0458  
                                znp_init@callback 002D                xEventGroupWaitBits@uxBitsToWaitFor 003A  
                    __end_of_znp_set_logical_type 059D                            ?_usart_add_isr_handler 0070  
                                __end_of_znp_init 06B7                           __end_of__initialization 001C  
                                  sys_tick_stop@i 0031                                   eeprom_read@addr 002B  
                            __end_of_led_ind_init 0719                         ??_ioc_rb5_add_isr_handler 002A  
                             ___bmul@multiplicand 002A                                   _wait_for_status 068E  
                                  __pcstackCOMMON 0070                                 fp___blink_handler 0028  
                                    __pidataBANK0 074D                   __end_of_ioc_rb4_add_isr_handler 06F0  
                                       ?i1___bmul 0070                                       ISR@newPORTB 0028  
                                  _OPTION_REGbits 0081                          __end_of_znp_router_start 0541  
                  ioc_rb4_add_isr_handler@handler 002B                                 eeprom_write@value 002A  
                                     ISR@tmpPORTB 005E                                  i1___bmul@product 0072  
                      ??_znp_zdo_startup_from_app 002C                                        __pbssBANK0 004E  
                                      __pbssBANK1 00A0                                  ?_button1_handler 0070  
                               ?_znp_set_channels 0070                                  ?_button2_handler 0070  
                               ??_znp_af_register 0030                                ??_znp_set_channels 0030  
                                ?_button3_handler 0070                                 _xEventGroupCreate 0746  
                             _xEventGroupWaitBits 0417                                        __pmaintext 00E0  
                              ?_xEventGroupCreate 0070                                           ?___bmul 002A  
                 znp_usart_event_handler@rx_event 007B                                        __pintentry 0004  
                                ??_led_ind_toggle 0070                               ??_xEventGroupCreate 002A  
                                      ??i1___bmul 0071                        __end_of_xEventGroupGetBits 073E  
                                      __zb_znp_cb 0053                   __end_of_ioc_rb5_add_isr_handler 06CF  
                xEventGroupWaitBits@ticks_to_wait 002E                              ?_xEventGroupWaitBits 002E  
                               ?_znp_set_startopt 0070                        __end_of_xEventGroupSetBits 06FB  
                                      _led_ind_on 0749                                ??_znp_set_startopt 0030  
                       znp_frame_parser@rcv_index 0050                           __end_of_wait_for_status 069C  
                                         i1fpbase 0024                         znp_send_msg@wait_for_rsps 003F  
                       __end_of_xEventGroupCreate 0749                                _led_ind_blink_stop 073E  
                                _sys_tick_handler 002C                                         _CMCONbits 001F  
                        ??_ex_int_add_isr_handler 002A                               ?_led_ind_blink_stop 0070  
                            _znp_set_logical_type 0581                                           __ptext1 0458  
                                         __ptext2 029E                                           __ptext3 051E  
                                         __ptext4 05FA                                           __ptext5 0562  
                                         __ptext6 05D0                                           __ptext7 0581  
                                         __ptext8 0498                                           __ptext9 04F8  
                             __size_of__i1fptable 000D                                         ?_znp_init 0070  
                    __end_of_xEventGroupClearBits 070F                                         _T1CONbits 0010  
                                   _sys_tick_init 05B7                 znp_usart_event_handler@event_data 007C  
                           ??_xEventGroupWaitBits 0032                                     _sys_tick_stop 04CF  
                             i1___bmul@multiplier 0073                                     ?_wait_for_msg 002A  
                         _sys_tick_start_periodic 0367                                           clrloop0 0723  
                            end_of_initialization 001C                                        _relay_data 005C  
                                      _relay_init 0661                              ??_led_ind_blink_stop 0032  
                                    _eeprom_write 0541                       znp_af_data_request@fcs_calc 003A  
                                  __blink_handler 074B                                         _RCSTAbits 0018  
                     znp_af_data_request@endpoint 0032        __end_of_sys_tick_register_callback_handler 0417  
            ??_sys_tick_register_callback_handler 002E               ?_sys_tick_register_callback_handler 0070  
              _sys_tick_register_callback_handler 03C2                                fp__znp_msg_handler 002A  
                     znp_af_data_request@dst_addr 0030                             ?_znp_set_logical_type 0070  
                                       _PORTAbits 0005                                         _PORTBbits 0006  
                                      ??_znp_init 002C                                    ?_sys_tick_init 0070  
                                _znp_frame_parser 0193                                    ?_sys_tick_stop 0070  
                                    _led_ind_init 070F                                         _TRISAbits 0085  
                                       _TRISBbits 0086                                    ??_wait_for_msg 002C  
                __end_of_znp_zdo_startup_from_app 060C                           ??_usart_add_isr_handler 002A  
                                     ?_led_ind_on 0070                          ??_timer1_add_isr_handler 002A  
                                ?_wait_for_status 002C                           _znp_usart_event_handler 059D  
                      fp__znp_usart_event_handler 002B                                     ??_eeprom_read 002A  
                                       _TXSTAbits 0098                            __end_of__blink_handler 074D  
                                      _usart_init 06B7                                        _usart_send 072A  
                                   ??_led_ind_off 002A                                    __end_of___bmul 0641  
                   wait_for_status@status_to_wait 002F                               _znp_af_data_request 029E  
                            znp_send_msg@endpoint 003E                               start_initialization 0011  
                       ??_sys_tick_start_periodic 0032                          ?_ioc_rb4_add_isr_handler 0070  
                               ?_znp_router_start 0070                                       __end_of_ISR 029E  
                                 _znp_af_register 04F8                              znp_send_msg@dst_addr 003C  
                              znp_frame_parser@ch 007A                                main@keepalive_tick 004A  
                              ??_znp_router_start 0031                              ?_znp_af_data_request 0030  
                                     ?_relay_init 0070                                znp_msg_handler@cmd 0072  
                              znp_msg_handler@len 0075                                   ?__blink_handler 0070  
                            _xEventGroupClearBits 0705                                   wait_for_msg@cmd 002A  
                                        ??___bmul 002B                               __end_of_eeprom_read 05FA  
                          ??_znp_set_logical_type 0030                                       __pdataBANK0 005E  
                                    _last_cmd_rcv 004E                                       __ex_int_isr 0057  
                                 ??_sys_tick_init 002C                                   ??_sys_tick_stop 002E  
                             fp__sys_tick_handler 0029                                __end_of__i1fptable 002C  
                               ??_znp_msg_handler 0076                                     ??_button_init 002C  
                             __end_of_led_ind_off 0746                                         ___latbits 0000  
                                   __pcstackBANK0 0020                    ioc_rb5_add_isr_handler@handler 002B  
                        __end_of_sys_tick_handler 00E0                 xEventGroupClearBits@uxBitsToClear 002B  
                                      ISR@iocMask 0029                         ??_znp_usart_event_handler 0020  
                           ??_znp_af_data_request 0038                                  eeprom_write@addr 002C  
                        ?_ioc_rb5_add_isr_handler 0070                            _ex_int_add_isr_handler 0732  
                              _xEventGroupGetBits 073A                             ?_xEventGroupClearBits 0070  
                                     ?_usart_init 0070                                       ?_usart_send 0070  
                 __end_of_sys_tick_start_periodic 03C2                     ex_int_add_isr_handler@handler 002B  
                              _xEventGroupSetBits 06F0                           znp_msg_handler@endpoint 0077  
                             ?_xEventGroupGetBits 0070                                         __tmr1_isr 0059  
                                       __tmr2_isr 0058                                         __pfunctab 001E  
                              fp__button1_handler 0025                                       usart_send@c 002A  
                            __end_of_wait_for_msg 06DA                         ?_znp_zdo_startup_from_app 0070  
                              fp__button2_handler 0026                               ?_xEventGroupSetBits 0070  
                              fp__button3_handler 0027                           __end_of_znp_af_register 051E  
                                _led_blink_handle 0054                                         __sys_tick 00A0  
                            ??_xEventGroupGetBits 002A                              ??_xEventGroupSetBits 0070  
                             __end_of_button_init 0722                                 interrupt_function 0004  
                                znp_send_msg@data 0044                                         clear_ram0 0722  
                                     _eeprom_read 05E5                          __end_of_znp_frame_parser 0230  
                                        _PIE1bits 008C                             i1___bmul@multiplicand 0070  
                                        _PIR1bits 000C                   __end_of_znp_usart_event_handler 05B7  
                          _timer1_add_isr_handler 06FB                                       _led_ind_off 0742  
                     __end_of_xEventGroupWaitBits 0458                                          i1___bmul 0641  
            sys_tick_register_callback_handler@cb 0030                              znp_af_data_request@i 003B  
                                   ?_znp_send_msg 003C                                      ??_led_ind_on 002A  
                                        i1fptable 001F                                          i1fptotal 000E  
                   __end_of_usart_add_isr_handler 0661                                         _znp_state 0052  
                          ??_xEventGroupClearBits 002A                                        _EECON1bits 009C  
                             _led_ind_blink_start 06DA                                  _znp_set_channels 0498  
                              __end_of_led_ind_on 074B                                 _sys_tick_get_tick 060C  
                   sys_tick_start_periodic@handle 0034                                  ?_znp_af_register 0070  
                               ??_button1_handler 0072                                ?_sys_tick_get_tick 002A  
                               ??_button2_handler 0072                      xEventGroupWaitBits@last_tick 0036  
                               ??_button3_handler 0072  sys_tick_register_callback_handler@_handler_index 0031  
                                     _button_init 0719                                    ??_znp_send_msg 0040  
                   timer1_add_isr_handler@handler 002B                              ?_led_ind_blink_start 0070  
                                        __ptext10 068E                                          __ptext11 06CF  
                                        __ptext20 05B7                                          __ptext12 072A  
                                        __ptext21 06FB                                          __ptext13 06AA  
                                        __ptext30 06DA                                          __ptext22 0661  
                                        __ptext14 06B7                                          __ptext31 0367  
                                        __ptext23 0705                                          __ptext15 0652  
                                        __ptext40 059D                                          __ptext32 0630  
                                        __ptext24 070F                                          __ptext16 0417  
                                        __ptext41 0193                                          __ptext33 0541  
                                        __ptext25 03C2                                          __ptext17 060C  
                                        __ptext50 06F0                                          __ptext42 0304  
                                        __ptext34 05E5                                          __ptext26 0749  
                                        __ptext18 073A                                          __ptext43 002C  
                                        __ptext35 0719                                          __ptext27 073E  
                                        __ptext19 0746                                          __ptext44 0641  
                                        __ptext36 06C3                                          __ptext28 04CF  
                                        __ptext45 074B                                          __ptext37 06E5  
                                        __ptext29 0742                                          __ptext46 0670  
                                        __ptext38 0732                                          __ptext47 069C  
                                        __ptext39 0230                                          __ptext48 067F  
                                        __ptext49 061E                               ??_sys_tick_get_tick 002E  
                                ??__blink_handler 0071                                    _znp_hard_reset 05D0  
                                    ??_relay_init 002C                                  _znp_set_startopt 0562  
                                 znp_send_msg@len 0045                         znp_router_start@start_opt 0033  
                                 _znp_msg_handler 0304                         __end_of_sys_tick_get_tick 061E  
                              wait_for_status@cmd 002C                          sys_tick_start_periodic@i 0035  
                                        _znp_init 06AA                                __end_of_relay_init 0670  
                                      _INTCONbits 000B                             ??_led_ind_blink_start 0036  
                          __end_of_znp_hard_reset 05E5                           ?_ex_int_add_isr_handler 0070  
                                    _wait_for_msg 06CF                                 ?_sys_tick_handler 0070  
                                        intlevel1 001E                     znp_af_data_request@cluster_id 0033  
                              ??_sys_tick_handler 0074                                      ??_usart_init 002A  
                                    ??_usart_send 002A                     xEventGroupSetBits@uxBitsToSet 0071  
                               sys_tick_handler@i 0020                          ?_sys_tick_start_periodic 002E  
                           __end_of_sys_tick_init 05D0                             __end_of_sys_tick_stop 04F8  
                     __end_of_znp_af_data_request 0304                    __end_of_ex_int_add_isr_handler 073A  
                              __end_of_usart_init 06C3                                __end_of_usart_send 0732  
                                 ?_znp_hard_reset 0070                                    _led_ind_toggle 0670  
                znp_af_data_request@wait_for_rsps 0037                                     __usart_rx_isr 005A  
                                   ?_eeprom_write 002A                                        _STATUSbits 0003  
                         __end_of_znp_msg_handler 0367                                      ?_eeprom_read 0070  
                               ?_znp_frame_parser 0070                           ?_timer1_add_isr_handler 0070  
                            __end_of_znp_send_msg 0498  
